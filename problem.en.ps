%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: main.dvi
%%CreationDate: Tue Apr  4 16:06:24 2017
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: URWPalladioL-Roma URWPalladioL-Bold URWPalladioL-Ital
%%+ CMMI10 NimbusMonL-Regu
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips main -o
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.04.04:1606
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: NimbusMonL-Regu
%!PS-AdobeFont-1.0: NimbusMonL-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-12 -237 650 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B89290699B50C1BF1BAEFFE
1F57BE7B5EA025241A248A6D4CFA5067A1DA6EBA4CFC940599BA3F3C934D7248
B8E4AC5816F0D2CE8B3C4193CE39D19FFFDB75254573173CB51CCD83C2F2D06B
2483CF9B07B21EC6F502F028C273887BB06DAE2AFAC10E9FD3C7CF51BCA7B277
B706E425302DC78975AC0E43B87073257A5CD7424B6865FCA89D886E8F95C4F6
D457623DBBC0D16BAFEB4C649F5D72B09B18502EEAB687E915E9B536A361B4F1
44C3CD4CC683B5F05A4ECB4823A5EB5179BB7EEE8B76C21B2491A97808F6318B
585B0BAD98F42FB4A755BCB74CD354F794C8BEA5B90FB9681BD5849D45247E39
930C882490230E1662D39CCA875BFFEAC3E79A78DE6E1298ABE9817AE98675C4
16220AD0D3A36580EE2F2A17AAA1246C416D58A4C52FBB26AAF3B6F75833AF8E
3AA996218DAFA571FBC7CAD90ECE9C883C813D8F168C5E86BBFA0F0A5CB36E35
2DE4CAA0F8D3227F72C5056BFB5BCA6BF9C60E037A0E44670A8D3CBC9A19F379
CA8DB30B711F518A8C7569211AC70C46EED2AF62A37F238BD0BD12D60332E673
C6E784B3EBA3F2E71E9993B97E8A38F85048937E958F1CD8FC6E661048546135
56B810FA1FF611B96495081C04542DF7FEF085DEC619DC8C84CC57683D212813
9D14728AA32723E1D15F2AF8F03422CFAFDA40AD7B3E210B6381F66B94E11294
C2F1B93134816B1E636AA6B9622E4CCE6CF2AFC17C9B0307562905FC6C24D60B
21819E209EFB56C1D3F76DDCA2C605FE1895D30F6D027E15D5EB486CD83DB85E
B304CE5F3E5A4AE2D89D3D075A1CF750ACCD72489207B74CC4C42DDC9F77A4F1
3ABD480EDCD34370F71F9BFE330C32D011AB975A9DCFB0A4BE6947FC780F2D4A
BE4714DC4CA5445493171CA3A4439C3B8653C05986E9A6CBCE349DB78795CC31
B01C879BB44632D8F9D8196B6ADD6D42B8634B19F2134FD1A34C8334E1CF5D31
DB11E044675B4A4C1292728C3946B7BC590B9C68F20D50E9F6D23EF60AF9131A
1E73E0DC6575021FE4ED71E4AB3322A727A6A32D5E34FA090973057AADC1CE95
9847889486E4F573A87A19E5DA17E070DC8FCED3E983832B845586E3E2EC973F
74E00D5AD68EEE1DCC3215D1F676074355F7FF6C557B3686D801E54EC5ECEBB6
FEC57D40E71090768F6529B0605F51D06628004B5756428E2AE9ABB2ED239303
AAD05165D1F22B1B00FE80E6907300DED6A5D94668AC4B5ED7D2565B25CA8E73
6D5D77B4E31498CAC8488794F91BFC92F398E0C3227B757540B21745BD882F8E
3F2F7882E2C9F2DD6A39251BF13BFEDF57D680A50E700B9A05B67489A0063650
2358BACF89105C979146873DEC3A754A0F2027F359319269D09EDE08112F5CD8
B8C46ED1B4A7639BB643AA6F834DF00B926E178A043A8357D1EB4AAA95134552
F0EBD4A11E0D06EFE655F7146656F2914DF212B76D4A51C56CE4C94D132E5BE0
876E225B208C003427D9B163F2D037F6F3036003BE4D5605252DA69671CA68FE
39AC5A5B7C987A6B919F56E11F8A4D061C826017F14F222FD4CE7602CB471168
19DEB5F62D26C28668C9600328E5CF1112FFF253065E2EF911A5F51C801F2C37
F45D0AD1FDAF194F7DCD648D8F14A5264B6277B58E797CAA35C737F3DF938004
CA4E9EFFF243628AAE86195AB6AD13AB3CCFEC63A901A9B3B9A5C5F434703FEA
5DEBFAADAC6AC4306F13059F0E2D4CC01A749866C595E97D394EA8112939EE96
313A1FFE697DB850EDA246311A598DF8D7D37C47518AE40EC33AF4857004A5D1
30F81567439AF718D3B7B02416DF5DECABA6E1346FDA4604790E97B39E274197
FC6E23FF8368CE734B9DE98FCF9B0FDA17BB2C917239849FA8B3641C42FC987A
55ED58D87566C8DCF13322078DE4CF1E905866C4DA164EC2F64DD3E2383554FE
5F16DBAF19B1CEEA398F97AE8DC81463B6EB76250CDBE461FEC4C00C40D17D35
2B303F2518E05CFDC4DFA697683ECBD0F02ACA152F1EE78072533F8900CC3A18
69BE48305CF881AB15094F74295A600EE8A429778B0570F27481F23900C42DD4
4F3D393FC62DFA07074E9560A88F85C063E1A38F66095C6055909723606EF8EC
352745F4301B88807B579BB6A0C8F69CD919E311B6ADE903B1E60B5F523A8B2E
7812E325EA858A25C26ABBC4C25B92C47884342BE33C90C19B449645E7B5C8C9
49F0593CFD93BA956EB6F385D209E678032B4B61C682AFFCEED16FB3061E4445
DD5B88906B59DFE804795EBB83AB1E09D56A9947DC9406DE7410672590BD7BAD
05126102CB9F5858F7D48E2C2AA8284ED768B1555C02A9134AB9A29604486DCC
FA49AC50E48A48AB13F5D0446A0D05615362934FBCB525354832471C310A24DF
AB252E4B92D18537A2FDEE1AB47D556C6FB80AA54872AE1C9F11629C24A1F4A8
3CF5618D139605D06B0E3555FC30245BEE54AC5D63E3B2BE941FAD5968105988
0D6F30A4C67B5FA665665AC70DED4CDCA7E5DDBE06E430F36472F6B02B8A839C
C2427EB31AB0E0721BF6B13C8B7CEAAA9DA7BCD564434FE8B0C2C385B0E99329
08C545637BC8978D3FC2737DC5A96880A9CAA6B977EDC08E6766B1C07E4B12A7
7A5FB75B30891C7060935838E474E271FA7DCD7EDF9F092791725244F0090A5E
F3BF3A7CF5C6F057B2312075C34B95CD5CD6B19BF4BCDF49D14683B4CEBD8215
FFFD26CCA32B7CCE29DA1683498D72784F1E25193AED77C4581629CA68F3DB66
8559A2C960E59EA2F6ABD3A14C91C03911CEF8F50531061A9044D7F7CF57983C
6558427374EF0085DEBF293101F31031BB319823309BDC7A78DFD27C662AE9F7
B32242CFC9C844EB686FDB29BB688D67C877774476DF39686F5E4BCF105BC1C0
60404C0FDED19963B70320D0025FF0082B46769C754DC5F77FEB379540D0C609
5F052CEC01B7D399D097BACCF6C9E10E5C1761D0826777A754076C4C3D0A68B3
2DBAED4B5C0741D4A6ECBBA19755C85371FC39C88EC838D41D58EEEE0D52629B
43A269AB241A647B9B3C214F7042C9AA07E9475A8885EC6A79394CF44EF8421D
ADCFCB027E3219FB48E06454E52F1D24111C96F2A5A3DB8176F9C77BA5BB7A02
A4163FF3616E6E571DC3871F3BD4C83039CA6B0D2576675EA38B6F363DA00B35
CEA785C6A1E54997F7CBB7FFC71FC82F8D173315A44103BDF54006FF764C914B
4C11AEA7B23988D184F29AAC5C274889AB7E3E61A7F1029FA5E9FE7BAA6A177D
A4CC2B59520C3DA98D5F395ABF21E83E25944BF6B17546BACAB7E7C16F0AE84C
83459C3C11216F817723AA6213A951F4BFFA621B34805BA4D923A9821DE73BB6
F7E0A2335E1FE9512F87AEE0411C9627D28F185EA401BB15837A876FBF9406F5
FEECC4C7AB6DF2C527283E7868EC3E869D443BCBA9770319B7B2A66BAA9C961F
E9F1F47C6C2DFBFA6BD14D5F4D94DFCE0A70D2F6DB85972A1E37907E1F191D08
B4588571EC1706CDF2E7ED48C7FC04016F1B13CFF6A9570EE47B136ECCB6D264
5F8EA27F25B4DF218DEA230E4FAF806296BBF942428DEB6232DC4488D639D423
94131414654AC5FFA4E2C55953C8471EEEDDBC8BC0FF14DFAF42362F3893DA79
96380563BF7ADA829FDDD099D6F798A4E9589D93064900965694FE0E6C412E32
DA1540EC59268884368689BEFA38E4CEE8BD19BA6811CD4B4D1D79F282979D79
9F8DBEED384CEEA22F673423BAABAA7408CE4E4D4746283B177B5C90803275FE
BC7C74F5AE619FE0218BF35BA8CEEC56C56C4EF4696F5EAF2DF53E3183435BFA
3414733BE6CE90C047CBDF9368735D2D9B2BC6B5CD79D72A07B117DF19936594
1F774F8CB1F07D5498B68A580366A8C7AC4319E18341C0A3D1002523E04BE24E
0A032DBAF142DEAEE261D53F2C26FA20EDE4425DF4AD5D5043DEEBFA9023144D
99A71EDBB90FB84380ACDDA68AD7F36748FC5864733816E1508D5C8D60B37A14
8CE5DEEFB31FF49F512CEFB665519E7E1450E00BB9D0279534CBFF72C7EB5AEB
A5C7A3D9BDDCD1ABD7F3AE4C9B6EB5E26CAD7951FBF3D7B27121FF01DEA6F49C
7A4DDF233D06F6AB2EC17F47F22BB4A70DCDF34A7808115ACD2B4FE22AE09DF3
F3600FE89631FCCFA1C86D5C67B84B7C7F21762238B86E5B7DB23BAC9DDA957E
BA97B26656486721814B59840243587FEECAD354A03D2E41A3701DE89F53C20F
1D823F2EF64DB77DDFB680E800C72037F7B8FD8B789AEFE644F929E005007E3F
D0C8450CE79E425499DBBBE0FE6F4D911B87A6E3C46B719B61D7779EEDD1B150
A6EED56EB5E5579BED3DA73869BF5C4ED46D104E5A89581E73F9B01D41EDE04D
7D2136940739BC71F4F96C3CA5DCB617EA3145F56A06B7A32A7470F3E48449F9
24C08D727D4030E2F0216F900332702F263CECCE71AB67639EBCE76DD63B81AD
BE5BB6D7C6A32E5EEE868EFD5C0D7FB9D35B1FA9B2132331C787EFB5B68D9B6E
6EAE7831C96C579DCC14BFB758A916A7A3043005A965151B2A9895B02E5360E6
1C8BA6F6C7F19F7BCBCBB404816CC102B346B3B6B2BDFF59955F18C8F436290C
53A1EE4266D434DA26D0C1005AB6C0E2ACC996C889BB23ACC950355F6B935D49
902A3FE36BD1721DEF363B65AB012522DCF1755737BA539F4F02867C68BD8E5F
E9A45653BBAF2A5DCA560DB5B4F4B87A6912CC16254F52A26F947EE2DF4A99AF
1DFD8F5D994F7F7A6AB92C9CEE24F2EAC8C34CB7207015400CE6FB005A43A086
9A6249ABDA4039831E373FC26E557C8C2BC08FBFE6E72943030E5D42C11F9DA6
B570B44513F554BBFB955C0FBD9576B09364582E4243383C1F5A33B8BE57F382
3DD067B9DFD27326EC057B1883AC84E921862AAED3C27FD46708E0A52751A5B2
26884049A6225EE9072BCFDDA52C2D3958D6F802F415C5EBC234767F5F752357
203D5AAC285810CE226AD21F1EE86333A2C8A8572A2063579AA8114D0C48951A
29946EA530182C4E38F30A87DA9909B053E09F4736C5AFE67679EA6D1CD78751
9DF8A49AF8DAE12EB3F8B7E04D4A17A8FE45EB7793EDC5E203522E295E3EBAF8
37EEAEC22FBD3944D16272642367D3F96891818B8D08E4964BF5ABE0DA3110FB
D87804EA49C7DA55875A3CCD94F522EDFCAE0CBDD9C92E4774EA19151E40A8A8
AD8074AACD92496BFC1C915CC5F3440F9EDFCDC202544F6E8CC67E14FAA6D281
3AFFFB625646D8E4F8AE7AC2BD14045783FAAB1AC51B5D61ED7A6906155DDC00
55D7E53FBA6A56177526E43D491055651A1C740BB105D4F23D78E0286B272C9B
3BDA3E779F0706269DC92F470AFDD8E1658451C2EF8BF3CCF251C95E5235D80C
E8500DC032AE919514FF3CDC0B109095DB0ADFB5354EBC147AD65BCE334146CC
9EA788A98E83B77530A22C854EDAECC5AD4AA55DA6EC25B94E589B80B057B2A2
468217BA5121CC6684A86A61B0F95E22E8EE0C368ABB44DFC337AFE44F3CAC59
70BF4E90CDC55E4DEC459759D7D3A435DEE09021C395573D527DA222435015C2
732C6EAFEE0AC1EDF4DC2F53D44C156E4C47B5E149C4856A1FEC830E70765D19
DFEA28049F99B840F337BE15131C117120B9DED03D03A7D87F4C47224ECF9FFD
37BEA29FB80E90352CF6A3C38A3E255C696260A50F295CB2AA2FC1EBE300128F
1E06164CF826114CB1C7BA3C6AE80E1738035EB63D0C84BFEC4EA06B0A1C6E72
2B5BCD543D9108C6EE0EF40D99EB62B676F07CC6778726356B4CA0658E14D1F2
AE50CE392A73C446324E7CFC0A8DFD626C06FBB18C471186C16101A245A978D7
29F170206541BD4ED5CA6482E156FE185CF539D6E83D7DDF84A35450FC0BA303
6EC779EE25B86A0C5C4095B1E869D3E55D11D9759587F283DC60A2707EA23061
5313C1E53844B2C7A227322C783EBDDCD10868090BC8032342857E6DCB2A974E
04CDD3C11390F46C68023F1CCF77FC10CDED85C1F389CFB1636CEFD098A66AD2
991F011A7716A8F1A05E1780CF6F15FB9D92A9CBB2C5459AB5380224D2B40BEA
5C18AEB3320351530A54380E6AB2DD9E38D6A4FCA5C2E960B8D969B26808DA94
FEC5A71BA2D3F48A9951FDEBBA891C5725E3A39C93240904AC946EFC2DA5BFC8
93F65377AFDB89149FDB6CF71AEEE4500D852E6D4F79F7C29B5F6B83B82EC62B
BD33EB7D41C94B66CD821AF3AAE894DDDE2FA47E67C04AE47016DD93D5E2043D
FE6F770C564FD29E0E99E176E22268D7F0CDA43211A893678EA9B165DB754E14
D890F19FC82997DC407840B0924C38AFC4631223461BC399C3BC7DAA90B77FE3
904B56E23EDB7B19BDC1FC8592F21E34CF015E9E636FB0EAB98378981B797793
5A06FBC779F7C3C073016E5D50CDDD05CE0B741E9F0E9BCB1BA78A088D0EDF8C
B1844649E8884AA3CE81FEA2F840CA1038F048AF9A957E8B3ED8529656395D5C
FEB3C0E119A5A502CE4F7A97332AC263A312B2D723E858068928E0FF31E70BAF
600488D3FE7251DD5211ACD684EAACF24F0FFD7F6748B63B0C6D53C52D65E02D
C74F91056FA80B1A8707046B52CB4BE2C7A0D9A41F6E1F5A26A64FE348622C9C
5CC8D9883F952DCC6F3BF0D81672CBC7E3C5B6F1E02AD141D29FA9ABC7CC9113
C7CCFBCF5620DE7BE2AF90A997FAF0657FC40DBB969ADF6CDE36D67CD8261035
E216DC09694D2406245E84F4D47146CDB5C832A30EAE47DDEC907CE0F42652BE
454C56B7C9AEDF2471E74A78EE3A7C7BE8358787C10A3452D334C1FB8CE7C6CF
57E48FB2B4335E9ABB53FA9D4AC7A752D99E76E2819E58844D4988A574FB123D
08844AE36F4EECFA2B3C1FB92BAE4A0AB90AA47E38F1457C11DE049D82319E51
173FDD31A4C54DC8FBE73DB4F4BFBE4D4DE184E0D2016B65F7B1B56BB60D8AEF
C3A5C1CF3CBDDA9A36AE0192B91BF967C60913FD4C4BFFD0AA97039393614D5B
1F2333C6C08382841A4950528B77C22B572657F8E09EB8E740EF57CD4DDFFCE7
C9A9E8678FEFED25815BAC6233E2C59483471E0CCB5A9781127C56357506DB4D
41EC266C2851CA1ABE590605908356716DCFB8247738575EBBA5565CA2899671
D2C0F6AF4B088734673B10ACBA5D093A3417EF9E34E2F500E5678C0474FFDDDE
B1F245E01C1F36621E35D2D5FED6B382F5655E6CD81D31505EEF70B3490F78DD
AD1647C4655B4BF53F63A48C0FBCAE2D1B8BF710AD101E728831610EB6C2BC70
DE5DADB0AAFF521E2D26278D146F9686E712756E3A03ED699114F539BE350D22
89231F0E0250BF06C590719A5DAC9CD0B0EE1E4D0ACE38E30B1D541CCE7BBB87
52EFA13427D161E93264951393AC5CC1298F57062492AF0CC897751C1E4E7AEA
B236D3885356B2A479D838FA1580039961C3A514A9DD020009E764A17C9842F5
95024E286C0AA44CF11A09C4F14F07E3B4186064792B8BE69C01539E35149946
D350F993D28452462EDA33582FD3E595EBDD5444C58C4E8FA2B452E6C59EA799
9C79165DECB8FB12C0F37EF8DA28F0F68861D977869EFA0A8A4983D9EFAD8EE0
7C232A2C66C31DF6A8F7423085C1618B2486300E84A5F238F10012F05C939A6F
B0751188B8792E114A0B3B5AC5FE262A49649B9FF8C8C495CD02FF75D2FCD8F5
E62795B990AB69124FACFFD281803016240B58EF23976D030888E2A6184D89A6
17F73D55BF7E9EB433F41C867600EA94F01A8F9BB0EC362609FF753A7D02A35D
A95040119EC6D312BF6CEC422EB1FA50C10A754585B440D7E6697C79542B0F36
3E9F4DDCB897326F02DC76C6012F0257864CAA2EAF1F78DCF8D494E146D0FBAB
2DADD904DE6BB158E6FAC456A42F6626A6E7CFC8C99575C49FF86C3EE982F89E
775B46790D67CC0E581FCE2E4DC2E785C0851356A47E66D5A4DCEDE40F92D2F7
9DB2E8403EB3303D7B7488394CBCC4735A9C85F742828DBD3A27F44B5FFF9067
CA62696E72BCD6A8C35FC6931CB2408678C7C3C7F4BD4C077811073FB7BDCEC1
F2788446126B5BF9F0750DC17694FD9A11618F6FCA15CD098A1B06CC41635212
2FC5EA5E9F12C771738636721AB8F98882E4C142E02AEFE4CFA4124EFBE48B8C
A7A2A0D96DB80855BAA2C24A765D3C008C30A7D3B0DA62CE829BFB2612F75D26
DE3CA39C2C66F5F5AD836DE03F7B162E02CC41DC28BAA43569392BCF47E676BE
642F5E70D2A99118A94DFD65EB47504C322BEDD3B24A29EE505F477B50A2864C
72187FB7C907DFDDDD4A4A3EA5B0A1FA84E55ECA7617A41124595DB239658764
701CEF19E33CEB900688B76623F07A3502DC9C9D38F126E2118A27CB1A88797E
9DE1A34E6EACB8FA9DF166C33ADE345C6AB91921B93E22698328AB963EA00FE0
F8A0DC033E93B040A6121DA499CC2DD64BDF04FC5FEEA33D7D06B717D9AD0AD9
090339E339375D60A1D4C14F7A4104D14F3A5945C04A10922AA24984276F483D
624AD22CBE0DA83FAD44E0969AB3A9D824CE570B02C6EA5F034ECC85F78DC9DF
EC342E27A763669EF26D6725A687155E6780C7B2C82C0672CD9899B12E15AF03
9049E5B3F84D362136D36F0B0755BA39708AF351C91197AFDCE81852FE74F0D0
781CDC5303AE631B7AA2484EAD1DCA25DD384DCDD067444272BD8E263B7E189B
065837D71271DB8F5FDE80D25256FEA5B741AB69DE520132824F225C7A9EE4B4
D7B5CD62F6203C31D9CAB21566E8BFCBB534C53EEDB7645170A6A6B6C1A85D00
58926158D715107238955795B8B5F0761CF5F602D773170B7EF67ACBB6347557
8EED3501D0698CE150536BF2B4EADE7D961BE9769999035BFF29D6477B2C3EF7
CAB079820BDC7FA92CE2CEF2642F49C46C2073C7740637BF6D2B3844794BCD20
277639390ACBCB6F9C5C70E555DFA1D8EF22E7BE4529157208E3B37B9CE3F1D0
C616D951BA702DBBFB672A072C0C6DFBD2AC4CCF96760637BF1042155BE10CE4
6FD417ECFAAC501BCF19DEC8F7555EED3BB2A04E4F051CFCA35AA12FDE3B3BF5
254E59C0E8B82075C60AA8F8506D7A8CDD807B3CE00CC05F6CA1D87A1C83530D
8B4D1B0D52E1A8D0C140D9870C55B799710662B4FE3DB0EF8D192E2BC0FE7461
6331609D6DD131325357A24634E7582CF5EA811B2898D889A581C5ED0AE4BB19
E0CD8E02EF1D7F69C669C5EC403594AAB650E21EFE2B0B8A550B42E496BA8DA0
667902911CBF62BB4D58D6E0EF25752686D31DA264E7B739C4088AA588BC35F7
CFFA558007AF2AE9450EA84AFBA1C099D37DCA4FAFA920031B2F4DA417B2CC98
4E10BAF0ABB631E29C4A93840A02B15D7FF85F783BA6A1D82680155EE501C44C
718709C322DD98DFA4075DA34C7C97EF7F800870C8F09DF9D7C9C2CB99152B03
17BF21FD9FBFFF3B12EF1AF57B30934D33CC2396702F8C5F979AC5DCF2498F43
39CFEAD3E55F65BF2FD77EE65B4DB91BFB72FA938A89E0135EA13D44347255DE
E09861895BEAEE8C2848745C4BAF99827E11E832D2B8D624249414C02D0FEC50
584685E18B23B6FC638E55474C540862A1B09EF6784690243F4765CF40F74898
6D16DFEE6962101D65E487A587BCA95AF68F178704F4C9DDA1EEF45F15978252
8E1EB5A999C0FCBF297B62304668CF965C397AF1B7F04801607213E3443AEE8F
F128D4A0DC55BEC12C53173C3A313A2E372136EBAF32C818F1F770E2089F5DA3
C471EC6F1FEB404E479017A2820B436D4FE3572CEC50E13EA4209CC3AFDBAACA
C28E3394A8764C9EE898942859243F71B2347EA4FD08A69D798C9934744B0B60
98170E7F7AC47A9D2F4A10FC032FEC7904C098035D7B74858D352A5DD16283F9
B14AB9EF177E57B82219C67A9EB8EB3D1FAB0972F174A4297651688F826891B4
A47EF3A856032136221AC3434204786845B213A287F8D31AC45F953B8590B069
F12A2851E980087B8D7CF10A37066E66D38783F68A54730ACFB5FD211BEAE0DB
B5BEC3FFBDF1C7ED59DA8FA39787EED0C73F2DBA0F39312188F9BBFC753A9491
E1B70FADDC7800CF655EE23DD949FFDBC1EB5419A9DD28A2554BEFDC96EA8521
B538CB32649C98597DDCDE8DDFBDD70EF02E745355595C6A9E36799C7822398C
82C22A635BAB5D9FB38171F8123A2080BE3F1FB3E96B0960A8B9F3DCE101C80A
A93B64501C47B6D7C1400C3EE6688FD5D7849B502507E683771A388C23E494DE
C64AD151AD39923670FF40FFA5141C6A774F36277267A2D8C37934DCAB300673
4A2567CF344AE7040D28E2027A98BF9148F4B1118179748A711820A37261E130
910A5DE1AF58CAC3F06DD1F83FA50F22349C264A28CAE78E3BBCAC1A881DF340
EAF1D60DA34331ADD9140716CBF1C5624422FB5D2B891586DBA3482605809635
3108C24171429FA99A086B51ACE37A02D56D4C4DA9CF3ABC86C9A6F2F09DEBB9
5E39230C890D960434888C05218DCD8124F8E93E24F05AB2FA84A4AC427E79D5
A6991AE319D33A4379586D4097FCAED8EC415F57008CE46E034B3F80AD2AD5D4
61409527F356F9C2E65529DEEA9885E3E420F0F6DD4DA8715A2F31D9B197F8CE
ADF22C49B249F6C0DD7D613380426D2BF7D31EECCEDEABDC77087F5FDE9EFA0A
D5853E990CA4711DC0995F45A78E009BADA04C0BE9AC92DC81811FD3F86B691B
D62DDB9C511722BFF05CA7D04E0168481B54E509C10A6DAEBF7EE109A30D769D
7C8E1AB0774307CAC269D898755DDF1BD160798EA1FDF16536D526321F198CF0
22E4CD86CAE654F9F446E636F311332276822455FB58CC4EA818AB99360647E7
336A5B55AAB049B338CC4843A2FBD4382CC3F1BC6D3B57FFF580E11187F7DF41
DC0012C8F219B0BAB4EDC12643CA7FDEE37A72DB42E1017709856BA73FAEF896
DDF0947AEA16124722E5B2F7351E89C672C971BD4D501FB515B3656148483A34
BE6673EDCA6A2838432065A68C60094D96EE7903199FE200359B673959BD6F18
A593F72A52DDE5F45EB420ED6ECE4051C713540E6FDE8854F0C54E24B71C8221
23CBBB3808458B32FE6FE8CACBC2E98FA74251907F96323554E523C8D2F82B93
6918578E9BC5D69037670B8BEDF05D2EF7DDF9A53E8AD70FCA4F7C57E4D8226A
BFAA1A12BF82A1F9837B450C823445E5A7F1F68B83CB4070CC9B753E352FDEC7
AB4451A8D2B51EDAD0D4B70ACC44DA7F1CF4C57AA4ECAEF2FA83C14612D9295A
61C344F58CCFECBC1F7EF082855481278E7B8CCF5CE504F2D51F2A81C9C30127
1B1D66CD968DB533DCFB40E48FAE58497C9B0214366CD4D612FFB6A6A0D648C4
BD6EF25A22E98DA890E5EB0FD33434F3484646FFAEBCAA474AAB973026CF2E01
DF1DC334C69BC1F9E3792DEFC7E43C375CEA768826967CD2DB9036093CD0500E
692FC10631F6CED04F3A8C0B3B57D605CDB4155ED8EEBFE70D4AFD5F66AA5C51
57C4967132F1155748F8848ABBED96F06A0A6DA77DBB182FA0C89FEEFBF5E568
0E742DE5BF21A69ADE7967275ED32438DA11B1EC49214BDE0096E3A3E3502AB9
33CC7BA04BBFA50778325F6706AA3DE6FB592F537D8F463BF5BBC040B9C8E7A2
36FD561E219A1952C8DCD9D07CAECD3EF6A5711FA55BE955529885474563B879
23D5230E0667BC7997D59E10EABB060CC4BCE0928F7ABC278AA72F5DE87B1FF6
DBD93FBC16165A80745A16CBBC324C69C1153B7F5942B7F84C058E9435DB48FC
1EC8EB71929D51E8CF7DBD922059CD911352E9C351F568CB9513DC5E09699461
3A115B831D2104E66D94A0CC77171621935216298DB5A5A8586E83C5DADB3C10
F444F52EADE5795B7A2B914C6E922E64F1E47502D1E58495B62C3C09ADFB7681
E88CD723EA6098171AC5100199C8F2AA8E01E8EAE8B4965B3DDD8148A60F07E6
7B8C973B0AE7BD3A9748F71FBBAD93336BADE404C81EACC1EE7B7DB66519A458
0FB1D04C9E9A46390B74D5D169100C9A9FB9AF30E4660C41CE8C75E02A0F6DEC
C243D7D282655DEC0ECFC93D3F51FEC4F7D8B65CEA27EDD469D283FBEC904F69
5CFD99D3C6512BC8DF26478BE98D0CD6403AF0278265ACF6AEAEEC7EE343E33B
F217E890AA67F10EFA23F4CDB47D4F6AB7A887D4E3D03C16AAAC7DAB317E6C07
5260DBC365B93863C8EBAC501F9217D847485E6446379D963A277E7D28855C59
81A2E073D8EF9E4E5314040A2B51F820979BA1DFF91B1D76367940D4CB4CDEBE
1E50CE6D88EF12434057BE592C55CA68C5E4545347F3FE900978937FC1918837
737C03DAD45C89ACB98371A93B8AE69F6E8161A6F99F084B92F0751E0404879E
55DF280556317A348E994E63B10DBC68528AFB5977ACED515F101DE30A098ADD
CC577526EBC77EA14B2C4C016F151E04B203569DD19964449431FA5A4CAB734E
CEDC822F86404504AC45E557A0904CB0D16374EF2B9B9B16EDB21455F1209DFD
6AEF09024E3F6F2E6F7B168136C00439110726D4F94A00DAC6A4A941402B35DD
235A6ECB2CA5293FEAB910528F588DFC4A192186681CF2677FE6B21C4C993ED2
6C16FA4BD6B0EF2467F48001F72E565E841B4098228F7D089389316F4527965A
37A2AA7B2A3B7315CDC38797E4342188F9BBFC753A9449715BD3CF0072552975
C8903D6DBD7A77920053C2B7E24B049C95D62D8089E4AED172CEA06C211A0DD0
97DC3E3634FB9AFD93FD6506B7E617BDB81314B99E437B81547C9E73B29A5B39
7E1E4DA563903B4F70458BD4D9491307F9D6345E042C4C96C4DBACC5B990760C
AE52AAF70F32CF8E0C6D070C8E3883DC1DE565E0C511D8FE869D208BB09AAF82
364AD20DBD818BC20BCA22F9A9A74D26DDB73DAC5B903E83FD141901EBC493A3
BDF9F30DC9C332BF6F9C33045A33FA5FAA1E234FAE92D7AEA35C9926309BDC22
93907CBCEF265D3CC7B5900BAEB2AA27813CCA84A1F8CCB0B07D516FF79FFCF0
BCFC5D1B51530A3D1832AF71C8ED83A3155E57A6F4D762E911F61A186A817CFF
6825D122E4650885A6BCBD413D4CC15B85502A07D6F647E732A2B12A96BAC718
9B1AAB6FBDB825F44EE911FD6F899938CEE7149446314E6D5B3115A7AC75A43E
1749F601CB7919DB17F88E8FD48F0B675F8B57947F8F0AEBF34BB3E518826DEC
5D6C28D51C6360DF9E0F0DADC7398D0BA74A883440DFFF5FB3DEEE7E6F9E5C69
0BDB0EF84AAA8017771CA45FFC4E276396D4FA758A8133B94678114F36E68190
1807DE63E53DC04BC176DABFBF7F0527992DFF9F60B9B3369B8114E1BDD4806D
B58506BC14BCA37C6E820376D265AB659241056CC359F36FE3A5DB4FD38E0B65
0B420075E5A0A4C2E6E3D1E643B98B8FDC1E659B5FDCF6410102ED322B5B8D8B
2B33246D7A6F4FFA46CCE92F796CAC915EFF986EB9E24970D73AE198962F216A
431604ACE3F96BE2C54C7B06FB3114536BF16A4DBF47AFD57BDAB8084C06EBD3
2647AC45F3D8E4C76A5F9BA919E582CEC0762C53EA2BCB6BD20FF9E82894E660
61BAF48B1CF737C7696647597B925E57FCB9ED0D34D0AA0AFA1C088B38E40556
B5AED2E20F69C5AA2A02E741F87E04A43CD2C9A506272CC7E719752260B70073
1059489F4ED1B38ED50D48DAEEF9CBD3A33E8F28F9C82BE96BCA7AB40C137E9C
3F06F6C9829E3B4B6D2B6AFF42A1F3CB0EE20D22C2B5FD27C8B3799101516789
ED59095D9C92FC0A82A5A7C9D2BBE737DE36ECC69F885E2534ADCA435DE895F8
55616689AC98C856A8D6E902CAB8B91DA20096D72C8FADA807885DFC47992724
1AB2EA5D74FB7F1C82D503EF886754F007A1FBC3C27BA4B6997A1C879D037F64
8997CDA95D3B7E4B1675564ED7B0C37ABF2D3659B8AA0EB77F95F333C03D506E
BA737A047FE48817E2A2F71D495290673BBED568C391CB156E1F2508CA8D4748
D28A026C11010B5C846CB8A482A8DF4C47A25959A47E3B624A98E9C6F218BC58
95281291BC4C6B4A6E4688131FCD10C5E171D9CEADD23EBFB72640F1FA9DA49A
63DCD1F7112572860E8FDE8BB7AD1AFBCF4D8B8692A8035B6715AB7AF9961F09
43FF5FFEEFC7CF443E024D74276453A87BE1CF8E8E1EA73DE5CE2A6FBF83E8DA
205634B63DADC3D942DCD0F79D5B8705DF1A02D85621B7C0458600FC70E538B6
F1B9D79D3EB381E2C9631CDC51F653940E5680EF9449825D6B63430FD00D182A
DCF647940823385469A8C888A5D44E02E7AA6A4F860D58CAD9BECA2AA80F2052
B069CA102C71EDC35B3BD2A693BF902181A09C6439978134C39C8562D3BB4926
554748DA9184D101FE35796D56E967BA85A2222275102ECA9B84CFC8EFB2FAF0
102D378B88A1E51BAD862B08EF6E0E71EE30B6CE2528A366F13C0F77836C655E
DABDC9552A82FF4FCEBC93860729C93BB8B61EFA6951250B9C1C7D64DA0755DE
914B8A2CE08DA06FFE3C2A49532BF186717637F4F62A76A569FACBAD83D3ADFA
EEFD4148B255C0B188A848E2357632ED3213707523465B57D1A33C6CA7D5B140
F6DE602529C4E17F0FCE80E264FD4AD5F42A7BC03553DD861F494CCC2316E55B
DF28B1E67F657DA0CB5CF9ACFA7AEFBD00840EB611F20771B580327623B72101
BD9F5B5067CE9880261F911D5BD851902B20DE0DAADACB21D7578DA4F5507C76
51CA42570F44CF36B863BF03A3E127623C190623B91EB4A20D0E62193E48DD99
1F317E074D2227B05C164BD2894B60150AC61897431031C39FFE0303AF1B0861
3A4879BAD93DD6204865DD98C5B368D1A9C170AA44DA76AE83FF8C6E72B85A52
EF8F57007057555AB7A76ED286CE43A6B406F61AEEF05A7AF2E1ECC9FD2E8231
C3BC71BD17EF518F85A29EC716E464C51E3313D057DEE8143B6751F0E584E2CD
779D17210EEF3F78E3979C038630AFB543853978E250DBE656C5798DFFC915B8
71C7484767E10DCF074EFABEE6FE043E420165E101B50985090B8EF97751EF8D
A88A9EBD24A99094DBD1FDA97556747C5FF5F46743608B6CE40181AD5A1CE869
8078449F38BE88D0AAF08DB2CB2826558325BED5193878AF0D3EE7AAAA52B389
FE17AD5B52271A4D3E599528C18D03C6BD17E8837C9B883EC9F263C05EC62C91
07CC2BF57F4B53F1C7DBEAE43F59C9922A55585F75F04F9E5A344C46CE3C5A94
BD4A10B8F0D4EC558301F9643DA2A8868DDDEF4207FD2C693E7DC3CC61916F10
A06788162F8E05B5E98867418052A0408EB383C77B8BF4CE45872EBB5A140B6E
EF806CCA9B7B9024B1C196022B7A8B91368798887F484B73CE0869F6CB9513B2
15E09B535F45E764B44C2C4E74423ADF4BED0957BBC235CBB9533238A9DCE374
762E175DB7E7BD1FBFF308742741751B786E65740A8B365C51EF02B422E53613
AFC732169D1A9472FA44C3B89C7255A40D43F782A5AEF62F849CB9393FA81425
68C80EC5EC17C6EFBDC036CDA6DAB04D6183B176859E9FDF0865E9307561A0D6
B4260E999A1FF3EAB6D2DE4F624123C4FB5A917B8ADC2CA187F2FB1C73E0D536
58A596A555734E40F833DCE7B367F971440CFCC9723B735D963B7C07
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Bold
%!PS-AdobeFont-1.0: URWPalladioL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Bold) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-152 -301 1000 935} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB42B05EEB99F8B643CE3
F4B6449ED5A733594F70CCCD7BDB073E630C93A502476CEBA5741BEEE5938FCE
3E77996A2C56EBAE52B2701DEBC95E363E995ACEEDFD1CF8EDC72768951885B9
84F82225B3BB8E9522E784197B8AF13D70B2CD113F7501CD9333EB9A28CD9D56
824E9A3A689741D4577777676015723D17033D2815122B32062451E15DD271BA
6831FBB953F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D4C56B8F52
BCADC9DC83D5C7C45F5C6E60DF9F9471D42B1D6F45EF98EBE41997BEF7D56981
8F9AE898AFA16089A91654ADB0AE2631539262C43BC5206D6CB73867B19EDFF9
024F9C3C7D790946F34742A688BFD183A1307649A36F782DAEAA2D8E581C911C
B42485441FCE5FFBF911F1D9988FC5C601D09514633B415378648CA65F2D6F40
F7CC23901787522154CC33941615849C4E5F2600BE11CE10B78AE007EC0E5137
4C66EF207977C2C2CE5FD8E70A74DA9968C71790516F1489FB5A2585DF9F5E06
9552F391999992E23975398FA0F539A299EF090B9CA16E940104614A4FA8C6D3
495975F6ADCA90522557B3F02FACDAB68EBFFBB8579876F09895D723E482DDF4
FDAE645CD275F3A8DE44AAD1D4C2987B6CD35FBB18312851D858E2F382FC606E
41B7B9393EA57A7FB9903CE835BF1F8E67C15EC8AF980D14FAB1A56EF1A62E14
5433A36160111440DE43D4C8F28013504ABFA5BE40DFA52D34AF251629A70368
73B22EC87849070CC52FE3B74D259E603996AAF50D77304A8B6631C652E482D4
C36A5EA242B3F6A979331BB593EDF29F2D9DC6B35BB39A5876E5378E71CF09BD
151E4B759D53762BB109DE5D452919DE87197C14A816E6970C6476C8A4F1BE28
E6FBCDD677D4379E9D96A978EDA97A0F256534A641017C46F0637A6886CF10E1
EBD75689D3CAD47F1ED6096F825036BFE59A50A550F0FCC978EFE560113A6231
60AE7DFF1BEB6846A97F44BA6196DFF0E9AAAB0F3F34EA25A98ABC50DE2C1812
47CD8A7E2F2BFB159544B845133FCD3B9F46D1C48462A806E9E614D5EB37B65F
BDE52075686731382196CAC3AE3161EBF89944F88A19A5CDCCA280C5A47CEDDE
B826B08AC1581B76BE95036D3797DF9D68406C79A4B51ADF64776AE9BCAA6D51
1362E7A00FDF2C9A6D40F64DDA4B706FAB728B6F6FA9302B4455661480719E97
CFB7A10536081E4E417984862DAD762591F1E352EB919871CFB5AAF2D20A0476
7773AEBDCFF96A82CC2E40210AD2AA6E54311CD8C9738785F5335C50E6C5D89D
00AB1F14DCC973FD4A36F7C6CD3036C824FE523C6D29098B15814D6B842A9D04
1E76B7BC14C0E34060B580B9142C0D2BA97AAB26D48D50A8899DD24D4DF5D81D
9EB12338ADB31F4E0A295D1DFECBE39D9FF712C85C748311C9CB8438273210E6
07B04566B99B40DA40C25FA70652F0AD1ACC1A2DACB18A8108B8CBCB5FDBD2B0
B1971351D1978A1D3ECDBFA157EFA291F7837CF697A189711122AB2FDA7F0F7B
BCAEE514802AB4764D8767A96366B5B2F5C9C7999C479BAF2E1950694B571CA7
36E6FDB83CCE8849508AB9653D3002D39B438092181D6D06E838F7245B134792
1D8D93659EC8BF5392FAB64649D0F9F9C71B704E84B1CA62896E1FA498A8302B
E25A0D74993713AB2FFA10EDEF127303002CF1144AED3709422940A8C36962BC
1D166C17512383CB20C9D806CF810056FFB04FFF49FA1E0A7F252FCB0FDB297D
63B8DC952C181A02D22FB85F961C7CCB8ED31F229F107D0A7754C4C27620D6CE
5925909FD73ADB56D9316A8E0CE4F32521B65F83F15287234F09C3FF1EAE5BAE
847C7D3D93177DBCAB9C0F48855D71309D3C34FF96E72458EC8813C0142F72DD
544A341241826A4CF91C45816B9AC1146B1BB7AAA74FF92F4273B0D437316FE1
9495581736B0FEE0F522702E81A8668CE132E15265271E6E9F502C0B057C5A3F
63F8659F536C2C5F4EFEC4C0CBE41CAE0129E9F3CB9D1D32F1043654FB4E9E9E
4CE34660A7B6C084967A50FB5E53F5D4DE91ECD2A4B570E70B8E61B2E9792E65
10FD62D9B53DE2F45597EE0694AF8445C41A12A0DD5382793A0969E1129AF438
705D08BC04174D1CD50A27D94FB0D2B7767292AAD81E5B4186180C7D70697B73
BFADEFDAC4527982F9CF0D4F945873774ECC50AB47A610706C03FC79A00837C7
DFC6CBAD470825AA8979C23949279587E2295BD4748871D5A349370AA3F656B4
5B5CADE13261A8FF61F2E56C5C273D04F5DE5D8C5C9D00BC66C3DB5DEBD27127
0A478AED9640392137548DA530888E7CBAE692581563B7D42BA2E6E677B95C8A
97EB74105F1F85E3E21FCEEF31A4D5750105FEB6F0C353BDC8C2DB390FA2BF1C
1B653BE9ACA74DD371CBFF0218EE2A58701D1389AE6E5484C48147AC9926A4E2
B057C32C1A64E1CFAD9C246B690DC0D5BC7A2D67CA660C9BFBAD84B1FF01C814
878F0C177F552BDC9BB30FEC9B98B413F0629F86E2A6B742B1E842D5A02976B0
AB740391B20163EEB3225514A76AC74C34163D2ACC0A869DE9837D710A56F1A2
149B53BEA91A5C184A5E49E1153A25EBEAC76FEC601CF4D10F65DAE3EDBA93A5
3472074E1C95F4A4B761F25B493F070730D8E2E582825E379F4A7EDE97DB40AD
CBCE6D67206C7D122147BEF946795C131C157285282CCA4F4E8429A6607AA72D
3E714BAFDE7ABDB99658198ADBC34A135ED91FE6504A1371463674793EB4F5D2
4B8734863351AE6AE7A5833A6A4EE0E75EF619C1262B4249BA9ACCEB8A0F5892
D5BFDC37A921D123FB2F06382136D30198450645C8AABF5A037944087CB2D5D2
60D28129A5DEC678DF42CD3B502C8190F3B63A3AB09D8ABD419797DA88848D48
A7E98A78F95DEC58D847DC65E9CB0E316CC682C841008292750A376D0398DA95
DF8AA168A0A641F6F4AE1AC91793F0254037EAC872D5998FCA842E6F8B916151
0B36B230EF3E93590FA686661BC23D486E538A3026182FA01997F71710C6D3AA
8517517BD961A143A594F2323043C65EE7E84BE6501F47A667304FCCA8483943
FEFD671409BBB2769C8ABD0E1D2A2DA4268B56124C0C42CCFD882CF1827DD0B9
79E7FF63108F44975B7A94588215878E6866C71C6FE5F3B6C93129CCBC9A3C3E
966D3F3B431634B78DBC70A308439D7E0ED44D117E1C942F56B51E615267D9FF
C196AFCD07D26BBFC6568B8E12707DBA8BC1F786DCCB62C844D769594E031390
BC67BD982A9F3BBF008B956BE5FCFD193FB5D5882F227F5E8F87819DB690A86D
89F1155E367016247518178B7CA02251728BEC101B9365941F774F8CB100B1AE
627E15C794F7177CD11ABECE337305BAED12DDCB3DEDC3C10835868AE42FE34B
E7B2574283C60679227412103C1F345C818E91830E7070AB916C85A94585F5E5
126EE16A3AC2457848214D967EDBB1901E7648EFE846E3165BA3B0D405E9DEBF
3A788B0B30F96DE8440B8B6C0A4A50043A59F3B636DFD7BE198EFDB35B331730
8967A00EADA8A54DD0385F35431292FF926171B0E25FC7EA594E01E0E7CEE1D3
F287736CDCCBE2C4599CFE10A6A87789BA984F105C5DAF347E85D1A6EAA623CA
9668E4B2DA0E2145BC70270201D5876BA691F65E7315F87A826B3A258926C04E
27A121D2D3EA73BAB53FFD35C67AC9C3B91DF9A4D753B055B6F1530D4C0E5E38
467F77261BED14BB65715C2D192FA4ABF53BD1A28704B84939C7E339BA3F42A6
EB83353DC405A46690131465B5D17B5035E3216BA57A981556981C6250ACBDC1
812004520E40365C88084EA9CE1E6099DAD342BD2F4918464470E352CD3E338A
74072C9B27775BD49C83E708C80D31BAEBDBA37CE4A7099844282972DDAB121A
040D3D7CC97870F448EAD0D71412F8FABE5A24DE1560CB949D746B5C3954B336
C6A17C42787F97BF93CD6E0DDE7BF69289579DE6BF5E56B2FAEE303A56DCBE13
825F41740DC013BD6E59CA2D7BA2800FCE8AE791EDC71A47F2AB39A8E296269C
90FFA27C5A51513DF558A8B499C7B61587852B5B970CC74AE8A08E28A3804934
FFA3EF4A169C53D0F58074C2F7CFD6306262CE03FB181CF1ED3A07BC07A23245
F40EB62410686BAD6E6AD0598415CC6F25EA20AAF76EC190BF2C39ED925CAC77
38D360D0757B7E968A4CE41B89961BBB7F30C807B959F9270F77DDBC2C87AACB
2B1E4EF9E1A8E8B0D52105FAB1898043C7BE92DE482C8FB5537B85222094CC28
A53CBD9FEEF60EFFA06545EFC162942911B3230B8D462CB201F2F2438217BA51
21CC668458620DB3D381D5677011B275F913649F77D74740BDDC09B2FAEBE1A7
FFB35B3D345C43C74E88A8A1E527B0E77BAE62868382DA7D2E148DFDB12EA7DA
E363C007C9D9AD64F8D4B95A329404758DB39457BA581E7207A071E11D3F168D
1CD68372B55B80B51EEB416941DF533537B33C794385AC2427B835CE2ED27DA4
A0F8B83154BBFE9F13E4F119193F62F08AB010CE72D2EAFC631BC4AFD0268786
19663C9B54C94499A1AF04E3C3F00E776079A79D9BFE1996455987B8D1E03261
159C7F50054928B9493CFB72DA0F5B5B70BE6A24C5E3561BDFF89136385827B7
980C2FE0ACB1C477F058F8460726FADC19D1339CAE67C84563320D69DA7CC991
77AD0A23CFB7F631E00CC979AD410F813119C3FE38855B546A526839B597386E
06C7529E95D407629EC92AE69081AAD188D821D2C11E77A5A17C118BA9C5900E
E7B16818AE5806B1E20BD3E1704E3DF82B1B5D1D8C538669557884852DAAEBBB
8006F05671D17E822A90B30AFD2849F0CA69E8433A8F3F5D67D9ACBAB99D31C6
C2E3774B790CB6222E10FD79EAC136C045EB3E2072714AF554CD4624A9A77900
40530160863E513A5503A807A73D809A4727F34720001768E148C48B263849F4
07F3AA6F845C5B2B6705541D9C1AB4126FEBDCEA477A40D70CAD533AE10E772A
FFC092B310E93D9FB81F7127DAB7906F49D2392BEBCAF12A4768C041A355C986
171849F81E3F4B888A7FB8B81915CFEB8AC95B751A179463707C5451D5820E43
1E25AF037AFAA42C8299DC0907CDFD9B6F6B85885D41A46CDBFCB3D5613381C9
E8339B606AB63B4E0B5A7AFB85939DD3ABD462B0F491A7CAC1AF4F2E921D2557
FBA4F2526D0272FD1B8220A2F5882788FEBDF78B312D14CF0756E993727ACB39
C8D5C70F0BD7C1AAE14543E542ABF55167FE8A2F947030413B8C42BDC2E33ABE
AC450D0BC08A430B643B6ED36DCAA09B41FEFDB90E10C8ACE0CCFACA0305B273
03AB8B016B22376C8C335B8BBA0E95869AF07A42EC29CEE0176DE0853DD365E9
B853E93647AD0303DB98DBC7FEA6FC0C4C86F21D98814DA3AC40CD40E837087F
E7179E9020062622DE064EC1424A36508345F7028F75BA990750461013B1D19A
1D63FD3E991DB6C16AB7FD7110CCEBF6F466633F2ABEAC7A7D0A1C32045473D7
CEE75B91B36DB3081871CDB3987169479C442B41A638E474A98F1EC24FFE4A5B
5B06C74BA977CBF9D3D426C9A15B8F75F819A88755E006B798A1373B91862184
36EC3DC87A4D3FB3D3EA12EE51A708C6EA3EE347B27770D225C2850EA487E561
E61A161ED1D578B1F16C6BB4279490402EBA1C517C4D39F288709F39BF447534
46E063443F5376EC13D4824C8F9AE2E675EF11E395BD5D489E509DF69555C9B7
126CB566741F359B651D485B940889D1E3F48E380A0C7E74EDB6C5C0F3CB6F24
33F8F6BF46DC2794D4A9A330C3E2E57C4477049B3933138149710C66785D661A
19C6090D596AF51562994954916346AC00D04FA385BD310C8124BA9C6E1C9DD9
63F1B33403111426C498D274ADC1D97A103530EFB969DD821155C7650F64F18D
7164BC597A28D5E06E1A1833C74A1F06890443B7C69F2BC1FA11191A29748742
05A7DDA96A4BF06AE0E639B048A38D0D6B9C0C7CE81C66030F183310A5811861
6703E6A2A1E2F8AD42029FFE31D7C09F9B714FDA7CCC5B2F312D9B93A6382CFA
066C7FE21B350011442FA140DB45A2E8BB824F2E0361942762C37315AC766F59
7CD63856FD9577D2BA1FD74B9AEDFD56DF1B5C1307F82ACD5BDDF48851E1F9DB
5B597C66A26B8A92A2287757F33D65E7E72867306978A2DC760E8895169607D5
7C09D0FBA90EC6B7B2C810A1A57F8C4E998ABFC56EB0DDBB5B50E7FC8203F851
BF811A2DD1EED2938477B895D479CAF48600C807DDC7F0A464955F47F8C667A5
B810B66551EF0C4778DDC9BB998F2B62418D77FF1ECCFD16DD4BFDC262ACA6C1
08FE37C686751550CC13B3B655298A6C2F65BF28E49CC76D66AFCB93C5437D39
01ED820ABC3A77CE9C1C55548E804DFD0E8CFD4D32D7318A15A237794F1DDAA3
51832649884AA218C82FECEDABCFF1783946E199E6F5CE226AF6A5559BF1C900
DB7E1F1A826B526C5D1BBE761C06DCDC6B72001378758042C53B719922ABD9E8
105439DAFBD221F7D0B5E74147E67D2DD8D41EA5EFB095154AAEA84B6B547077
91FEBD7BB980E1AA08B55F7550F58B278DD166A92F9130EB528803FA1E9BE1B4
8619F12AA4682DA7306C41216FC6BC6F51EAB6C222623AF193575AB6FC68DBB6
727D400344644D0C674F03B5271D773CC7D42CA4653E5215E436CFC0C898D4DB
39D248B6017EE32386CC009302429F4F3BFC4DA44B655ED14923DA47E4708A92
46A525F8910A8E97272D0FF05E44350907ACB2065D012D2DEBC4DDF89E9CA50A
205122CD0E470B812D18EA569EF5AC698FF76492A9EFE32F0FD9E69C8F4E9283
7DFC759994FC457901AA9E788F43A26E417CA2619718004C2526B70DA571A8A8
C2C57E58F83C85CC39E9D715ACEEFA264993D0592E47B28A45D6F516078C72A4
B155A2715B713EC35AA85DF402910C9019348D3DC98C095C782F79B396A22ADF
9365A76F64D7D5EB49B35CBA7981059C65967C51EABB2B6BCA81E275BC94ECEB
7B517E88F6126B8A392F9F685C37EE7475CE269618C727B596C3C119E92E2623
14C787B7E16817CD828E6DB40B86A47A27C033E27BAAC9E399D409FBD1E6B242
9DCC30846293BF3060E9CAE54A8CFDA94171E466E55C00DA09E33D4874B43A3D
1C2B965031C3640D188839D61DC331EFB2C7409D2653AF423E5AA07FF2786AD0
B68F19B6B21D565FC93CDA640D1971689C4711EC1DBACF7516BFF7F16095DC83
96A7E53145E785043DA55625132A3483E9AB47B7A985D0C30CC0BF8ABA9BCDA3
730FC8E05FC9E4815ACFE20F8F2C3FD14236FBA37D0E99953A690EE204503ADB
34A0F6F874E8BBC4CD87BAFA62239D7499726BB2F958D96193A28925A6BA3B7F
6119AE8FD72E288AB81F9CA207CD98961625CDADB1759A1A42782A51E5AB5062
3046D0925126349DE06E109BA4B67A1772CF5E2A898CC32E8A667B0C0760853C
1F9A3908BDCD2EFA7B4DDEE77B66101DA87FBB898D3FF95130582938551F1B74
8D0E32EFC302BDCA06CB91BA4BE3078D332E756599164D08BBCE233F30DF4A41
567FE81AF313E90021B03E9C368F98D177E08722DCE6A5762E28A9E0EA42AF5D
2A39744CD7A41622D892831E9B14673E82A53CC74A0A8FE98AD94A97AE692319
D973C2B10630F36BC6B0E6A6E5968328F428652D25D774772B61C6253947E724
B0DBFC3AA52DB1894E7F501FB2104466679AF4745537EDEEF52BB4BB4CF19FDA
95E412218EF55944CA1C712D28864696147CDE3867CFBA838B94452F3F00D5EB
09E8AFF8407DAABB0F71676AD222180C32F2ED5B645083351F7ACD3B1BA5BC3F
597530536E8789E56F98EC6773438DDBE65B9E3BA8769E0EB46ECB7EB778CD34
C9804EE8620991EF483E5E041B992FC5B88E4E3416B51E55AC937F61D836C0BB
1FA3A571D2E460AC6BBF7DD00D6C99C291DF49318B5BAE543C44C8958C7D3565
88D3D2CC767E174F9AF6A84608268870967701D127B7D1AF5A62F32A6F159A63
9E002A1A6BA2859AF711D51EC6EB8C98D5A409C54815441BF0BEB5FEFB35F561
17223B5106346EC0D1C990B56D603E8D09061E486AF75A8C1BCEA9D21057958E
0C0B8CB367331B05EFAD2795D667D3E495794B2EE28401ED51F500208127F1FC
35DB9C50823EC41D1A8EF2DCA399B9E5B2BEE3FA3541582667A78705A1743A82
2196D27869EE01D1950F5CF6B7B4D66EFEC22D7546404C7C1519C524D48B8A4B
08F7FFE92600D0BAE75E8908A29EBF05416B89B1AB81BB9FAB253172265DB18B
FCE83D10A60EF43EE3F7928DB31BC86F8E6C0267763E127D664373870058DF2F
CE726B133744D1FDAD21652FCCBA223F63BE1A5C2EA9F414736A50F23C3A137C
48A0DEEBDD02C44FE00A8CCE770409DDD05F116A6786AC17001040036F2E0E50
0DBB6F0659094DD22B38B62EA22FDDB7314CD3D518010D2C0A64FCE16E1FDD8B
A2F82A8A62897AD778A290CC1229D9BA0A6773C87B8F5EB41C91720B163C89C6
843B28CE7CE5513C4663F70BCB89A97A47C947B53EAC4283AAFEF32DAE8E9CC5
E96794DB672D6AC1CBAA97D1208B2670EF347A51D1311A2987E99143AA54A674
57B22DC09506780F82AAE805B26DF3EA73A6BB96D8C2EDE1429A052EE94549A7
6592812CC03BD138B0559D3E5887B7EA9C9C54F8335F55CC31D886FE054C378A
87CFE7506B1611F40A9387D591A27AA007D54F2A1B2C6B7B645FF02F7E3F51D6
E7D6825C1F99742EA6C6ACC3A4826D0AB04CA74D7B9A580F626C0073D8E8910A
8BBAF42AEE51FC132BA09B1D2ECB35CCE0F536D3BD33A15EADE18555546A218B
B904D310D1C2D8F7E05D6D5D57BE03A5721AE10E7805DCF438CF74E64D215200
714978E352F4D382D30F65E5A92C3A9A7F67BD0CF0CF846CE587DFFB49C92355
A2C675FAA15E66FE3701620D4DF8DBC79708100BCC8BC5C8294E49F4B99856BE
028D0F77B9485D1ED26C483E4835D2233E8AF3F613614970C30332F369988140
1E39ECD39E1A3566E8CA09AAE45E3E72C373CBD756F9F7F98F9F207B86365866
FE55C333254C3B5912441BBCCDA82A29730537FF273E6E24C05ECB4357790760
516F7490EB766249E4CA6CB1FB30D8CD5546AAD0F3DE7BD903B146959CF852DF
48A9D5CF56077FB18360116E00A35A7D07D572060AC8A208D554E144CA97B5EC
52C2D7279C95D26841F38C4B51CEE797528C0BC2B582A4ADDAC6412240B97755
F56DE8231AF4DADFE979887E5065AB1B445AAEFEDA751FCFE7DB7E9252118EB4
DC6E58FD89A1E34B66D19FB3BA53B6B849ACD3A58C5A584CBD3C65762DB7A84F
E2BA8B2BAD7C2F670BD9087F7531490409D02D5745BCC5D29F88AEE951C2452D
22AA967D32C3F37A94C07640098AADEBB6A8AE4DF924A93308654F1AEE0B9DE6
7FC38BB5ABDAB00E5722E22BCF382BF892C767894C0ED800CED66665A3E4D438
F8BDA315D1E8670BFFEEC8878295762A882FD6A3E2F6D6B367EAA7D2B13810A8
086EC51FFEC4FD57B0891FBA2E75BD5D5D17618A9ADDD89631B64AFBBC71BF31
0E83A90F29E6D56D9F0D120173EBCEB220391CC097A598D77FF64792D7F05677
906C9DADA47F13B6B4E693A1D158ED9866DC5BCACA8616749D786973D64DEE11
C94AB03CA10BBFF9240B8C62DFD250C58CA4C5C968742603F4FDB0B0B6D446B2
9F4A0504DC270D2F633C08A3EBDF22FEFA476B92D1B071F5430022686B5867D0
EA3446F4FA176517141B75FA51F69D54447CF4590D49978B1325CC654E70D7C8
1F03A2AD9E74B2D72FDA6D9B428EC87CBB3C562FFEF9B2331C9C0820082EC07D
F1491BE959F1418F547082D1750223115919DBE729661F2A720B37C4B2DCB7F7
A15864E73339C9C22CEF672E0AC6E2DE0E5F9094E55F65DD77E8263B96774196
02BE8D8CFF4DC312E6A454DCCDF83FF2BBC7B17EFC03789A7D0D3FCF1DD66A83
FDA1094245139346C89EE074451A2A25CF4B2769836EDC94CF18BBA0915AD56C
DDDA05B0C9274D38D73921F3A811A6C64C5B527ABF1AA2317CB21B3D4073AA4A
21E208510B16A23D9F12641FB67A0637F9E58752F5CEBDBCC73079BCB0785DAD
1A29169231710FAA59328B3659F559A5E547451191D88E33637B695F3BEFA23F
1D0E9D0D05DF4C44D23C067C14FA4CA4E4C907D4EC63F6431805A40EF8378845
10B1A8C7C8256346EE4A3F0349311B6AB1110FCF6163A409D01F64CAFFDB9832
7322342EEFC4AB610AAC8F27F0CB185D0671C2B6E437A527EE40BE9CDE2563A8
2FE55AE2E2D75C71CD31B0E280C1EA3C1E476CD166598C252FBF712D4F6AA94A
95A03C7412BE769AF6299BDD4F45B8572E9CE88C512E780E0780E8B6ABDBB695
80485E8452675146A5098CE5EBF065F610B00B5345E36D2B20F12147C5C8D5E3
99B411BFEB02EB183DCF26C950B0879B2D2FF4C8BEFB1D6362724B92D56BC4B1
5D651FA8B7205F78B285F727E0F2BCEF74AE265EF41110CB02E3B11928ACB1C9
3802BDE85EADD4C82A4E8C132C042E2F757664CDEC05289F6CAEF31D54E17997
F414ABCA46ECF689390D01332CC35666A9CDEF8AFD22C67D7C3AF716A0C6C3C7
2579592181DF37D70E38FC430F937EFDBDFD7BD4CADF2A85DAA438B37A6F0A42
2907277C8B701D81BF09DBE2929DF3EB6EC6436F1E5B4761FA8430E43AA279F0
FB3DE18403A6E9FF8767A3C6F9DFB52CACE234ADA984703D1DF07EF2E12C9802
AAB56426BFD7E71A8051DEEDF609047DB5AB1D11EF4A587E569A48CB4193904F
632190BED39B54D866320877A767FE000D8A3386EB19382524B661713294A95B
C93A85507348C08215013ED7518BA8993679CFF2A83F7C0050DC2F5DED04CEAD
7FC2F8C6A9B17C8909097119232B3876EA03A4AB8214ED1DF71F3991F38E8A01
1FDBCE922A16CB785948643D0597918E6714ACD5D2BB98B011650B2A5D8B881D
6854DA34AFC03E88BA830172D02040286BDA9D17A20F6DC3C0D95359648C2430
924E6AC90BC611F18FA7D4EAC0F9BBEFD22886B9AB684FBE46841D2C1DA85E1E
CB50200B0178EDFD78BD5AC554C7A94BFD3A91B3FFD4F252EC7052793D91641D
A70C352DCBD07B107337DCFC405FDE26EAB227F329A1770D38441A486C7B34AD
90BA1FA4C3229B268D44EEC698024006E446612825DAA2F91781C807A3596A06
9E98761EB09E52AA7A1A7C15EE053C66AEDE3AAA41C8B7D8328977A2F5D9D638
13A994A1F9E8FD54E8D96331F45CD6E6F5099188C9604E2F35B3EF9BEE08C93D
B33776256851D7C637B282BBF5DAB0182C67EE05B6C95C382CAAA2E1A4776772
6BD5568FEE2FC810F914909182D5E032AF808D30E08C4AF6C4536D1C9FDBEE7B
1B293617617A6DC6D266439974A234EFCD5B6E0E95558767039DF28A26C7D341
60D4022FCAD9DAA18077DED5083A14EB64ED9168357A5B6AB898B25FFC0ABEF4
3FC3D0E84BF70AC150E4622CB7BDB175B84F2AE6120EBDD79276935DB9DB36C4
90D81737976009F60811385EF294FE52C60BB152C0727DFE340139F3D874DE4D
10E363B15E239FBF409CC94D3224E75B5764B9DFAA97EA454B7FA5E00D1FDB28
4079E0C1BBE42D4E32397B42D6F3E389C5196BACE9B025B151E8D4F7D855C46A
3E387ACFB2E1E4314D08FBA93D36F1FCA9535232F705ADCCF63984F9BE9D28E0
35C8F2759203FE387D3BBD4F4B48E568D0E8F5DD1D4E59CA9C85C19FFF274B4E
1CA95D3A3AE903C604AEE5C726C3BF24A5CD2C92DDCC866983248CBEA5DD965F
4EB5C2B1D6281AD3B96EC77D43B57A578E629332F323A28A08F8A12C4E626169
1F75F9A9415D03C8D92BA72C28C2C148FF48843C665BCBDCAF4903835F153170
BAD72480247EE13CC0281220EA23B0C523895515658E6670B25E2595C8527239
DFCCEE4DBCBE8F6FE5C750A22A085457D328A97C303F0ACCC20F9EF9B7CB7F1D
174B2E94953F541C3B84D430D233E36EDE9D31F3DACB8628548FEFCBC7FC09F9
FDB1E28B19298052D228572ECF09F21E2FC87882E60FC07A31430790A04D4CB1
3B8870897B1F48C82345C456CEC4F6B01B027386D44171AE7FE42A64F8C5192E
BBCE945CCC2C1998B49238413B50008618C8CAFDE0C339A89A6247F6776FC19D
EAB466602C9456744938F5A2D67E1B8F73C2EE6D1D398BF1D9A160AC4041D5B1
D0F040506D266BE11CDF97C203691396C884A796914FA8CE329460799294A01D
EA20588B7659B384DBC8B83A81B980EC3B5767B5681E5AAC1B4C04A7F9BC621F
D2B6CF7CA49B2E0A644F6021DBB365B901CA2D6E3661E3177627C3BE5864B50C
4D5CC398F5EFB51C30575E44E3EAC4D7129CD473AC96DEE65118CBCDE2AB12B4
F62F1F7BC795293123303AF5580D60628E4ACF74F6BA45C4D1D28E26941BB2B9
B9AFCE666E4BBA77208054F5B39E94DD2EB9B620D0E500BCC453081BDD2614EE
AF5D4D455BD8FA27331440A9DCD502AFE96D522C80CED00F284BE3B7E94DE545
EB103EA7CC17FD859C806AE33E24E362952717E6EB0D3044986E5E72A6EF51D3
58AB3E13A2B576DA2D8AA305184D25A87AD26E8B777E24E2F1558501CFD6D930
7A05A51B024F9CE050DCD142F3FA8B503B2DD212E6FD14169DDCB069E3484707
65A3F4CEE17254762E720312BA04D7AAD47D97130AC9812266C690D9F5777656
9739CCE4897E4588DEB79EC3C1809CE07BF7D7FCC001DCA7494014AE0330ED22
E06D6894580A7183D140EADE1D4F6428B7C5AD4B04902E326010F0EEF56D234D
D715F33E5705E133EA6C10C51918B4CEEBDE00E54120EAC3F3FCF8964131987A
21B40CBDAF3AA052B1A1388F8E2C3B992E46FBA78B5069C20F52AED6BA819E88
75D37CD13405785A896B9882F5A628D6AE336D93D8718EEE77A73F46185E650B
2496DB9277D8935EE0BA01F74A6CD04E80FE3211503F85CA150FF81A77EEED7E
78A967BBD9770273A2399C3193A9DEA9AADC6E65A7AE2D048AF22BDD64C3746A
97988707EB49709C4023396555DA1A22700A876423D4CCD0044DB0314E2BE329
2B3ADB6B3D05680FDAA7574060E21B4615220B3599E6FB2E40632A0BE1B66DE5
FE0F8183ED63DE67E06903D1E073B231C13B60D1973234A6BF4B7BC018553DE4
53934506A8A1DC2E97B4D8BB44892A195C285E99B85C91603992A48CC627C969
9D7069D805B84426009490D0B5E3F97E2E9B8DD284BFAD6808754614972FD47C
D85E4C77D25AE31C4A75152D3CC50389377DCD71D68043D82818D33F7C0DFA03
B9B96DF72A4239D252DA622232F11E2124C95892F0039F52976CDDD7158A24F1
973AB87182C9D634BE33791B427FDE46B24F2C9D1146CA1CBFFBEEC6F73A0B04
476A0AB8B3F2D148CE419F60A6D877E53B31C980209FDDCE1ED2742D3A329D0F
BD626AE3FEB4F127D02D418659D6D45603569E553FFB0A092AA844CB445E1D66
0DA032465003A5310EAE4E86A85B7FED5CF9C398439B4257A9DE317474AB59EE
B9EF955D402CFD58B81CC38885E1D7415CB5557D17F2824A0FC3E85C33571545
007FB2D0557A88D3FF036B4AD6E51A61AC16DAD75E12B13A881EA8D9BCB2B87D
B9CED7527B9D612F00345E8D015B621B0D6D04666A6223D50B62A512E58D6EAA
C0DFB2335498A2473ABDFBE151C9859056A2B3C36A860EA9476DABB9C3CE27B2
D209EF9BA0CC7CCECFDC95AD9D0ADA76FD07B5626FA635A959A1225A27477258
EFF255F8E8158F161E6D9F49D57959688D0ECEC2DA26BCF2A5DF59BA871305DB
9D83347ADBF5D559D74D5DC87E3D00FE5BECFCD484F93523D491B2E56CF88621
3E7FCCFBC152E8DCE8D6E9F9B279FB8DE82F7ECC5BFF3AFA116EF731F4485311
D733331B80934EB1176FE4BAFF72222EE3AA62D9E8EAF64C5CF0866EA8171885
FA1D18EFFA4F8C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 60 /less put
dup 62 /greater put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9173633D9B50449E0
F9026E7A4CC1A3694D6C030E5AE53C0DAAF90B0046E22E14FF2787AC8194C42A
4B8846856AFE4CA20940A4E53896A851344E2E5538B9550721332077A972C793
89CE532A20FA4A52F80B5D7EE0FF0915523A98E98B71B8ABB4D7F35DA6C05364
A8B3D5DA9B1716C5C4D4402847C5A9BDA2F668709D51041BD566B7E1E675DCEC
1AF4BD172F05A73329FBB30BC7D1D7EC85FEAF5CF1ED6BE70F7526E115381BF2
47D955C5032404DA2FD82824C73F530E15E157EF023A2D9B50F4516A611B3F99
3803C6EFE49E08AE983B4D15CE6699B5111C0A45913DE61EAC437709143AF4ED
0D5136428AEEEF3776F9BA48212963150132D63DB4098AC124EE86C3AC7138AF
B90A504A1E15524BA2662D7E0FFD6377FF7CAA3B6113DAB8AF64837C4A99D99E
A499EC597828133A4C6421E0707E7E978C9B2A459620D0CB189775816D1421C1
87110675A765C25DC2FB607ECCD8C53F705B406932F41A9DFE08
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: URWPalladioL-Ital
%!PS-AdobeFont-1.0: URWPalladioL-Ital 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Italic) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -9.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Ital def
/PaintType 0 def
/WMode 0 def
/FontBBox {-170 -305 1010 941} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB5F973DECC54C8130ABE
C8E23C8067FC409DBA23A469DC7C6C4F7EEDC3DA588EE3C5B2829D3E1492978B
F91C30C1912183DB62BA489418A68C3BD44566603673FAFE6C3DD78FDFC1F6A0
840DFA44EAD8A5653DDF2FE86B8BDF672707D2AAC76CE376C2C9E56EB95F30CD
75B1E312BE777EAD75EFA21114335130DDC559ACC1A14454397984D624EEB43A
C7BD688E270025A34A912884DF387744462E4F666099415F25F86999B31B0588
576296579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FC
F88AA072958C75F616D971AFB3D9116E041EE7B66C39DA4481A97509DE7AC156
CB43C5A85501E66164E5FC61F9C64EE138CA0D9A0808BE0443CF3FBAD13C63EE
E7E39F1D385A453E8095DB2FF5914A611E11BBDDB04D6FC55D51B08358EF7253
9B8E1FE26561CD5CA9661C91D264B3810A37BE373BF66FCB021E4407375ECAF6
BEDC1561D701A5885F4216EC592958C80DB9B8365D66A8E075A88782C4BC6161
F6B5246F49B14E4E086FD10E01EDEA5D95A0F67D9F6D16C093CC98116B652B60
04B7FBD451E536399DE7A8D8B8E0740228524FA5CF81735BBC72B976F955FB3F
85B91278057DC1FA6B42FF84B9F267188631A0EB7B4456653620151073F4275C
9B80D71B4DA3EF23BA2811F90A844D2D4A18C2D3E7C75DC2351F250E946C49EE
1D67BA5377ABAE009B18599825EAA89BAB6B56BC1177B32B4863A004CC7448B0
27D9F6030ABABDDED61E95CF4D02EA9170BBCF04E982FB170EFF61B5F0A3E39A
E4596CB6B478F6EA85D464460C3E3C301813928D1A4140ED2931D06F55DA1B92
575627B7363A7B2F52C2EBCB003F3168ACEADBC274B460104B32A37A35E08E61
6B4C58ED4BC82DA01AE19F2AFD0CA670D4CD12464788C7AF3C22AAE6B2B67FBD
72227163E56D6B000CA09205E5DC3098C8AB945E47D05FAAC5784D1EB47CCBB4
23527AECE3904675A8257AB220BCE2F63DCE652FA38CDFCDBB8995B3486DD3E5
BBD096F39E2EACF05F39269A9DBE9A131A615BF357C65E46F471962CD4BCF8D0
FF4DA9D4AA971F02A87587DC7D4030E320C57A0DD5731F0E395F452D49935065
70FC63D8AD2EBFB6B8C0EFF6D4001081DE16433B664AD0FBCD335C4F7DAF9A7A
C45CBEF2F835DDD975EF68B4705E1C75F856D7C269CE9F6FA33793A8753A7F55
8D0C28196A0E97DA2C45937EA2BC85BFB6A704A0C274D99B8FCE9BF97A6AD1E7
D85A98CD8D71BA01CA74D342A75088082B63D9634CB7956956787431C5F75462
EEDBC507DD0FF2E971E3442C0A00DD938476920CF67869A9DDF5A29AAE443BE7
9704632DF95672602E1556207B8E2CF3F3ABEE6C0639283F42E7EFB30F910EAB
7E9A77A1671D330CAD1BCD5F7FBC20299D5C6FC1EDDFCE777B796C1876468FB1
13F2B977937E70B7214069A06007D9800D7D1EB275BC1AB6F8847D80E4BD4742
69F936D2A335EBE3AEF4F851D5C428C762599A0067E435D943305C1AF7D1036F
A5C7935303AD6D0DDE22CC3126DA2662EA1A884F4989C120FABD61EE17CCC5F1
1D52AE8CDC91703D3A1C188354695617AF56DDA1FBC56DBE822661975310567A
38E881907F483CFC9E1D0D4D02C5033728391BA228211C06AA1096232D7603A0
6ADE5123765837DE68CA029715A8A1D46C067DEFC27FDCB21066E217CC46FE08
016C3DC5161B74DE04DA7417CD8688C1B8088785EDD9C1DA4F9E9A3C57F31A1B
749B59B2A5C1CDE2B37C804F50577B6D1308DD9C414C5B609E8518074632F6BB
0639E2AA1DBBF34708FDB809230BE0D9707B7DCB885D6B04DF891FC807DDC7F0
A7852E3AF05887FD5142811C2572A1D4B9F9539CC6D9F1251FBE08FB8C4BD040
36C06AA4752B076F4D900C20F1477A18C5FA931ACAE31CE6B70C0C19FF70E8B7
DEAF2DEBB2EE0FD69336E7070E3EF345D6D1EDF0BEA2E6B46DF617EF49532845
7E8C003F22957AC237C68EF83E5901B9DF69318790CC766E7D53451C02C6F33F
D2E01A6D58C4D46476815F98C8B106FD26F95949B0ECFD4473683CE752445A56
F3C953E0080C2F6E3F38A2044B1C0EE6096E008AD67226A9ABBB491C413C0B0E
4BAD9A9260DD5D895AE3276AFDECB790793CA3F35FECCDBED653F730852B641E
72BC01C639A25CD305ADC928DA5182335875E90BB3CA6110F6D46D6259BD746B
DC1BA4A84F7B70846E33CE5F285F32FC4E551CFBEC40920F7EB24EC8037A8BCC
6C38EF3B8F2CC1354EB9EDC15EC6ECBB7011BCBE5D5C08C85264A5B585EA9362
A11AA9B3D13D06C96DDE3F4C9C56E6C9F1B23B7ABB3F13781C6F65C00591A0DC
2601FC4F93A4FFB282036F8CE4AC5F50D320F56C02B17A2A6F7BD94665B11F1D
1501F7C4FF2686F1BF27180E6F9B0098135C9F7A05F120B9638E9DC9E65F758F
0FC4FD790127BDA1A81A0D8E75880EF3D7798AFB3431A9C936BD3F229799F665
6F7BB8E67379FC4652ADF65179AACF768813DDF7E2AFA021A6B5EB84E7D08509
54AAFE86C0ADA4431436009135FFC380700782F7B3423A172FBE8AF397729222
F3B7FE28FA141151082AB1027A7FBBCA06E09D438052E27B75787AE81EA98B34
D8DAE8557F2029FE2439769D67DEBDC8AD8C861E90E5322D95E0AFD080DA0CD8
0D8DF7EBC89DBD03C02B591D9032CE29175A0E7D978742CEE7D5CE5A41AD7F4A
22368A6417B4E3AB988FFBBA9B64E0A2CD60D97715676BA67CD7BBF2244E1018
5F6D79C4D91D269C6E4A2F648519587E04D2F8464643A2D70200CD8668AFFE05
680316C380B52EA55549ADDE54055B8F3752C3BD610AF3497FCBB7C1220C5FE3
6799601CE72DF8F2762BBE01DCDD4B660B0241841E2F7BF40CAA5DE3A7304860
46421233E796CBA94DB00652C28C635379A0716AE840673236CD23775C4D3321
4EE977154927F97628D12A7706ADAF1B24FEA02222D4B0EE989B48B94474AA82
C773B6CE6C90F7420DB2B423364F9C248A2A6CE15DD351DFCA7FAFF1EA78D0D6
FD12743F6BC297629A45D638AF9C9E4B9A8A99F13E8E0E1A1C7666BA3374A10D
B34E373B20F89136385827B7980C2FE0ACB1C29BB969C1C36C72AA60D2759B3D
6FDBD9B88CC93C4CFECE680552827DA0314702BD0D2112BB8C77B745BC0E8E8F
AC3BB6924D1D2819A0D46C59B43C09A07637253FA4C55FEC2B062491590FF01E
F0F36E918D98CB3D0A55E4B99D27A83093738B60E3F89F806F12DC716765298D
BBC12087570F4CB1612BEFA1CB71BC1CFE7B4E92BBB0A7298CD32219A490BBEC
86A7F7814279A3E7C9E61D62CE0FCACB72E14C2FDB87A97F47425E2F3BE72E4B
676F7A211F72225DB3DB146BDB01C7E44F6CBF7316889A602D35C37EF36DEC95
AF26E9BB00C1B869C2FEB82AD03AF067FC6D600734F599392343B0B7464966DA
6D4D3C67A1F5D60F9D4C78148EDC1E60F2CC880FBCDAE2DFCF164BB944C5F227
B5BB965FF6A3B63AD62139733DB76F393B40E6A832BE2232C38E02E471759DE4
06C018F9EE020A5F6C02176DF5B3F190F10F9FCD090D1108CDBCE3878E032C86
3869E53D7A4F7893FDDEE3C61F3EBFDD15A822138A17ED158E4399444976F34F
301F29BA4C8D85C255A2E1DAEB153809B0AF19ED917C49C7460B2C1E8DA8866E
5269C7C144DDEC907CE0F426523EABE4F77143EBD6C7A46F7076CA4E4B0FF551
ABBA11FC9785DB9CD2CC8898F4F9B1032905B4783C306AEABADBB9D5FE2EC20F
F97B1FA63FE456F6ECE4D25E13A1FE5E1284DF66C1118DEDC6260465A657929D
AD4FA1EFD853F06A11B08927619023BF4100A37F8F188486B3F0391D2320340D
23336EE7DD39FE52747FFE5802597B7E6B04B22D9BA9B74F34C467095B7BD881
786E8EE7AD49877F9AB411AE5977A96A80E49C699562AD833665EC1F8C05E778
0292A4CA563E6403B454E1F43DC5C2A092953DC939BDA1080BD883DE8D9798D3
0A9EDE6936EA527F5BB60CF752B869142FE488F9EA5CFF30111D6400AC3CDD3A
C33B5BBE12FD99B3697F30F86EB2BAB90905A89319B12214C8EA1D6D89071360
7A2C117C07604B899D0465B24391B4E3A10523D0D3A10238FAF971633F0FE9A9
BEA239586D798871D0640D0ACC03CD2BD48F18EC823A5D4D68BD8FD9BC3A76BD
FC773C1957E23347C4C78D0C37042E759E6D6C8ACF2C6986A41EF5F57E135556
56242DE44BDA2BE65FD49474D98EFD768D55299B7EFB84F698B341180978E1A0
2EC362C667544098AE47E5F9E0807326E19049A066060746C0A627E366A2FD24
0E5FE5C96CCBAE9E2FF8B6226920324F65176B760B692E3896BCA6B351CD44D4
B1F6F9AD92CDAEAB2DAEE928681EF627A2A872FAE0CE6027B020024CB9816942
CA7DE2E61ED20ED212B6F70428C1F79C79684008A3967081448D5B0F13DCD5C4
480CE67782126EECCA0FD632E179C32F4125F9504CB5AB7B17AC7BE4DB159C92
19DF468593917C42C23BB1EEF903BC43E3903B28741FA1FA0733E563BC2B1284
C583938FB9F3E1004836798002FCDE140B6D1A8B03458F742E5D683939A9EF47
89F1350905881AD6417E215513F8A8224D0B6600BFE1D6D0CA544386D209958E
82E39C166F966891528C769D9E25F7D20104D4A69C2E05352428D4C5BDF53EC8
FA37A28699D9C0F3EE94AA32E3C58F8D7F803B5D25182407698138FFBB16C5A1
132F73A6E14E09CCB4A01444BCDA664730F3DB30CAF94F2975ADF1AC50E6BA5D
0936D3C38A17B87F28E6C6EE8891955243A4E578B12193F14ACB751329FCE2CF
0251EE1C68986D367DF1D674B9BEE9F6F7BE84FB353BAABA9FD7DD76D4850778
85A36B65D51067F23C18CB7B052793948D821060222C28A1E10F0307D037344A
CF320CACD12CA673846CFA63DD2B3A364E54C381532877108E125F334916729E
63E09C4B43713FE8FF341B0881B86126EF1613450ABE5D910398596391ED3335
E74B54272D75E4EE205D1A3D727C8B2E92C0A1800E4FEE7E5C815A19621A9BC5
B3B6820CE49022707C03B0945CBCAFC37DD287FA96E369F0366530C19C1008E3
63144F18651E39ECD39E1A3566E21EF9C6433A30B98C5233D2B5EEC1C70F6F28
FF389B32F97634D31618ED926015CF883D323F319D95D79BE99657D93625C5D2
D7209315F9E358DC4BEB66160A8FA01ED730633B6D5CBD885DC93B1C8C8E7926
F6D8AD95948B3B78C06F051212FE8E4E330C00161775A4F0F369AB0E3BC1FFD3
D1EF05061D80B5E3C87AC8A76D16591A345C16E2CDEE9BEE0507016F76514185
58D452E73137494E45E88443AFB83F96DECD5E0B32C5EA329CB342002539D5CB
20AE4159CCFE773D9A5EF6627DBC1F119BA6B72FC5ECA9A9EA6F16C25D5FA4DC
0811F3A3BAA3829E29BA1F7A28AA416C4C753AFBE1C007F9A3F3B95605A84670
0E91F93C7D53EA443BD6CC2497530428B169CD82F908DA0D615D0D57BDC327E4
399EB4FF70B8E21F7C700A13C7EB310DB76D2C71ACAAF2B8904675CBE88816EE
7D14F6BF4FD9F9F717E00F87C1FD2D8E67F7F4FCAAA6D739517A34E781152656
1FEF88A47E89A8FE7E5F4803FDFBD133FADAE090F48C5B1F7EACBF74CE64BF35
AFFF00497768FBB51C6C16AA6CF3441A03AD99788F25BF169304CD5F0AD1FDAF
194F7DCDE1520CDF36FBD5B33C2FEABA6279D9552411A25DE260C6A8DA4708C4
B42116BD4FC635D70EF6D30400F1C012BA2A4BEFEC0F2F4C6F76425730069395
CE5B0F5C12BF8E171A7DAE9F31B63134039082B3A438266922724056736B6176
586647DA337D5B038781A431AC2FD937893CBFCA36FC54FBA0D1955721AFC2F4
A26FBB46F90381AD18F5E684764A0FF3187BF6DD05A11BCD5F7FBC20299DD746
E0F6C7FACFA37825E6164ABB6F4FA4F2D087E6F867A18AE906095CE7E682B6A8
59D8D9F55ABA15BE379BE1C783D39CE1CA5EC9CD3B6C4623DFE3221F61DDCAF0
E017BFE3D16C8AC62FC9CC22B43C2299483D10CDED85C1F389CFB4F318811FAC
6764484364FBCEE6DA96A21E3A8E124C8819A2CC0690B1AAE543C7D9666FFB0C
CF47825E74F20C73232F176BCB1E0ABA16AEB9D8D350E064FC3B306B466C504A
074C385E35DD8FF0B881CFE0F9DC1B07C2B8A5D4D0AC8E4B6164DC77B9D58E16
B21FD2FBDD174F7FA49457659D5227CB280F9FD7B52C949A4B6A93FF5FA12E8F
140FB1B51D76600CD88432B70801EBE7718BFFFBF078C82AE5265F7C4AC60065
CDC1F2FC469E385B9A2D2A4E4A6A4DF6855F74C56383FD1B54CF4496F50A8AE8
CA8C2BE32605CC4B5FF77A0D68AABE3A561F9B19E9E4F465753B660A45764B92
A5E0313BE509548C05C86453A752FBF80C009DAC8810CA52E28E50AA8B62B3EC
EFB637D031569976D79A564037DED4979CD63DB4AB95DB543239242D93873224
54F472CB7CF0385C008ABD4629CC80BE2FD19271D613ADB1F05EBC677A616533
7CE1831A359725CD7C1EBD79F86CDECF08E3E3057BA29B3CF6F3EA43B34BED84
BF6F9CE30C38CC248592E155C0F5FA7859B9B2FE8226C328E2B1620F0E7E7256
048D55D68E27D9E4FAD3E25E0027BBE20065D79AE1FB42841F918580F3EA43D2
84AD3FFE57B723DD472A01FE93EA14C8ED5E9949CD49DD86CCB8C426DBF0E610
93F3FBD296A576EC3B622DA3DEAA4351CE837750BE4A783198354DC5C16AA511
B556E660B7C64FB7F6F040352A877F875BE5113B3CC5C384E1FFF899690967CE
7B6B5CCD4A00A4866D2F89FB374260E9C0D23175EF35BF4133E260320CB39E19
1970C0F0E81DBEF4EF38F67E16AC8F8976E9DD1178ED7A8ED2A9A049F8D53A5B
3A18CC1B963DFC1D7F5B9FABC9B989941219026906070FC251D0FC54A5030FAB
4B341BEDC1EADCE7ADE12F5706F644205E11D810C3394BB359F98A79F25C60A0
56533C31DF75579CD24CCB5A7CE967062F19345B9C29938F4116EBDE50A4756A
A163C01B3515A52556C0CC1156D48F6ACE8C966FB30EBB4A22AAD4E972035056
0CAD8A22B6EE0EE9D75EA112DA1C60FD628B806D89E77393703B7DFFEF8071B9
F1BE8FA48454B62A6A1F98CF444461DEC21B126F607D31F950B24B2C9042139D
5E7DD43BF1EE77FC488E0908556D21F5AA813B81FFF08BD037AD526F07E06932
0688672BCCCD7EA068860F1C5275ECDEE876786A58AE7C2F43D985874AB8A3F2
044DBD4B9246922ABB84231E6BF13AB85DCC12A3A8B9AD5994E179D728C0E1F8
5F85012157E885ECE99C5F2947375222A669316788FADC94A77124E291CB27BF
10E4EFC417FDB11D1796AAEF7187DEC15CC897C563DC4BDC3F482C8C373F0F0B
417B18667B975BF873F4BEA9022072655ECB4398570F1336E30CA4C05B1532C6
D15624A83CB86FC4DAB9F869820BBAF867A29A8186E7CF623A14EF467C870B10
AD4057DF396B2470522A8AB97B83426FAC81E5336F5F6D283E2A6C4884C57CEC
E0AB1CC156049E60651AE837C048D325073CFAC939FDF750317DE1FBEC467D08
973B6E0BDA85D5E118B83A29004D43E6AA583E880531430042F70D725EB5F1A1
B135B5E5097E60AFDF729A535E028081224B0BA4B135CC8709B34137EBE447A6
8F1A9E8D0A7ED722504F0ADD190335B8794C3100FD08A3A0E9BFC604916B4F4F
4626A30647A49AABC499A97CFF90F3A9B33F5E1FE9512F87AEE0411C9627D28F
185EA401BB1277EBFD7DC1D74BDEA77930F422822BB15D1BFC89A8565530B241
9148A456405A6BDEBB44025A835D94E3FE7A93DD1F17B83F1D7083FE2734B8FD
27B626BD3726DBB16EFD95A8A78B27ED20C2D7A33C1DCBD8AA217A5B8C18D2B1
20A0566AF29195C653FA085F712258B8A1B9AABCB2A1678AA23BD725DB1FAA0F
BC7511E663F2C7D77B4512DE23328DC3238D11C2E2B2D73430906C34FAC40779
F8FD021F77C2C3E2096C4DBE15B542B3138331B411637612CBB79A5BCE21BFA4
6CCFD6B4158BE06C768C73F03EDAE81FC2CE7BA777B592888D38EDE68FFB3EFE
8387014D4CE7F52144B2D4AA133851EC30082831A28816092B7900F952DBBB63
C0DA21C717E348E0BE63120324CB01D5B8CA978D6AC89C5D7D115D20015326BB
B45A5A17EE165EEA4D59F98C4B03FB77685A0AD426DC91479072EA41BF0A4769
85495B8E94E473052F20C5E417A6AFF31ED77875C2F4C648D291642429DD61FA
F86CC41BE0BCD66EC8AB6FB3AD6AC55575E66721F58FC39D634E3C63C7D2F9BE
76C4CAED815AF7DEF664098CF1A167444F35033EF5059299ABE075FBFF390738
673CDFF3EED771F71F87A8CA2FC7005A3D8D5D6E64F0C3C9377E8541489FB44E
198542B093900F05F22DD65388E04D1B5B2FA350FBD691DD733B708E1DDCB3DC
D897DAD67D8DD823096FB73148798F2DC5C97E84D644F4B693E52269A32FE003
3A8DB3FD79F75ED2208F2E90FC60916CAF61A15C78987F1FC8EAAAC52FF90028
9981316BC60E07B9A6F340CECF751C7732F29E2B36E8CFC932AF2DDA28D631C5
59BCFA4351CF1F2FFDC112185C677798333A695D5AB39E03683F765A6E35825C
99CB7AFE5A873340B50AEE34371B15EB7E10FE9F30998217113414AF854A8EC0
F2711377ABB95B53B0D8BD13107973003AFA7B299993FC62D404427C68FD57A9
AB0E3824AB96AB9C2B4A20D919B1E9F77B0F4A5ADA99BF8C69FC449D3348DCE6
5F76D6587A23836CF9DADF08DE5AE7FEC495D896D88CD7B5406BA7DF2FDFE6C2
BE1896208850A7D2EA88A34FFD754E798A3F1E5EB3B83956FB26031843292794
5006B5DD662802F9D88AA087A76C10368838B0558547471DB7D49FFE869D76FF
01EB23C54F6B0AD774E332E021F33CDA78D534355AFC284238921F153628DA7B
2C4D87E446C3F3F5F64FEBCA1310CDBC8432E9646D7EF8115DB7478E5F21E6F3
E34B3912D1B4E43B0C69138B1F3FF6B0EC398A25965B5C4712C2A3C01E7FDE5E
D24464620F7A695330AACB6D180D5B508D7D69A9DB7F2703B4BE0AC8518166C7
303E9D7710278622DD023D8E5C68B23B64780DF14911C576ABFC06B527B26E52
278F0DAEBA33844A8AFC99172FE691D7F2A0549CE2C1291F7D2217AB6D0ED040
1D501144D2BAD6C8CF1D70B9CAED8BE9AFC00FDB6AC9D95DF968EBE7ACAD5390
47DC6FDF01179347DBA9F2647BB4C64CA5455AABFA805A0643A2321C17FA9BAF
9E7D27C4026F8DC0E546617B65EF66A94B975C903F0A280743899DDFB6C219E4
F61012E44E7EE718BABB4A57ECC1A74E8F3F1F576725EDA5C171EDC495BA33AC
0AD48854AB10F20278612619B7AE3979AEC5A02CB88387253B52507F28E38A38
C78521E159BCF5091A267F327B8AF9331502076177440314918CE3CC6FEC14FE
55D3FE0CEF2BE105B98A0815A720EA5B70F76694AC1E3F16E91F208996FE6C52
89DBA7AE70956E1771FDB2C022023E03B79AE65967FDA9AC298EDDE7881FA3CA
FE0949DCE040250321E64359CDDFACF9C572BE97FBAB0696EABDBAF73EACFA7D
A49E1D49E24B960E011F2F8B42E4E4AA713B8264AF9140EEB859FEADA1D3BC6A
23FD05C8FC76D9F1E4462951B6A04DFCEB8AA97D89827CBFE577400FFF551B85
BB28DA1768BEF30093A66165A81422850F84691704BC0AA1CAFC12A3FF2C1085
94F469CFFBD67CE5464B38B870D22E1345E47D57E5763578E2883207CF9E247D
90A6BE1CD8AD86B0C2ED855C59632FFC2B41504E9B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Roma
%!PS-AdobeFont-1.0: URWPalladioL-Roma 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Roman) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Roman) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Roma def
/PaintType 0 def
/WMode 0 def
/FontBBox {-166 -283 1021 943} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB756B8E2BF5B37627E46
DAFD4A4F741A859BB5F7D7C77FC7AA96EE6AC93C06CA829B81FE31E32D59C6DE
B1BF3B6CCC5C3C9296DC86D01487F08AB668F656CDD88EB816AEDD1EFA47F014
FF598E78C978DF18F8F66057351BC96B48015AF2E09E3E318053E952E9AD4037
BFC7EEF9CBFD7BC35746565B7EFBF241639793AE357220843147FADB929FBD24
01C88A382F00BF79554D125C543455330002B0FE6D229830470C78541E78DAD5
3E7C1A619B91215AE025F81561441BFC9ADA446035B8EB9C3D69BA746AD0CCAA
049D1FE4D905DF3F48D22900E02A23FB23F6B571DDC8B2CF7008431C1EAD7F6B
D92A2C42CAED94F9714F44E3CE31FBAF23A064AA2A7F13D6E5378E28539F0009
323A0755E58BA7564A408B142C230672A423DA6A6E54ED162AFBF8FADFA75B0B
FC648D5DA6EC31251B62B9F619AD9460876EEFCB8F9D2369CA3055820306533F
3C1D47D5A2EF97619FC2C780BCD9540A820748369FFDAB9D52492F130C0AC3C8
E0C87377DA6C21F1DE429C15AA939877876F84605F6785B5ADEA97321BF29DEF
3692AF535EEFE801975F94645272142128A3FEC8B1BCEB6E57B83520B5C4DD69
36DB8CDEF6E49B8944CA31C59F8790CD3FED58F1182D9AC6DCB2D75B4881B430
C67DB769B4745EA54233CDFD5600BB2A96209A83FD04C13D4AA4AE27DED97D25
93F6FDA5F64711EC7A2899AC98BD8D8879A6A348265832994C3BAD80E1D12291
CB05924302B780443A76A09E1C27E8DCDCD87FFE3BE17DE0421A47733C2BD723
9C876942155834190F65598810AF8CAD9842F8A1E3BBD2AE3348BD8FC9189FE2
ED5643EC4D87148775121702EEB7639ACD80EF4F07542BBBC09F98F81FB91A1C
89C691BF38CE4239B11C1C0D9A6B864753E204C0BCCB093E139F9D6104FE0584
DF022C621F86E5BFE2E047FD560E8A89B3872C87F7811E9EBCA9CF182472841A
88E7C421E5CE69DAD123B88D4E6C0FD85C86C74435BFCAE28C2B5CAD57D91A9B
4473906D044085B5336B066C6D9CE994D2B333F470AD32D3BC28BA2D699B7AE6
2B689CD50CE2D458501EBCD2381F3430C3059EDCA22D9F15CA03CD18CB160E59
C0E960F79010DC1E9EC40BA6914F9FB7951CB4D5AAFAA135C17D5D64CD848A32
C71A5C856CC9C94F24B6C9AF854B83771678C0B0B4C6A4D9C05ADE69E5C04697
8751F11D2AD3F78D45115A0F0D564DABAC8AEC177C91C2946D5B9FD8DECF1E26
FAE568E3CEE9DF3897D4256F3134B7F3A134993536AB81B2E45EF42240778A79
4A4F10E1AAF04B24CEFDB78D3C62F09DB1789801729BCF2F196EBD7415B504C1
EB30A98240A5DBBAD1FAD5AFA9BD1B7B08ED66886B8E0315F5236BE48B537F6D
DE0C535B2292EDACB514713586695C0797C7900E8E6AC46A6B3720F5DC38E426
811BE86A560B49BA721CD63D785754C664DCCEF78097CE5680EC25D9BFDA43B3
99611D5CE7BEA436FDAF8EDFC92BA4E94A336717062CD846ABB75134D45257B1
6AB5D967B9E25C7CFA39B88A23FAE7826559F9F468E6C87F3B6D90DCC6933893
5AABF0DF9B431F70B6C431AF283A075F482E56485E749D9FC1FA6F5AB1D724A9
FA3C784203B38F173388DA03C5C83BE1137FB6294E5747AF7A96E75454B2E67D
3841B9FD401A469962DF6BE268D3CEC78F0CDBFD3CE2F571E3F3C9C616260C0C
C2F30246CB9BDA79566A7A8DAACFE2D941872FF3D569EA127EFFAE4961E1E8E1
7902A5728F9AEFC3DB3E81B5EB263B9677424DD41D9F3FFACA55A9F6FBD5A279
8FF873B61D70DD8B29BE4870FBCDF58BAD19C9CFA9D528D104702E4B8A56D9FE
5CCAD91738167051920AC09B4478300651F33AC53A51C4843802081696785BF1
5D76F54578655EBFD46D9557B93C7270D113DDA77D46B69C49C3533F495615CC
47672C970844D8AC77865702779FF2EAFD2FB21503D2FBE78C1B07A8E09A3BFE
3EB5A5B70834CD6445432B6CF2B9B44D86E9340F8A6154CC00ABBB389E266EB0
35CC39C828E042FC059A2C0FC15DA8D6CDAF240C096EA124FDA5B87D97FEE3A1
70D269ACB51ED58C422A119E8C6BB471DF05580FB2BC843D93014DB57AA6F81A
27199E7B6A8E30F001B39401D74D2C05A17DCD8BED5A8ADC08494E5BA8B57CE5
22758E015013D121FE71C19584777E6CA510A921B50D54CB5BAEEC690CF237B5
C9AA6C81744861352351811FFCFA64EB110B540C82CE4A83C0A4567FE859EBDF
E76767AA267A757DADBB5CFE8349C55F794B95622CF9876B3F9D917B293DDCAE
E45B171F5125E4C1B5EF7BF5BA3000C9F67679D26D08019521E472CCDAE5AE38
41DBEB4B4B37C5C1538E75C144D7ADBA18820FFFF17F9B781190659588E9170E
71E38419BE40C23AF5E0D05AB9C11C290EF9B8E5AEA2B840DFB40191270EE3BC
4A9098D9EC60165DE651EC614F6696E844A143C6310FD5024713C156CD7CDB87
8A40A09502B396867C92948AFB0F2BABD93922C7DB78C54E81C2E4C11086C358
2B925A1CE2ED8AC7DF3E7562A5B1264DB872989F8668A46889B0D2DAC7CE9E40
D84F17B6ACCD87432CA90AA769A4E94594F9B3831E4DF7FF4491C8A2662429F4
5A55EA03A132AAA54B5AC1B745CA3E8A11FAF96133F2749C5ABEBF4605EAF9BC
3D8611E3607832D68CE6DD8B073B786001E3C02EC29969AF637E04D9340A24B8
5C99A5E98B5C458F88AA854D2F15F7AD81CFAE347F0642DDA30F1997653E0DDA
51C90CB9815BE5C89D161E9729DDD097218C48E4FD8F1183360FA32CADB8A078
28702857EDDDC1030D19928F2E260434DD476BF6EAAD2163B2871DDB76497570
C90861F3ECFFAFCAA4F671E3A60CBB746D364C09DED261E3097608FF39B66B4D
DCE39F3E590823590CD7C75BBE8B58E98DBC623D906EC7632CB075B9D013C926
6B223C04E2F8512BB3B7862EAE8E10393D1987095FCA5160EB06843ECBE178EE
B5B0C659BA219BA4F370699C8678DF2C1CD691B783529D3C858D5F431F6D34ED
B76D653A987069E8F87271EBD508D02DF0D47145BF586978A89E7D93540E890C
37971E766FCFF7D74C648A9DBDB56133FCDECEBC47C3061DF4C70CEB5C3F6251
F58BB7810ADC6A87A8ECF7BC89E2A66A0139EDB6BC86825A05C2AD0153759083
DBE7DA9B89D877992A8DC821F4F2ACF0679C37303CF8BA999FF36F22473C8A13
323F5A6FE4449C3D239D0822F16C4018E6B622443A1BE0D84713B15C80A2764E
BBD622778943218112CD8536336C3A1DCCF42389A260FB4BDF2F5BBADBD74608
0A808A125A27BAF0BFB58CB89C444F4564C1ECBC4CA16FCEEB4DEDF80BA158F6
5C546E9ABE7B6415B64E284652F06020F0CBA556F3804ACAA98571E34DDEAC3D
A129B2195F29379C4B88C50DF01F591763F16FE1D7E0663AAFD236FDD824E7C7
1AD69173FAE067B8FC15127922B29CC828ADD9B2582CF6C3178700E56D15B503
4B7E3BC175C3A3BB199137C3DCBAF784D79C2F0B49C70D16F721EE8768AF0C5A
6E66411D4612096420AAB4EFDEFB50A99A531B7F830ED73422F76CE50167AB14
D45FB1BDCB0EE4A8E1C6763117EED34F871C1B8662CE8C989CC922052C9196A1
C884FA0A2A98C9B53AFA62F8BBA320A942EDBB45A07A97A220217A257C722536
90D2634811AB5143E498FC491906217FFC05015EBB8C18BE053CEE561076BF06
2F476691EDAA1327729BAD7469C7629574F2389A8A9D172FEB292DEA295EB1DD
447832B4E1DBA7870A949E48C9DA6B47B06FE3E17CA208450468258082D64000
21C593C24753B4086687E740D8095E63F70CAAEF65D1CDE3764708664DB9AA61
286FBBAA4725D61B2219C8A70FE4E0DD73D336E5B30DAE5613226F5D87B84ECF
25517852132D18E294C60017FB7A494737C7417C9E663A22F1A25B3421F4ABFC
D3EAF636CA90D32B2C49F34104ED1ED365E74A8398D2605EF372CB9CFAF7DA3C
CA8B400E50AF8D1DF6713B37FEE276CE5A4E60E89BE9D9400388E360E517EC99
518CD3AF9D393C682B7C0A38DE5434D8AD6AB2A240C889CF56884297791B1E71
07B86680536CA273276B94C8B6A6C55FC6A90FB7782D537F1EB25D7932F02738
9432908750CCE50DC42F8E2E84BCA0C3FC458907C29FDBF5FE85AE8FB0FACEC8
77C7F6EF40AFB55E0E9FA83A47EBDDE9278C68DE7987BB55D05C4D40436E36EF
8FDB117303FE1FCCCA6BC89C2B640350DA641882E8CF028D94F238587C80FD85
5F1733F50F636A4C7426584812D07F31D1B41083C4EF1A12393A13991EBE5777
AFDE9C705280C8337FA283BB4340DDEBC4D256E13F78F4210C400517411ED880
613336943D822F2E133A03DB01D639B928EFDA00F21BDC87DD2D8DE1BBD7947B
7684555C20E21D6D22B965F0AC5D56AF4491B6C4DB377E18E683456344FA4E9D
98849E6AB20FAEFA93C3F0A6E5FF37CE6941F05ABB349E75AAE8B306CEE64EC4
905B3E1EDFBF1CF95ECE64E3EAF3F47EA8666A75B1C69B0244CABABB452DF2EC
C9744C9C500556EF9EB6764B4F844103D5EF00037A745839F67ACAA2ABEAF090
A939881401BAE7ABC7BDB8E2830239F397B1662BD176230EE1323CEC51FE87B3
1B6B7BB613ED01CA4D65F79C7CE47DAEE09383F5A9962D953AF02C2FD19225D2
5382E07A03321E6499E907FE5C491EDD336C6F661DD25A5D56725C77311558D8
7B8FFA4821791D5EAB7F25592E2E45B8C16F899981B9FC346A50372C582171A4
AF21CEED3C3DC4B9F4B348416F609C27A9147FA843862574D48B8B64014918EA
545CF34C15E337E74DD4026EA56FA92178834CCAE59020ACEF7E850602B6815E
BC707775BBFF65ECB7087FCC114991E6FE5E557AEB99D535E6F0C83089B39ABF
0149C8E8CF631C2CFDE82ECDE6A070411208FBC39BAFC6125EE247D95BAD5D9A
CE50EFA6D3F521A759EA5746FFE9FE9B8D473DCBFDA8573A5A86560C8C76A413
FECD2CAC2983ED949C8942A5EA8F5E5D25D73A3C33B647F2A61C46F93E52ADEE
4F56A388398B936D295A9D875A4D4247308CBC6E62D007FB2572F79F58391E15
3BD441A1A7ED762BBD60DC77C2ABA0AD3D7D1DCAD256D491657791E8EDCD3818
E55CEBCBC25A56A00A649F0FBB3B1F800629CE87E12017E80576CBB853D7367A
C31AA6B4FDFDD526FD72398DAB92AFAEE003F743971EFBF65DDFC8EE1E672767
CAA9102740E2F5828E37C5E4B531472085D600C435D52440AE8A92B53EF63AB9
E4BBBA1457A7B9AB98F58C581783BB9D29E08772D7252FAFA673968722570649
B9603DC2B59108094C406EB457743043EBEA32B09D801DF2D2FC8B6C4CACD47A
917B8CD1827922BF5BB093302E13C841DDE80B196F6617BAE9F33AC5E0DF808A
05E040482FBEAD4031D9AB6265FB6BB647FD9FD95E0A2282A059EFD7C89DD3F0
B328490C546A2BD7B5C158C668C7C0B3B76491EFB210B2AD7503D23492E7E980
B2C432411B9300E4D8EC13C0B542DB50991CB26D44DFA0957976BCCEC64F1C0C
61A3CA481CE5D74B8D57712E5A885FFD9C95A33686869493FF0CDB137CB5DA58
80C54905ABB84FEF397E66B5A87C5E297B9D70710F1A72D8C33185B31E0A2D8C
8272237FE1ED4B44EB22E96CC5D185F48FF21C8C4F4CD1931F0531799091E333
46B8D187E6ABA8C367CBA576C1AAB84E08857D835DC38388AF387156370294B4
E3A10523D0D3A10238FAF971633F0FE9A9BEA23A0E1CA012094938952793C03F
6195A204957D175AD09D6CACC4AD0D67B9DAB26FB40C1E8AF8B7FED6DE9131EE
9BAC9F5398B1DB515AE0FFC497E707AC2BD2E5BA6E9CDD81C3B37BA881C65A4B
0F4F6CF4BA89D65C741CC7A18CC3178F5C2EEEE858E17F6BAC74BB40893968C8
31AA8FA5BED3F3CDD74AFC3C45EA04EBA5D41504890B6EADFC224228CD424F3E
BFA4D92D2D8A6E28FEB3B0BAFEBFF067FB2E492AFCBEF4C8E9DF3FA6967F6F5C
9216D1F6D46D483052AA8A07127BE1AA470FD597026203305BBA959466569E02
8B84A130FDF9F479B027C38B1EA00128B2C5D7A5863D8A585176D02DD3D27736
36A15FB82CE00396082C372068E043BAFA2CCBCA4E5DEEDDEB3033066AF935F2
2D4E33B72BD8ED28F89BEE5641FD7860FCE9F0C7A2E363FF18AF80DBBEBCEF62
537DA14915258824D89C6EEA10C064F95504C55B7F08A64B52537B2F39259ADF
E44DDD26568CF2C21EE1C72543FB720C958ED8DA31BAEEBE73C7C9AD89D4A31B
941458FB8423073E8F5FF91804EAFF4D80CBF3FD0D644B6387660A5E554ED365
E2B6AB850BC56E17CCDC93407E0D9DF981CE32C90AA80E47A7CCE732657075F2
FF0F8F376ABC33E3FC59C9C06C4AABB42FA023E23DB48AD57953F98A21D5E6A0
EDDC7271221D82F2A6D54DC182963533153384ACC3671295FE986D10011E5FA0
0D8EE56CB57A6A0539EC7B416FA90A25423BACEAF7E03E2828FE2B8A9CBEC403
D717E0FC37106B2ADB50D18CB17EB1AB86CC5C31F2B0A8BE744B66F29147122C
69FD1FE8C0A55CEDAD517840057B3C8854C4893EDE1D0FDBF0986E99374770DF
61A3F7ACA769BE3AC0431ED7646520C8AF7DC481A6F784394A4AE6B550CABBCA
69BBD017E044A93BB7C01B7F5584F73A19582F3B652A3E28B417EB5C1B3B2BE2
48F7A26A8DA9230830FD61C3FF0072F9873E2E4E58AC6BD1DAAAF6F3F728530A
FA78C7D53046C21351D73B778E8B2162AA0B96C300CCA1E9284AE9FD52E2C40C
57910450003752999D8EC0A2B4B9F4B5F0F07653EC659925CF40CF69D0263BB0
11426EFDE91C240CE9368144552EB3F8A0EE2B513337F71ADA870C73647C187B
FD9BAFDDF89A2AB03992BDE600EBA94FACCADC529A2B37845C5D2CDDF8C77C03
B99FE8EEA2481B54F2515022A01F2DA8A5556CF8B76592B268F51A1B4A554F38
6240424421222D4C58876F9822464D57FE0C8BBF2021EE9423509ED0BE54DCCC
08131996F20024B8707388735E9C7A100A4DC55F813B807D1317F8BA1F7F7B2E
37CD3A9E3FA558740B56D88F2DB4AAA1CE4D5B9550EC46A4E7754D3BB9426489
274B3D2F638389A497EF12A8FB2D6E611E39ECD39E1A3566E5A3C7A209590CE5
9CFD890840110134E4791E858AE1599B2F5BDD2898C9F5D610889C9F179DC519
1622093845DE460E6B67E30CCC2B28986895A608F8BF79CF23DB435ECA65C7EE
A18B0230BC8383BDD7E971A5E53908873D45745B462F95274690AE6153A1E447
BC482171E07F276402FDBBB14FB072C5BEBB7F15A8674A3B307BA555D6F0712A
D8FABB7C9B4FFBBFCD707F581FF7640D483DF8C0E68B87F5231A3ADDD517017E
A8925EDFB414334D8D10435C679681AD831A51C7D52D247CD39736C35BC4EA5D
D5633B29295C4AC570013549B7928DE5BA461F5AF6329608F234430BAA23AB01
3697BE1F986DA0FBEB5F020C85B2F0E8FFBEB84FF65D8ADDDC0995B117009E9E
A4FDD8CC80A8CA7C0098265EDD8DCFAA7F25EC0DDF6B8AF6C2193BCCD6BBCD79
2189A12FC9366BA7134EFD67A22B492AF4C46498936D5E3FD931E5E03D491056
7FB7EF2CE34DAFA927FC6E077DC85C01A5EF4EA9FD20CE0FA2FCB3E2C2581B35
BA7E1B6B3DEDD1321936B04DBAD95818B0A7895F1B317E75E5E54D0FEB31A7A0
7AA201C7E71AB5F82968376FE7063FFFFEB8C51B57F75ECFE7238BDE6EC48C9C
A8A382972E086F827FF93742EB700043207D07C4DDAE9AE9D984422D42820082
3D674B1893F033848A138D24227D048596734F0904DFD15F39F1CE1D4C8F870A
C5F00FCEA5E0518CD95BA03C76B92004AD4F7523C83EE00D40331C00CEB19548
D2BD074A0198BE661AD52A63710ECC7F758E9D9B169719D633875594945A1B25
C08BCDB45C0778BCA0D4626E6B4E8B4DFD0C9ECEC3C0D051149946F6A33961F8
6D1C6ED3C45894696741DF5E02C57DADD6FCDD4F828880F44956914886DB0173
609CE9F1CA85A7DA6C2858A111F0C098177992A7BE51074E91D273704D5EB2E7
6E6F8B190485F871875E956600DB7D9B4A082D626C2EC7529F8461A1554A4608
FE944596FB158B12F56A9D3FC1A5A59B33D528551076D8A3DBBE13473FB41261
92FE50C7286EAE1E5CFE99B5A0257F0D8D2AB450C37779B74A31E9E806F47E65
70BCB441E9B74CE8BCDF7F6963CAE2C57548E018AC430349C876A3106BB8ACD4
903E23217131544D9B05B28B1CDCBB67DCB9DC94301EA34CB826AA4435AC6001
C400EBE464150C87BDDD01EB0EE2CE6A5D7AD4D88D93C0C828C7B0F552C6B0F9
EE73C92240A039AC182A98736A2FAD80D4F90A61D26A7A70D59AB73CA6CF0E9C
A318BAB7EC54AE81A12CFC89E81CCBB53669CC02D3BD38073760581F6B380C9F
E943EA96423EF1867C6384E14CD6F6C36F2A324D3349D1A88A9A53380228AD3D
2014068AC67D7ADA647B81A0F121AED21AC707201524450B877F2B928F632F14
019419AAA2F4F9D76A64F4C44BCFBC8F0404303A1AD02AA967596FD927659C99
3D52CA9E066AEE285C6182742D755AED33A959FB8DC8DB75419469AC0EB546E1
71EE83FFE8311D2E0315E7E13A01911EDA99912980707299900A98FB1FF2AE5E
3EAB8D995D23B37339D9A0152EF4B01165E4C87570C43611FF7B6FFDBB1D9BC0
3898CA7D2E58592D935E41B5955D9846FC697ECACDF43FA36136A00E0C7303A2
F60A43946EB4E2B79B5F7D70640CD8E9E7F67C13EC4AD400A8A75C95840BAB3F
E1AD9AF94EDED4EE9AAA436D4CF958C5897D06B7C97CD817B3E304689E30FF31
BFC9CB72B146DB01C7CBB03E94CF0E77EFE6ECBDDC2723FBEB9BE81630C673E4
105C1223BE083C4E690237CB8D25D9E8974A808CA55C5DD4A52A060D9487D50D
3DB445141720CB524B6D481FF9A3F562DF10AC0BED49F055C3AAFA37C201A9A2
712DAC7DECFCAFE7D585F672B2656F184B469264F16AD68DAB44B4583B886FD7
D80389A6F3EF79FEADB46039CFF4A9252D12A0D06B1B142C8E19145C63DDD15A
EB18EA48F547D1BF449EB6842EE4F3F5C890C95E2C5EA4228DA24A94D67F8241
D5F59F1112D751B978CB0A1275C8564FB50CF253828087CFDE373856801B1F01
701F9091B1DAF954C27C3481A9693A7F857663749710BF42C8B9C9A48A5254BD
7D6C12A813447FE63BF4D510C4E77065CFA907E1A750173E70731DFEC57AF955
39FD703058C9440ECD8ECCCA5042672B00A179DD0A44687FEB08D85427FAF0DB
6F26FFFB8F58BD8BD456CE04ECFD4FEB93F67D422C578C15DD1452557C77917C
0DB16338AF375DBC655C635F9122E567E81E3594AC3AF57767B99DF8AFBD4013
CDAF60690FD59C3B75CC4A87427BFBBF6C2FE5CE7D28E72B129E145225809D86
D3B212E460AC7D1696DD21B3FF945D81371B98CFCCB2982757ECE384BF525EC3
6A20CC188748FC0B8915AADE0E49476E3B67978943BE107ADC37D941B95C59A4
DE1DD56F2F5AA26A32E7A32FB13090CD64D31CA39D261917C8EA36FBE31AD10D
07E074D11A0A72AE0284A0353C6086F0C4A2980F3F9412EF4BB6866C5D743910
76320B3706E7696D31CD8CFB7A068AEDF0FFEB7DD80B2AF0AD023ECB8F8B6686
EFB4A69442D6D369010199BFFB005CEB91549BF7A689B413FC97CC45EED4C581
6A8AC0C457A8311792FA54B055F958209C274187267D943E0255DDDD602045E7
C2291505D2A681CDD572DBC3D3063E200111231812F901FEF0A1D480457FEAAA
24076E15F4DFEEF6C3325E99CFCAD47BDAC52F2AB2D675C12ABC4F8174BB54C7
F8A1BFAEA8DD44012D9D5B99DDB20E5182A1215A84FB19B1908DB5EA7DFB5CE2
024B31F85CCFDB337B1B19DB6C5BF98E83DA93D0DEE850F775EB1D20FBA08D6B
0F0261809E2D873151034892D95DB9B45BFA74F9B6DF2D953022A25D02C5E69A
1A42782A51E5AB5F5EC3104A8E7745B78B6C62D91527F34AB7698911F16F5D28
11E39DB9556E7C94AC8EED350464AF01944BA2D55BE7D37AE79B2D5D34B01527
D36FCA0F6E82B6A599A3A94B33FE9A8A9A82D2A9F8AB4E99F02067E85A9C7A25
9075352D8EFFE7CE5A44C94C7CC0383BC69759632D09284518802BCCB7F70B7C
A077F7B79DD3BE8EFF62C219F836B359600521E5F633571ED5D2351C1D18DDDB
316E4DF5C5AC6B7F8A9CA178F6CC723A67C95DC54837E5D64DF4AA9A40BE48A9
180E9DD0EAB50A7CDC9BA8E06308DAF64C75731E667AC6D49F1AAEFA49BA684D
B1BD973A7DD95352BF15C2A78946D2D1F24F412C71012E0E4330EC92D56EC105
6E4450D720127694AC48BDC56D1C1FABA6715DCD35AAC5CB7A5F1AD1F4EB987A
8E3759D97376307AE6F59BF8C1DBA3104F65C52D3FF8B8CB9285A05C0BAA00A0
9460FE94738848E9E7D5822804D985CB255BEF5AA1809F635A3BFC0B2C1B3B39
B8A8A6C0BA11AFB2534712BD503E09DD68080B6E3DD4AF5160CEE0EE29CF349E
29A07E6CB1E1A05A20F1CEE66876640FFE2BBA2D676E58443756828452816582
775A8941D32C44AB49C13CD823836C941A80F6C614865B4BE47ABEB28963109B
C1F128DE46B5A4EEA61949A873779B1EC4B7570746196EAAF7990882F149552A
CBF1101C0CC34540AFE1427DA972E2C284B9F6E0CAD92C3E68A715763FC442E8
A49B4BA267BD076682DDBC8118D9EF07FC3A6FCA11001523FE97FBAC2679BFDF
3654981CAADA75574B2BDED2507AD6B002B45B933534C0B4C51DDC50BE37BB6E
42B8FADAEAF2B4D90FFB8BE2F427D339D1EEBAAD58B0946C6FDEF59E1ADD00FC
43BADA9AE6891B755D8BC35C7F5A2C3F07D48817C5E2C69174395C9FAA22504E
4A4F014CE4090965F140E43A7EA149580132082317DD4A19E976C1B584666F2A
639E1FD66B020C2CBC5CF51F32E0F85CFCDB94B102666269B3512888E10CC9A4
53019DF489FBF95E8D933FB596832AA18D730A55B80EA224ABA4D376DF7BEC7C
C51890A13715B7B5CCB828EB08D9A9538E1F48CB82049C0DDDD9855A3BF9605C
9750D5E8D0EE2F7070F711DB479D1D680FFB5EC0D12C6ECB60F72D16E6767044
90B029E6EB33202B1B539C5AECCF93BCCF128F345E04A5AC3798AB415E6CB601
4A911751975AC7A57F25C622C470F6E70DBE10E747E1984A1C41D701E6220B00
1C5E119AD0BCEB50B7E52DEBB660712732996F9572E448E1F7A70A7F40E63505
94AF318C9157FB09C1BE6A726FDBEFFACC763141BB17A96BCFC81274142D452C
210D280DF047F7245D182B5C65AC04D5E62FAFECFE7C1FD1BE9D39527E37856C
4D35E27563D8F6EA7CCC0E74977CCF2EAB57654C3C9EDB461249DD27D55A3459
FF867D151559DA21E727EFDB1CA6A63F460F5B31AACF1C19C21C3DA9021CDEFC
D8F5E62795B990DB5F017A12825C0D6426BE5369D3AB338DB33054BFC4D1579D
20F5D78DA7FA7510D993FCFBEBC586BCB872E666A060E4D9241802B72B1B162C
9C04AE30EB43430F3898F09FCAC9F334426B3812D029AC7265E93F600D76FE5F
B7667A6C08D7004D0DF07ED6CB7D3DDEE35065C082B37FF060B6DB75AF203911
74ABB5325CD9EDFD49E8901092FF6B232F3CE2B321CD7404BC18F1E2B1F7F9C1
847B25F0EC755F19861074F88B8406776F93F69C855F726C19246C2049BF5338
EE934EE165A56C8F43140871BC528641F4F162138539AA45B398E71A13607B8D
F12AABB2F4CCCFD8A87EC7D1C157E52D984CC099AE441600E6BF37693F7C1360
DD9CDD86D3864A177B0724F860C76601359426E7A7D188067BCAB08669ACA577
1BDD5AB3A19482D69422D24EB4A4AF5A7A5D4EABB2794D20E516EFD47AAF5F4F
C227188F0A3F311E390B2BB6E073B241295747F4B23DC40386FD630F1CF74471
EAA474C6BFA593D9D8515C6ACAA51EE95F0444DAFCD55BBDBEEC2355065FAFFE
E86C8BA72ED4E316797F8B2CDBA530E9795CBE691C141A143280C65FB351FEEB
F34DE46C25EC04EB599FADF1FB85E56461FA37826099E9556526F5E5F2205DD6
41EE39A4BD6C8EC20901299837ED5FDB244AA92EA8A2D8C1AA64FAAC7952CAA8
91D89D6CBF5A82C037D70EBB73931AFFDB7E29FB09B2C97A28A440118DB7613A
4CC0BEF80943F7692E2DB3DC4466AAAD9864B8ABDC8AC9986DEF29C584E536D0
3F0C2DD09E82012484AF7649C3FA87A3AE44D93FB7A0D26BF62E5D15C8D09D13
B0A98AB430342A8C76E4521EF7E22807582534D5F0F263FA4C86EAD88DD4B095
84544076AFB74C7B33F3109B5EFF068D6189EC26A07D76118FAD8AE7873DBB40
270A199BF4E164BA835ED8A878735E97BA0837B9806C9E41A58AEFA75636CBBD
065BD7A4D7013BBADFA0C6E2C7FAE2B6477320DAF01FC329D22DD9F416CE17F0
36C10A982D3D5A26CAB55D1F43B9F5C8624B775EDFE87F760D7200C559944587
EAF9A8B5216B3CEE916CDB2035BA06E80AA6BE0A001415F381236D5876AE710E
E20E5947347A5E28A769C9594F7E01D63151DBA31D38EE7359F27015787BA593
BC0C6BA1BC382D228A54FF6B09BF829D2168CDC27B077C1A3E64030D40F352A3
34B520EA9464C8203C7331FB8C8BDCC3564A45CCC463F4E15EF46B077F00A027
FF49E581739F38141B8B48FE2DD37C4A69365579571DE66F500A75420DCB24BF
EBE3AE415963CC1BC0635BBEF4E812CA5E0E788035873E35A4B1E8AFEF61BFD6
49457B2E75DDD203B12B4A5AFCDDB8530D9A6C9DEED55254790F3A4EB0165FEC
C0385287C98461A65AA798B36A639CE44E2366B5D2CD7144963914B6F03C7D53
65CEF6C4169241DC1155020EC83B7A46C8058A334D89CD64C8E9F9136ABEA07F
3A415D53BCD1CFACCBDFFDC3A2249FE4068D529EA0DE02DB9BDDE5BEF74CDFCC
EA810BDD12127EC163B48C7751148B2CF46FC1B771DB34D6F0907994E48EFF87
759737F1001F84DE922D6A9EE8E9DF5325E850B6C90240609BC021F05BBBE2EA
61170F94D3DF372A6C51937D799855334DAC376069619B2F52AB3E6217658F5D
90AC64F9C82C455D55FAFC13BEF50BD8E96F7E1FC6F0F200766959948E022A5E
FF2709BB44D5FFB1DAD799102BB857A128D43EC71195255DB36DCC13A89DC812
49A77B2ABFE1E270E856C38F8D2BCBAFC2DD8F98F374160CF6E44042BAD6E29D
B8D4E2E3256CB030F7ECD10284A8D126A60C113193521443AEE9552FC3F11CE9
756644D0DA1A8420EF654A1902BBD8DD05615AB2ABAC9DFCAC298457E3D3F331
43A34C80FA6ED44CD6570A9BD7D3644BF0E1D4CF78E5FD1996F8AAE7917CF422
656E0B7D7FBAA574D2EDF2C550F4734555F10CFDD1E4AA4CF9084F3BC8574658
A3E865BBED6FD7812DE8310A496632D86D0F68D87811DD1BDACB1A0AA6B3E3D7
DCDC98DBBADC85EB734BD373F287F1123F51A2B35032D144A38C9D6069AB612F
12ADBAB51D8D71E21C9F3875A0BF4AAEC362878841078D46144A60538E82810A
466FB37B31EB76342968540AE34BEC4946749CDC9810F166F1DFDA759735740E
1D6D36DF5885F65799481C7603F091C06DEC3B15060C55412C259501F527679F
A3C085F83BB9B7A440C673D62516CBB6A041849901838D0A12D47F8BCF5CC576
8C0AB3396D1AC020C2C04DFC9F36C8253C4346DBC11A9D851DA453D41F4119E6
587FBB3C5D950A578830C4D8725C47D09A5BBA8965CF383F4F4AE6DA98D1611D
05E59ED9BE06CD53BA69C027592E21EDA4064F9024388FB285B72C04F8101426
B688E5CDF0E2192521ADC7B5CC65347138155D3039C53B4DC365CBC412E9C56D
7549ED6EFCBB88788A9D9274F484E5CF75E9DC900DA0BDFDDF66CDC5D475136D
BCD370455A98A239D58B788D47EF32CCEA3A2704292B74D64CF20AF491CE10C5
3D272ECDEC1C574EE6893227BCF96ED9D3947EC669D9E7CAFBDFCAE03ABFD558
86C946525FEB4BE079BFF644AEB6B8B421E14F973B4025E13E33140F8E91CE23
6EBFA996C51679100212026FE0BDA74AA02ADFAB59DE70F679945611D8CCB8AC
7059761DED8A2A563F68C1C2F0196F30AFA55779A6802E2CCA3F3A38D6DDCB1B
E272B237572D0738C5B7A9E30E9241B66330C265A5B7F41D915514AA0FAF252C
2D470BE8E664B114853CA1BF1C54B28F3591C1B05ACF3D469529EF64AB189684
ADBEFE40D6071C2D18A0B90819774D5C71CC64D93B3C247EBC526C2F6C8B93EF
2E8025EFB02E58BA9750E11A10720B650E61C2E1D62B535C12F48EE697401A28
EE62F05FDF6C538E055B61831B9FC0792BB6E6EB4419A6A18C8B8F25C505F2EA
29120E4FD48FA4685D2AFFBD6E3C668B0368241FB6E2148252F67A3160AF54C3
3849DED78CFE4ADB26070E46F7E452BECBA1FCE34F9A6D38260D23CBFBC98626
8FE1EDA208C1B92F41811709922C91F5C99F9CC06418549D42176DEA4E100EA1
1341DEEC3455048FC451BCDB48DC414AE5293A605A58D33ACCA1BE7B257D8041
C6E9DEBE123998F90487692539CAED55722B12C8E070FEEA2648A9AE95525065
CFD3C82BDD7C36589B1EB8917C876D7C780E4DDD73C0C61E31E3CA7873DA6928
89A66771DA94EBB0ADB9C6FE53041AC1505CF6EDCF2412B0A9382D7B9B373257
AF837DF07FA58D20F308C43A95299545F27EA902F484D7EF76DCF9A62B393C13
29F91FF6E05E273B5DB89549315DD15D7DA0552E5A9883982B360214C51F7B27
76DC8DF7A1BC49CF4BA55DB6D86E691B2CA7B82F4ED2802349FAAB08C227EAF0
95CFBECB0DFF2F1F05663D429209BB556DD715929119BDA2FC6120F98C489E47
D1E5B390059F800ACF8732FAECB356174BFDE732B68F61B19CB6C0D61EA8F3BF
4909845E975D40FA73F59AE22BC7A9DE94C8D7D6D3DCB569C347165E8287E051
76C4BD9E405AFFE33AA2AADB3787C591C3F2AABA930D964266398898AF43B514
8D01F8D32D5A7179D025981DB0F1AA37EB7E091123B76FCDB6E45FDA05D04DE2
60D94722956833588CADED9469C8D184E6656CFE6D2A1A68C78C7A79A202BB5A
04113525268F6FC80A05E2CAD6D430204F12EE6C723521748A56C4A588DF3F3B
E1452F230DDC37DCBB64B8EF98B9787955338B097C143077FE9C8991243760D4
52B459D971472DBE459C3CC79AE1D2AF03ADBF5D625AFA29921CDC57F8729963
8173A4543C6DA77111E903F1534FB37DD6917E202A9ABAB575909F630826170B
56B07DDF69CF46160412854F4BC16A4CA2BE0C84BF4624522F116E8EB1E6E37B
799A57B8009493929890EBB3F0C168479B699DEF3DAEB47BF1CC0D4E406E63EC
6F93991E948F1E6D71C92509A49BD69E7E6736A1BD7072A987295B3F42413621
6B62DEEE4C10D079E09DD0D495D042EE116DD3A721CBCE119680D2CDFFEC89A4
E7F9910DFAE0A32A88213D3C112ED828E9BD8DC7391E732A39B5FD48AA3DD9A4
467A2C16EFC53FA5D3E105F4BD41BABA50FEE1388365247DBCD7DC1F95B470CF
BA8040DCC3BC7487DD1FF1784FC7A0F972BECF188AE81BCC6870BD76E7D06903
79DD5578A1CEF8C259ACAD61EF8C83288526D365CF5FF3027C8D8E293CCBAD25
A8E9CD8EB257E6486FFC60E87CADA497235D693CBDD76C4DB053685F05C0C298
044B830F6F60231B642D89BF53E803015B9A2ED1FC8DEB22EF64A3FCE425B72C
D4BB4A3C4F2487DD5DA627CBD55B5971E4A64C720C76E3BFA3F9942D721FFE9A
65AE8600DD775045BCC5B34A45A73324972B1BEFB949B372B6EC16DC42C17234
21370DC517D474AE805AAED6218E0B43E27BE109BBDEC1EBC65617600CA1435D
C9E9F8478F9DD4DD08F92F25CEA7391B48224627B7762289F9C744AD7FB56870
7B848E9367023B271A500FFA8761F29435C7425B9437B01CC934F7A1E05D22FC
EB6A8458D38DCAD49A2995C222C87C80B09AA1ABF66AFEF85CA267AD14ADFC57
81E9E69679F4DF2F28D868F9546FA5583A7FD674C98541901A95AE0D775C922A
152AA3540BAC4BB62AE8E854660AB9686DF192849677AF97C64E989B54165588
A8594E191B15EBD6E19FCF4773A9EA03D57806F49718BC2085018E83B9618BE1
2AB7D022580ED53234B51FB652524297D8D381EF3625DC321E2C5B331BA6F9E0
CDD9D4BEC17F17889BAAF65E6164C9302F652A12C4A29E6F2C6769EF3736DD35
585FEAB7B6C6A1BD4ECA39102A7E634A4E0AEB7DD95E5B2CEE9B12071F0D488B
0E764D00203C21F1D0FFE2D88C87F1012EB3C3E611AAC49F79B2965F6B1F1680
705BFFBC47E7BF4324E6351A79B46ABE781A1E2D38998C44B8B3463DB644482A
DFC1403EA94C9B96CCCB2CF1151B85E0F2F6D8B02B179EE8F71A9A036149931E
208EECE6BA6087471FD3631EB3409EB9D044154702845C9DB38C401A9FB1133B
07D3E2DF67522BC7D0D28DDCB7B88065B41F1CD4E55EDA0B6778FED53AF2AF45
C44B70DD486D6C34607467C51CC66FE0B3D77116A39276A818BE1E1CF4B34C79
20D0634D8DE105B2C619546DE77FBDABF24BFE693761A5BE690FECF6E3405DBE
4E4B9709ACAB687A8D272E1BE5EA11AB88D1AB2113CF030FB32FA0D5CD37F2A0
37EB78FF9BF0BB7ECD1FEB1ADBDD8E9502CB56827833385C6B0700054B1E5932
0B1EB6B44815F13054EF1158F2658817BC51D95B29893CDFDB18C51039FF623F
8ECA9ED81DA89ABCA98DAA6657A94866814F9B5A9838978BD0E253888117DE0B
E48F800C5774D725BB344710C6BD0E24B2187373A720522C6739F8652CD9BA8F
4EC52D204DD339CFECB95A94881810E31BC85AB5D8BDFC288BFF2D0376B41C80
6A9E7E36353F04728687E913EB0AE6F9866244205FE230D781852B93E6208D65
5541FFDD4922BE040E27FAFA71089886F913B37246D70EF19B881CA93461E1CD
BE7C23434524E97F6140C46952B77F64ABC9CD881F24CFD68155EFB97AD15DA6
6C82F2B21C4C306AA3C372F021D652BB325AECE64C6F1DA2345800681364836C
E7C571C89B7E02898FA06656B660EE37EC78B99FB8DBF293DB50705B59EE4BE1
E9BF4DAF877451FD5BE4B2959458E1998BFEC2506D4B2B3B72041AEBA1448269
4BB2F2429E3F5470AF200A7C4CCD08EC0B3AEA4695F2F47746B1F3677C6DB2C3
B87C87A5D2F5D974FC8DF51D3F34E7BEAD9A24EE91048E22859AA107C4E5B96B
36EC0E4FA1A7D2C494FCF8BA4460F6BE9A922652B545C3748A53B735278F2AD6
8178787378B6FD512DCE9CA7964C8314CAC0D8A3A0776C757AF6A529335A977C
6C2CE48910D180DB2EC1BA77A4F5A2B3A7F6E6773E0DF3E5EDBE73502896E29D
4217A1FA558F4F56A25686E4FCD74056FE968AADF68D17752C839AA52FE1AC7D
AC6B285A4CB005EE4227EC949601EA03C20E46A9EA5072DD32EC1757E37160C9
4F42D7A6ED5B0D386BC2091E1CACA5ED60EB144AA6B35E9E4ABF30BD1B7C21BD
42370305DC377560353BBE127D105610446C49560361215D2702F04BD0BE1490
431C84F5B50A9809CA129F0C076541DD6D65A8EEDF172EEF745BF10CB6F67EBE
2E5DC38F713A78C9772E7264FBA59D082B9E3C282C9B61A62D3F1F34525F17CD
872399DA2E24D52BC8A3C14FD351FE31ACF6ECF022E07ECCA4662685DA92A0FF
5A6DBBA14C2E3529AB8610F24D0557D90085D8AFC049D6619866F62B72C17998
2941067648224EC27B05584BDF3C8CF60BDE9895F24143BCC0062B6570522342
0F0A843E7C74DA0EEC04A0315674AACDD04CD03E15996FB76EAB78B48A5C20C1
995F5C29297C5AFBAA78362C76476F27E825A97D7912787ACEAD069DAE87F6E9
A3A5CC3AC3EA36B4BB6362683979C191FB34FB6E352FF4970FA25722177FFAFD
4B7D8ED9487A37DB724D9D53A13F03F75FDD7E8412AECB4F96BC28A0E200A4E4
F5A17D763323243780F3F80E2DAC960E025790403062D5BDDA6CC0AA076A1E84
351914EACF78E0EC9FE47286E4FDED110F20BC1C19873719F91234BAE0CB35B6
9369C888AA9338C86B2322B0854D222408667CE3050293B76DE63B2A05B1C124
4304606C302F90E040404F28E1A527CE212B3D74C2C2A3DC677F31DED9E183EE
F39AED664EEB00BF4DB99E6B5669F8F82756263A1EF66EA0BF7D824E34075D0C
8C657551EB5A6CF962D0BE503EBF033EC7326AD9985575F14A265EC240E28E4F
01FEAAD2D50123CAC2471E36445C88EAE6258DB7491592E707A47802F28D2209
091A712ADB4451AD9FD85A95A15187D978066C84D2640A3909252473AF66F7DF
08990A0D8A349DCC096BD6BE8A7163EA0605C0C14757DD48DF9655FE6ABA24DA
05F741158F8D2EA5F7931E3454C2B519AC5C3BE599CC43FA53BDC9A83F9B8C5D
12B0C8F51CCC977BBE89400F9AC9F012CCB554A02682960757F193302164634A
CC5DF6BF4138DA71B3746F94D98695C350138EECD08CA291F1F15B30CD868663
F0C48A56919D44B58A6C316E61FB7783CF1E7FC14DF728C0F349903819F4FC82
9C6BB76F8E0190FD4FA2A0600804D988E80716E707099100FFAEC64092CB98D8
C539F774D81ABD1BD6A21152B317CCA4FEFD50116A5095C9ACBCEC2142AEA6D3
1F52A784227A8FDEB23499010BA6B566C71927553E49AA497EB453DEDB0BBB7D
3F03E6445016345C41EE78D477B8AD2D99F1856DE5907C6DB2565020E8FADA45
277A67EE1DE33D0878B4BFBBE53F09C85FE2D5D558FC8591559F56EFD5CC42EC
637D8115E2B24DE598BC199A3085884204F8F3941731F1A1B8BB3FE85F460F1E
D137E690EFB35F07A0F85A04C14FF7F60FCB630D594CF5F77F3D9922D1D56B80
253A3372ADB05B236662EDEA6B4271CC3695F6ED4FADD4CC6D46D71633030844
5D7A87410CDCA4210A7A9259C2242EC8CF3FC520E0CC4B2BC8BC3E1AB0A7A154
D9577EB64D42F8ECED5EF8A8AAEF2172933A2787CFB471C8297A9F687B1A759D
7951BCD5A8438D0658412E118E3EC7715411B0086B5D29E7F17CDA5BAD4506B7
E545ECFF5783C1351CC901272122D542954C362087670CAD40B886F42C44171F
21DE664153B48D8B591C247CABB5AC8DF2CEE60714E695D980C6F18A588C5DA2
2F4F2F5FE3C40F7E569CC6848F8F1A6FFE641C71678B53C1AAFAC1BA16D35E29
252E4F28F56502CC60A557694F54D478B79279891190C59BB6AB294A7707A7ED
2EE35BBCD2AF7C4C5599312C101AB914F93CF66D3B67AC5E80A2B36BCD0D4E5F
C54B9AF3DAE562D6FD360D5B87449E7AB0F49B290E899DF27330D6228D633FFB
2315076C29995FB67763226AC8865EA14EB72571B876384DF8C252B5F20C70B0
272C51D321AD56D68BA032551E39D6A23981CC9B9E99A5256AF0C7AE7E0B9E7F
DA43B32F26F44FDCD2A38266DB2D157136728990D63737FA827AEA7C733702B7
E27F26183B39A072981ED49EDDA3B17F5E299A80D2BCB085F6215A8018D98444
C9E04E17CC30A10DA0195E04F1A88BACAEFC246C466C8ADF9B180AE76CE04F72
FDDFADD95EFA1095AEBD4ED5109B0230A65E13594A3C261170D57DD88A03BEF8
CF192DC943107831073D014018F9B4B867FCF0431A4C90398987F078B6A1294D
DE948BC9A8C33374FD04B547964F30285BB23EFB1E4AEBEE3D0CB597B916AAB4
7DC8F08B541A16F4B6742B8705
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (main.dvi)
@start /Fa 137[55 55 55 55 55 1[55 55 55 55 55 1[55 55
55 55 55 55 55 55 55 55 1[55 11[55 5[55 9[55 2[55 5[55
2[55 55 1[55 55 55 55 55 55 55 55 45[{ TeXBase1Encoding ReEncodeFont }
36 90.9091 /NimbusMonL-Regu rf /Fb 137[55 1[33 44 39
2[55 61 4[33 3[50 61 1[61 50 17[83 1[100 77[{
 TeXBase1Encoding ReEncodeFont }13 99.6264 /URWPalladioL-Bold
rf /Fc 193[71 1[71 60[{}2 90.9091 /CMMI10 rf /Fd 137[45
1[30 35 35 2[40 9[35 1[37 12[66 86[{ TeXBase1Encoding ReEncodeFont }8
90.9091 /URWPalladioL-Ital rf /Fe 137[51 56 5[51 2[30
2[30 3[45 56 1[56 98[{ TeXBase1Encoding ReEncodeFont }8
90.9091 /URWPalladioL-Bold rf /Ff 134[51 1[76 1[55 30
39 36 51 55 50 53 80 26 2[26 53 51 1[44 56 40 50 45 7[61
1[91 27[23 23 11[23 4[30 30 1[71 38[{ TeXBase1Encoding ReEncodeFont }28
90.9091 /URWPalladioL-Roma rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
50 109 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 50 109 a 50 109 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 50 109 a 50 109 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 50 109 a
50 109 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 50 109 a 91 x Ff(W)-7 b(rite)22 b(a)h(pr)n(ocedur)n(e)272
363 y Fe(void)31 b Fd(sort)15 b Ff(\()h Fd(vector)d Fc(<)p
Fe(double)n Fc(>)p Ff(&)23 b Fd(V)o Ff(\);)p 0 TeXcolorgray
0 TeXcolorgray 50 525 a(that)f(sorts)f Fd(V)p 0 TeXcolorgray
0 TeXcolorgray 22 w Ff(in)i(incr)n(easing)h(or)n(der)d(using)h(the)g
(selection)g(sort)f(algorithm.)50 780 y Fb(Observation)50
957 y Ff(Y)-8 b(ou)21 b(only)h(need)g(to)g(submit)g(the)g(r)n(equir)n
(ed)g(pr)n(ocedur)n(e;)f(your)h(main)i(pr)n(ogram)e(will)i(be)f(ignor)n
(ed.)50 1212 y Fb(Metadata)p 0 TeXcolorgray 0 TeXcolorgray
50 1389 a Fa(language:)50 b(en)50 1502 y(source:)h(raluvi@jutge:/h)o
(om)o(e/)o(ra)o(luv)o(i/)o(pr)o(ob)o(le)o(mes)o(/o)o(rd)o(en)o(ac)o
(io-)o(se)o(le)o(cc)o(io)o(.pb)o(m)50 1615 y(generation-tim)o(e:)d
(2017-04-04)i(16:06:23)50 1827 y Ff(pr)n(oblem.en.yml:)p
0 TeXcolorgray 0 TeXcolorgray 50 2015 a Fa(translator:)f(Carlos)j
(Molina)50 2128 y(title:)f(Selection)g(sort)50 2241 y(translator_ema)o
(il)o(:)d(cmolinah@gmail.c)o(om)50 2353 y(original_langu)o(ag)o(e:)g
(ca)50 2541 y Ff(handler)-7 b(.yml:)p 0 TeXcolorgray
0 TeXcolorgray 50 2729 a Fa(handler:)51 b(std)50 2842
y(source_modifie)o(r:)d(no_main)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
