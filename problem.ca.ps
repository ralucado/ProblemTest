%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: main.dvi
%%CreationDate: Tue Apr  4 16:06:23 2017
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: URWPalladioL-Roma URWPalladioL-Bold URWPalladioL-Ital
%%+ CMMI10 NimbusMonL-Regu
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips main -o
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.04.04:1606
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: NimbusMonL-Regu
%!PS-AdobeFont-1.0: NimbusMonL-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-12 -237 650 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B89290699B50C1BF1BAEFFE
1F57BE7B5EA025241A248A6D4CFA5067A1DA6EBA4CFC940599BA3F3C934D7248
B8E4AC5816F0D2CE8B3C4193CE39D19FFFDB75254573173CB51CCD83C2F2D06B
2483CF9B07B21EC6F502F028C273887BB06DAE2AFAC10E9FD3C7CF51BCA7B277
B706E425302DC78975AC0E43B87073257A5CD7424B6865FCA89D886E8F95C4F6
D457623DBBC0D16BAFEB4C649F5D72B09B18502EEAB687E915E9B536A361B4F1
44C3CD4CC683B5F05A4ECB4823A5EB5179BB7EEE8B76C21B2491A97808F6318B
585B0BAD98F42FB4A755BCB74CD354F794C8BEA5B90FB9681BD5849D45247E39
930C882490230E1662D39CCA875BFFEAC3E79A78DE6E1298ABE9817AE98675C4
16220AD0D3A36580EE2F2A17AAA1246C416D58A4C52FBB26AAF3B6F75833AF8E
3AA996218DAFA571FBC7CAD90ECE9C883C813D8F168C5E86BBFA0F0A5CB36E35
2DE4CAA0F8D3227F72C5056BFB5BCA6BF9C60E037A0E44670A8D3CBC9A19F379
CA8DB30B711F518A8C7569211AC70C46EED2AF62A37F238BD0BD12D60332E673
C6E784B3EBA3F2E71E9993B97E8A38F85048937E958F1CD8FC6E661048546135
56B810FA1FF611B96495081C04542DF7FEF085DEC619DC8C84CC57683D212813
9D14728AA32723E1D15F2AF8F03422CFAFDA40AD7B3E210B6381F66B94E11294
C2F1B93134816B1E636AA6B9622E4CCE6CF2AFC17C9B0307562905FC6C24D60B
21819E209EFB56C1D3F76DDCA2C605FE1895D30F6D027E15D5EB486CD83DB85E
B304CE5F3E5A4AE2D89D3D075A1CF750ACCD72489207B74CC4C42DDC9F77A4F1
3ABD480EDCD34370F71F9BFE330C32D011AB975A9DCFB0A4BE6947FC780F2D4A
BE4714DC4CA5445493171CA3A4439C3B8653C05986E9A6CBCE349DB78795CC31
B01C879BB44632D8F9D8196B6ADD6D42B8634B19F2134FD1A34C8334E1CF5D31
DB11E044675B4A4C1292728C3946B7BC590B9C68F20D50E9F6D23EF60AF9131A
1E73E0DC6575021FE4ED71E4AB3322A727A6A32D5E34FA090973057AADC1CE95
9847889486E4F573A87A19E5DA17E070DC8FCED3E983832B845586E3E2EC973F
74E00D5AD68EEE1DCC3215D1F676074355F7FF6C557B3686D801E54EC5ECEBB6
FEC57D40E71090768F6529B0605F51D06628004B5756428E2AE9ABB2ED239303
AAD05165D1F22B1B00FE80E6907300DED6A5D94668AC4B5ED7D2565B25CA8E73
6D5D77B4E31498CAC8488794F91BFC92F398E0C3227C34D7640F5016E9E8FE8A
BEFA3D85BF7B6D1823EC79EFF944246DF8911317DE4C75D695826A465F26F721
969C7BB7463204E96F011EE6CA8DB225952DA850C078B8B4264912189A99FFEB
A48F693D280FCD604D0F63DCCFD3D9B0BD93DC13B78CEE8C67EB46779EEC49C6
4D3DEB13D303AFE9072318F967F9E979A1E4EF069977E88971C070FBAE2C25A7
104589EF38855231D92CC9099C90F2D54C2D906F5A2D07BD8A312F27075B9DCC
920A5FC0D6206DF1B2B7701C20E811C28064E499E404C7DB577CFE5BFB1BE0C0
AC6004863025296E3BBCB4231674EECE12A1E10E7805DCF438CD9F6FDBDE5338
1FB28546087A7B8E3203B60A8DB8344B86CBB53775A35F4C4F79078BE326D09E
F99C25BE6076ED2B262075077004C7AD97187CF449C01794232E62589EE9832F
C6295AF61B462F8DDAEE658222AFC39F6967E3623006F57A08D8D6D7F4C72073
F273A5A43004CE2C9768561BF1201B86813C6B89EA16AE1B3569F4B4DC168A19
486FB4C1D31E05643BE95D9461BEC7D1115ADF2DE08AF7B31448DFC1C98EE686
B4AE907EF3CDC194DF7541D34D08480F1A1CA16F2E2F8A604E64AB2F9488EA7B
1344329A6DE47FD59BF4A2987CA447631F40083B8B89D365F9217E80AB3606D0
2B8B3DD68C5C8F24ACF262A36A8205C68AA0B892E2B8F10E833B781A7CFA7A9C
B4332D37C7E64EB390A38B9A19FE34F6BA670C6FFE45FF252E9CBDFF957E4A94
A814D5D7B75628CC0A73A374A902EDD21036C2B9DE196847D1CF7D3DE22DC741
DF0C4A9633A63E78FCC9F80BC3D091CF0C7F761D08230D21D8B04E9832E93EC7
57E5CC3A3319B73C3EF70A8FE312E7ED9A7C4447E7EF6E9A900EA9398CFF7BF2
CB6AB91D17C5793A8F9EDA9B4D98AF0C5B1C80F749FD6237A23144481761D0CA
D6E06372482BD913736E5EED8C9C455107A2D2C9454E66AE65B5B3D05416E763
5B913406E7DB2B5F5DF6B585DAD457C8351CA765BA358247310D2D65F7AA16D8
7FD88107643EC1A422244B1F2D267E4CB947879AE13CB1AFA9A96D3518E5AD9E
D32CDFF084D1C0E486DBBC5CCAD3452A7FE5A527D3A9DDC1C8E5A1260E06EFE3
CDEDFCE5AB551ABCE205DAEDE1A49769F27E54371F1C77C3E72A5B7F902BBA4A
C52C1D5ABD368FB648DEB0759E96D5784D36A997284B6844AD72A716B7E70CE2
1010E3AAC8487C9AED61EAAB9EEBCD9C390D70607E26481C02A184638BF92CBA
44AD89CFE59081E047280F10EC39DDC2F5298AA323EB96D7FFB0FE99B5BBEE0A
1EA4A6CB25527C6E4A4AA10330C6CA3C4FD34BD0A7A1833B19CB43DEB2538341
FA4D65A0A88198F8851FE36EAC2473414A2D91C42BF621F46178C743F7BD7433
4DEB94DAC8D266FEB94A9353307B572ABE2EC88D6323AA7C2D6585F57CE1A9B1
386693DAAC700C61CA24EFE8AF8F9056AC944D776AD1AB10289FA6743B4C506F
4F4A5A37C01FA41DBFBFB965C82A632A2C9981B84E4D303952C301D4FC85676D
82530CA8AAED0E119E5ACD18F96868A8BCC914FA5EB82DFB0E9152E2B9229A62
EF76D4422E27F4227102CF7D568730C3651A3B3D100EC7F458B977A9F37112DC
FE34D8EC17AAC4CEB41D8964D4FCB5E4DD511B6A9D5A0C7BED0E8B1DA43C7435
89C85EFAE2CBC1FE4F1CA4BEA41E27D6775BDC9BD9C9D73C75DA9ED18450AFA6
0737495FA80D6E1F61996E181BD5AB7AB3F521E4B67B8160073303E3B3EC3376
BD946A125DD65202374FC83E8FA88B00A07BC75F17132DD67069310617C44B7C
F53ABB3566594A9275834F2E56B93D7DD921403A5BDE62A2679372F857A6320C
8F34A804800E676EA3D086186E1DFFF29571BF7869442D42F3B2CFEA4438D3E7
A5903720B5E930392FABBC370A975CCA130CC159DB61627E7A988C0F5BAAC603
F8D59A9AA1E7E36FDB6F8B214DEA0656E9C8337A8BF00E3C0AC78F0E3901724F
C8E2B06C84D4D0FF0D2426CEEBE46A5282F78A89EE7557383A6C2FB74CCA4036
949093FBB00DC00834C17CCDF730C59655EB614EF41675CBDE2964BC9AF31AFB
60F72DE3E5CE0D604833511E78B3DF0FF25780A142C31E0E38787BFE0531799F
D9C1D86BA3B9C0205FC2580EF426EFA44427FC0F9FCD090D1108CD2329085767
55ED16280EFD13B0CD3EA369CF02C7D7107199A3A0200534338ED3CCC54EC5C7
147B8B26459FBB273B2C0E5055E32444D99BEB430557CC188BD44FE265A2DC2A
176462F78EC30EA9BCF8ABEE772BF8AB008463B09B4CD634CFD5337C4EA424C5
ED9F0ACEA68CA4C5FE0B0DAE30C38C3F2C5FF185A72F8B21D6486CD41A80EC05
1E8757C568CFFB45E6E44703FC7AD68DBAA09BF4E38DCE83D5847D03ECC3F54B
6D594F074C140C7D5ED6AFAD0F250C71E9EFA7845A3A760A507B3D3ABC525B35
93073DB52698068476B55C10426C6B620BF1890A7406CCA98B09E25384B0C3A3
A15EDC6C87355C5F7C8F822140CD48489794E223CE3A1F5A84930FAA87A50C93
7487E6A1CB1E6102FE69D3A9FE361F76046435F30D1200E0FE9CF57C6AFB258F
73816CC190CAF25D9965C7DC3EF7CB0CD6D034A76D32DC844CE009C6EBBF9C9C
BD33E592CEA7123064ADA03DC29BAE25AAFCC3279A1FB783468F495D1BDB1786
DA4733E2318B42C34CE88E29E664C5D9B1A2380DDBEFEAF0A6EAB27FE9A283B3
A8C6A86CF38E0E6544F6181C5C535EC9D9EB4148BE7500C14D15D06066F3A961
F58D4DDF9A148B066293C301D82CA60D58AAB1FDFEA50707AB1BAF200C6982C5
00FA31ADCAFE313361DDF62D3B73A8801C0381FBFFA6CC2E3A1EEADC37BFBC85
EE5FAF4D4899DDF44228132CBB5AF976AB9543DD2AE05C0A247F58656BEEDF39
43D11F31DC68ABE0CCCC8EC2079FE9F74D53DAB010AA035CFDF85E5BA039D6BB
9BDD1A78E47684A3C53CA307ABDB0205DF7335876F57D22AE2797EFE0990B7BB
874D2DA3BF775B783537D2B57CEFE24A22EF9992F5F4D207C40417389B5597EB
E14007766AD28F7DC3C6AE2D726FFD3D847DA4F518B89F40E5A977746245B0BE
DA3C8D3FA6C40D58AB549FBEAEF52715111181991F755B2DBA4BD7E58AE9558F
3623AFF2A02487C6F86F364F684A3C4AC914313AB453A0F8BF656B56497B4207
C6D3174E781FF675F70500FD0AC869E2351B33E3C7C42C5BE57757E1941DE584
894235D7DBFC11530258BAD56F2255DC46A52493A8EC7E3932CE6FEEC025F36B
F08CE8D9E131D56DB69CC606CA5C52207087A18922B2D588278B91E98BA7574E
6B5F69CA7FC74BA897F6BB74C5F84986195C9B072428D236B5F70C1B46AA7705
B19B463F5DC53C1655723AF7432622E935187E6FDE9AD33C2B6C4C38E3197D40
FE2CAC0D0486B75FE82E88EAA03F65077776C747047E34122CB9ED09B4910925
7898F180D2EF55235972753691635CA33EB220CA7FAFF1EA78D0A68AD7F829BD
45140D711ED5C9E1FFF4C3304227CAF6239DF095CF03E794D875024D5C64B3EE
4B7AE7A4113F14B88EF719A12867F5B19EE213B045CDE5B04C743641E29D9B26
F77F4936869DAFA4C21D0A627E21F9D5A27BCCE831B847AAF856A57C44D7096F
9A882C8DA81B01AB54D97948BACC9ABDA9206D0AD65EFD6E89E70322C72CB26C
EC6AA0A9196E604BA95E911284366D2F261E6F833FEDE415A53E39D8E9D0E137
BEF225577AB1A60E7A80BC5AC25B6E250D29137F6DD5427C9DA3D871F8AB4EFB
5D57ED69CC54871308F36AAC80C0019EED486113854688B024900A731FB70ED5
F1CCBF4A863D1D73DEB1CE0CAA768FFB51F71E20BF8F68D6966FE7DD39FE5274
7FFEABB38B1445A61DA811103473DBA5C03B5BC644B8E55B20CAEB6E1AA789B6
A33308D50AD3152D7CBF3D989F8FBAB83C10219D4D5B7DB3CC5131DCF1DA0871
FF84F68829BF4BCE381F2168A23C315922FFCB45CDD9051C41293E91BC711A84
41C08ECAC98F53FDF752623C7D316CF76CE8D6227CB86E045DAA398A8967DBFC
4045E1712D4C676BF95000D0E7E4501E0639970304C712011D138ABC815855D5
F0EB92343A856BA86E00D03C96A77DE1E9FBCE1693CA5F879262AD6BA99330B2
BC72BC1E64EFBA38AC3373E82DA72DFACBC97D375A114A94FA1807B087EAB33C
992E510079219C53405917D47D54E80538222B75ACB0672BF97319F3EC1C7389
F3C9A5D9E476DA325EF015926AF4CECE5E7AB94E4C153F2640C88DFD6E0C8E6A
C01EB0CEEB7D8A1792B270A46BBA749C1433A01F37CA6B04844C7CC95984CDAB
E08BA9ACCC4B7092F4864D261F4F4620932938B837C625439B67323BB82722A6
804DC87F4F5C62C31634FFAF5A05F59D56E5EDBD47F7E546C85DE0838FB8478B
1B14C8B34A5B1F2782E7F7D4039E073F472A7B9B8925AA6329F12147C5C8D5E3
99B7431E0E314598EF7A8B6457D5811F48C2515A46A3FCFF495A5DB501480E34
D300EE501D56136EA657654583F3B43E02BAE4FDF50B3A93FF5A9AA5FADC7D25
F4756A44F596F7FDB28BE21C01FC5C1BF42AF4B5C489B6BBA87943B8B034677E
1CA933E7FF893E7921F3C0460752D2813B02EEA9A3F1658E6F7D29E8F32937B8
04234B5895DB2F4DFE1DBF76464DDAD3545F745CE58060524E755CB7F3B97204
CF3C4073EADE59AD06BD69B94FAB4D02C41DFC3CF962CF677762AEAC90441BA3
C9104A6D3DF69FF58DBFBB77AA1CD5BC15B51A9629BB29D439849D89F57FF1D2
F6318781EC0618475E8F672B312236676F1C84B33281E75199D9E1D5D416C5B5
2DCDDC5D6FC31510C0326BF63BA1331B9C6D9DC6FFD99879EF84C29738EF2EFC
43D11313D6EBB93197DCB006C95D36849122443B06380F78E3B38BE8F6CDFFB9
D6DC201336D086690846DA133C0061AA16A37268D334B6E3D6643FBB5FA6FD19
E8B41D733F517283774C4F16AABF817C3990E2757A0C5ED8C8CB4191E950DBCC
D311A20B14B41774ED5DF5959409776F04C4D5E4D0CD40A0B3D10232ED6F0028
87EED26D9949014AAE1F82EE51F9D76DF58E255556FFCFE2A8426B2D73D2EB4D
48B578ADC22A965561613E28D823057B3EC569EB5FAF1D171E212906F22DF6F3
D42A4DB7B2EF4DA77C2300AA94BB35FF7E1130035518B9F776A9FA7DAF184C5D
41AB847C2C82287FF3E04C8E68EE9E1375C8AF2B11652798509B803AC7CFA888
23C833153DF2F90B6BE5DF3AFB7CE727A29E895C584B52AEC3B1C036501B37FF
D38816E9072BCDD8818F4A9BFB3EC87A55A4A443515BFA6309AED96B6EC24249
D48642612FDBAD7A9023B62FE7007A4CF27FFC181CA0042E22BFB1C8BE132BB6
1BBFB72049E16A4F57CC3291F8C096084528C10D98952C838623B68519D19A8E
66B0CEA629C59DAB9D094464C2C0E24094C741BE47F40E0CB97D7FA008F7B2A5
5E21B6796AFB06C6B6591DC3D5B04A4D2B3CFF2DA33AB86440DCC3C9ADC104BF
7E6BCD3EE9AA84D1665B774BCD83D07B3D608B80D8E86E8DD683CDFE56D2F9DB
9473701FB194E9CE5A87FE54931049249E05CBE49C158A1BA93179C3D88E41EB
FF9E13E90690A80D959A9FA3D56C5E2D626B94367DC0108887F0735CABD75EB9
F5E902C36A59AC21BB903F8A75C89FF87AADC9BF154FAF257000C32892BCD93D
B5C584CD4F23BA2A0E733D1E9F7F7072E606EA3173008365E653494E9AEDA631
2642EB2434B257C5A2264615FDE2B62290D00EB62CB68F94EF456A6BBEAAE643
5EA9191DF40EE0B201535F21D88966C9C07DB75B0F6D78D886DF028135CECF17
7D3C9542512809FD18634FFBDDEF7B93C1F7320F8FEBE0C648946E1B2B73988E
F9F0B833B6C88D7412E4C02DFE34F9EF9E74BA70701B18DD997A3D207117736D
2F9504083385E4FEDC55460790CC46141A38418C12C157E9272C09A21F865E4D
1B93EC5B0A70A3BB35DAFE9547790DBA13B4ADFC4B174F341419C793F0EEE513
37247A422299CB4AB047AC4889A1282503D4F232963EE293AB7A059E0574FF37
5791946BF1DDE448B6343B119DE207141988CE4D40C61BB2034291D8E503C568
766358322D8A4A3F0C83F1A939546ADEDDFAB42EB955F10CFDD1E4AA4F0A70F9
98ECBD7B2659D95B6273D0E1832D5601A446769C35003E3712C683F56B2C5143
86CFF61975956C403D1DB53D38E310CDB6AC1AB76A1FAFECCE490F8012155124
9FFFF42CAF1BD375BE27F973AA31BE4A5313A4FF8A5B1FB0014F6673995BA833
DD510EA6B70887055F9855276EE252344EE302CFB2441CA6A0F09128AECD410B
347F3EE499B68DB05A6612F712022E25F8803CAB94D75E823D63E369CD3D0FE1
10DC2D2D80A4981195C11C2F2806C4922AB9E20FF78DEDAA14305AD50F177EC3
92C8689B06DD34BDC9637A3941CA2FF198EBAF8D7EAF9140FCB556B67175149C
7E0683EF2A761BDC6850148CB39A3C0BE6B091B08EFE3B43D687CE840322317F
5DFD2EFBDB34E498A333D20D4CD01885C2AF1FA17CD5DC6C38DBE7EE79E62231
7120AE39713EEC28B51D1A2970F7C8A64677285BD1435E23F7395871AD11158C
FCA33C04ACFDA60656D380E0A7B36DC2F7D2A4D6CC0937BF33358AAB8BAA59BA
8EDF09B8B1BB2CBC48AC2F425E8150E0A2C217C0CA2A26A141370CA486620AAD
DBCF844B487004DD8DABB047323A08AC7AD4E9217EAF912C86CB6CD5BBDF8768
56517A7FE8C30572AD06D6EF7B0ED471DB941811EEEB2041DC2A34CA9CFBDBA9
CF1519633A44E889CB71E19EAC8F703ED627284A783F001789834F51A623C6CE
629A38AD7E3D454A365D1D4026A3816DFCC1572CDAA62B2E60534F40CFC7F7F2
350C62A192333E15418156EEEC0DBFDBBBF4BFE1AE855973129978F707C87462
B67509FC87EE54F083421685CE1D1A785AA70597CBD2D2F885F72CD452957EFA
5E03C8ABED884854242913773A08A5A110005D62D77682380189077FB9E656F9
F3D53D8788D9702F9B03C23C59305C7A2A9D392AA29F99E97B1A3103CA5B05D1
4D60862AAB2F2AA9A9B7F03F530456D6A60C0B677C5D2E1CB0131081D3174A86
51D858AFD0906E11A12E9E7A5B5E334851268D3E044FF8501EA004CBA739E636
BBAEDE1CCB9F8DEBD21E86825581E3955A5ED068209DE884C96BB923B1EC8208
BD7DCEAB0FC22936292C2BF081AD847D5976FA7D44D4F8C8C752B02DCA88DE1D
C1858B0891E10C66EF859E5866B19808EBF05438BFF198BDFD258BC893B732CD
E0BDC342A927FFF8372D492BCCD248376693092414F78048461E82A63A9A4DBB
224DD7F9DD97DA09905C0BEC0EBEFBAFB779344C1DEB9574224BA25C78CB3BED
5E7AD9383F8701213707958220C536F9C541B744E1392FDD6F261EE615054441
DEAF6C0CFBC16C372CA6B772E8A98104FF55060176395314AC8A3395742FFBA1
13F9A6261B6A8D94884FDCDB0A80511212D0523E1D4856C9867CF5756A1292A8
38C381D4F97B725E92EDB859A9F9A257A3E6A1500BAB859AFC6C83DAAFAABA8A
443D43BE4C4CCC091D67C4796437D9648BDE5AF9F5E9916F07817B6884B02633
AAADBD1D795994593613A941A0CC691A06F75F5C553A047D7FF581F639942935
BEE3CD20B007D1EB71185D6548B27B39607D8251C5D0FAF6B639286F2C58F976
030FFF8A6E6797A9E1FCC1EEAC8E0653992FFCB7636743F2517EC9B53D7DB5B6
47460D252ED64C368EF2AAC9D380E6BC0210D165227ACD7C2DFDC92C84F61C5C
8986923C68FA7CA4177BCCF14778CF7C652A688AB3C9DC864761F5D6E3DA3164
26D873CDBDE20219ADAA2EF193AD1E8F14B8BEF7D2E5417C3EB913975CF037AC
E47977EB3077F358398545A6DC0F6E1C7BC5A7A486D49D9EA293881660E6AA4E
689A516A4208AE9469A16EB9AC6E1AF517263A0B11C7D838FBE1C8A768BCD06A
8CED09082F2C59893A09E20D9B6CF38FC8562EEF927E9DAA0A93B0A8092E176A
CF3B9048469F4DF6B3CE69EBDE3AADB1C5F0787007ACC386F50D2C9FC7F2A2A1
2AFF42FA9A87CE56113162DD200E3981CC10BA07639A0CB8F1E9BEC14C5256B9
940FF8093AEE2F218F90A7EF5EA81802EA508FF8E7B60DC1EC1B60A9EB8732E7
49426FA209CB1F411A6F2E9DA25268582BCF0E7530BAD047D64182763D3C8145
F36C6F1BE5772D6C38F1786DB3C9DED8C0F5A06D220B075CB8CC9FD4574335EB
3575F4560F9536EF3B2B65D78732C40F1FD5959CC60CE99A1D07FC7DEFE43BCE
03C9C0F19EFB003537FA749544BB71AD967C4B8437470E4D020FC6E867725198
9C1D1A05BFFFB607844380156A9D5FE2A945D007DE6AE4B70F8524CB12BC34CD
34C3251813CE12B7620D9DE43D0A3B7785D00C79714D6FED70645D2D05E49BB9
F922A136162024F2008D619DB75BBA85281C413245BACC55A801CA1E0C4F2554
BD6F1F4C69E46C9C220B8A6645EABC023B8982C1D8E1F97E4787BB31E0D5EBA5
C714768ACD883B12D5919888568DE46A14AFF9B53476140AE2C500E5912DB893
7D1A4497FC262B6D2B266FB7345BA7A8AF896369D59A6B8297CC9EFE00FCB9EF
CA2D26256C5168E952BF60DB989AF3F538CF0D5D1234E2DB9A16BC519AB969C1
C36C72AA60D2759B3D6FDBD9B88CC93C4951AEA049EEF3CF6CF84697FEEEF16F
2290BF3094539CF4DB7CCE9374D76DA1237A4FBCC9FF1805B567E197207A2C6A
D7AE02AA5AA6382253CB2BA6EBCCFBC26B35BC9BF3714E57C8F6AA9362E8A8C6
9E14731135956DDDCA10089C14BF82CC947D4C7D771AF1469E2E84F423B130D2
3C3CB25F41A15D8BBEC9263AB6EF07698695A78AE37127EB310DB610AAF77F2C
5B0EFEB93A875698427D47FEC3F912D3C651B8C3B72F761F07BC655CA1BF33C8
5E473D8B7BF4A2BCE9E72882B391A965D8D06C7230226EA61AA9465BBB3A8215
74D39E38B966EEEF2FE88AF4F9AE7B7BE7071CAFF37C7FD9A5B5E652035B0764
270019B765D822508D076716E40A6BD025F8CEEC29E6A4F8D7B2AE30544A87F7
04327A9148C96D494133A0C448ED1FAA8B9E447D9164808D0E80B7D34C8B9D73
DA9E474F973018993CC91FE947C2A568CDE743380B50ED45F1596835CC04D213
6249F93B568B99B7CF3B97EE41FB1D27D73555993CA7A39CFBE8199EC9B68B85
F834A2C3C23C16F46AF436F950D72F4411DCD1B0BE9330B121EECC88268E0A23
F7A242476458C4CE1DAF016EAAD4CFBE1557A060C01971DC5F07850E75F6F058
EB6E3871BD78C081969A0C94E764B99318BEC61B02A41BE386CCDAD4CCA5E7EE
CE851F31EB98F5CB8CE820FD879B1D24FE05FF462FB0B387BEF5A99FEA8FF1F5
1DD5C45AF9CB8A63C858B33D86629E85AF729C70D71E2FECDE6E80C08427999D
46FAFA65E147CFA66EA31872E71D73E93A6F1413B6B3F07554A1179CF2D2562B
39F8CFA8B008686A8B21AFCF13E69FDA0C271F04C84D3B32C576DE7EBC882A05
3F082A180F09A3B3B5A3BC5634D87454DBE219D9FCD75A5975C15F3E77387966
FB72DD0420CF2B36AFE5A42CD99B3E92EB34D9049C39A0CA4E50C863B9D86C99
573B6C9010C4EC444ACC71DB34A04087F59637A3099F1E6F7098D57BF68E2205
1F8C5774BC053698906FE9EF5F5D0DF74B2719B7DD018C5FE0C73183D4CC1E8C
76423CDC8B163C67CB55AFB2B32133004BB7CCB2A39C775AB00D61D5100BA8F7
F0A81DC6B026ACF23F593A106E1E03944ABE063B55D48267E5D2E204F8DC2701
2B34D8A64401F5EE07D26369D59961954005009D6AAA389B7695438D84E29364
BACC88061A81AFFB503A02B3C829764C27F16C5E4882B5E51AC5AA13B62D268C
C21D0E7399EA105586CC5786C2EE900F5C4AF4C94785901FFC79FEF19590BFFE
DAF5CA741E2EB00226C5D39D147951661386498A761BB91F61D7ED14770D2519
C02F82708D050BC6A226FA5DC15FADCDC5CC9C8993735CAF2B2026E862F25B3D
E774E209CA3023378B9E0B8CC4AE1D05426E19CDA8E011BED9810FCF69CCFAE5
181ECC465FCB4DEB277A89AFB7FEEAEE4D0BEAD28A61E59F2CB9E947DC01B19C
62B57A5E7659E78F1C4DCB9FAB6A12960A531CBCBC4BCFA04CB256E9AD9E38E0
6E7D2A9A329C8DC4FDE688E4330AA7F6FB215B76AC6877AE1B16368CD0D15753
FC36F5D1F969FFC8D63360CB788F54DFCAFFA95E3EB1C7EF55440030BDC164FD
D1069F986A66BD545CCECC7E87F89255C5EB6439D79A3444DCBE6637F417BEF6
06D7F19A045C275BBE54169E374DA290CD9237A118A997CA6FF4A7998889D7E7
CD0C2DD9D9676BE3B62E7AE2DBEEC89E8D90C40D15DEE56FADD1D8CF3B485734
08C4F2072ABCB86C57669B490C69A8FFCE3CB7D22D504C13E34FCB90E2C094C4
FA8FA4551C1A2979AE79DA370E60C7C09881ECB6B680F252FB06BF146D5A56A7
A953C5B9BF8E21DC3DB5EF7C8B8ECCBE705A1AFCACC86526A93D0A6D585BA51B
96B6F1875F6ED203DCFFBC9886F47C509A9A01B5483B107840BBEC97AB3161CE
F74235A4EF5EBD5829121C106758F5ED443060B3526AE94765F8D73C8D0B7E42
AC9969E60B0BA1579BF67DD9A24457A1B9771A2A0D5AEE62E0F8BB2CEA7784F4
369A5B52E549F9F65DBBE686850160E1DAFD756131988D3C4F43DA55BCA47942
5382412A10378014A5236B07C53B3AFC471847D2C2ABD8285CBDB0AF42E529A8
2B464BABDBAB198A85A9564500976BA8F850D3B49FFBA065364D23C0AD246A89
013704A8F9F50B2CB6C93D450F78BF9AD2FFC33A558FCD68BC9034EB5AD280AE
47DD31B173BE7B47C7F6F66A9D6C6C94195589E7F0818AAA9A0CC7F1574832D1
94F99B8FFC1C249E1D0BF112CB2B3A9DE20EE4DECCC58E6C4A95E10272B89E45
0DEF82AF498112F918676466AD0CA61B7839851D504C29EDD3DE5931CC4B46CD
306A40E33310A9C65BE5CF3C99CBDDBB71882B1AA59E107C77DBDBFEE4FA3FDB
914057EEE84B6A7910E2D9E81920BE83542AD285155D1D63D4B28D41DBDA1819
7882BAE5D7E23520CB30DD298D6875396972100634B91E56A323A6BEEB678BF9
9E285BD0E871D5FAA93023FBE398A198F3B8354043C89699F16C43F3E4F3AD9E
CED4AB5F54FDC7E874A5E7367C2ACDFFAB27051D6A95D427E77C1F945F33405D
13AC40216D544A59AE1B5A32F2C08C62C9619E46647516B93C1B00FA3FCD1C6B
009FB1CEC693A41158F4C552E4DA3C136C01C08079E59BE74D6BF7B08168B860
D6C15D5A171A55F28B12903136E6D0E7D1837D5C61442D7AE3AD8488F4D2852E
C5322EA432B0DB3924D8FE0E8C07D93382F36A6CFD7131512E6E4C11778F20BC
0897A788AB4D103D38F1FD4679E0A8CB361DCCF42389A260FBF66ABE09766A43
C2FD5E4BDE25EDB7C09D9CF87C0B422E61F311C2EE3444CCC37EAF2C045D241A
373A4C3CBE4AB8FA5401DB1B6DB0DA417738A131BB601F4BB6DEDA87C64BE206
57F2EF18E5AEE5B04BBEECA0B6611F7D02B14582746B48100188E8BD08D5B41A
007D5696F910B0BC1F8D41BCC4E55FF9A786C5DB850030E69DC2CDC918353E9B
3733DD3EE7DF83336475B647D7163C9A8FD1BEE8562D9DBC7E8B0F3F899FD5D3
71D856DA107665F874AEAD57E4A5B52B88F0CF9C98D7F949B296F5E7E03DD35F
9EA1E1633A3F6BB15E240E6270F28E5F3C9A02B87E29C1E8AFC8DDE7634C3891
A8C256CC17087E97324A8DABF663C487427D27D410B51A94F65789BFAD6D1A2C
FE5B9745676454A82ABC27C0C01676028E0FA6499F5C061F1E578DEAD0BF1A36
28DAB94B1536F19FA85583AFD212688B24D774755E375A6975BCCC282993D533
2C4EF104A3D7E87E05815C0DE8AB5A3E30445C003B3020B64671CAA429C4C499
1E70D4A560088981FA4ECD300BD3A6D8C89CF7B69B3CACA4FCB5FCEF0969E677
53E28647198EF1B0D6F4B4413EC61AC29D2A2B4146F15BB0FDD16C3605009C78
2C5FAE73C6A1855CBC24BAE5EE50D3EA57B6E7FF203E4E4E9B9A913F6E35BDD8
5F425590076E7081C9C1A895A90B18587463AC27C7F193DCEAF2AC0FE098E137
EE07A4D5EBA2157334A6502851177CE6EBD086C66E867A1A92C58C7DDD5C72BD
AD1D59C2BEED4407F5F49E596F80D2A109F5756DCAE6B0F10F24DECE75E5562D
E34AD2A868036773F84EE332D6FC5389570C4650F6C56050AE226FB741A42621
7CF610484D0C6CBE4AB9CCD12A3B559CD23921B9C86BF9653724F87A80279C4A
1FC88C02C044420513083630E01C4747B42D4F2FEFDA1EF7CB845B6F92EDB6C9
43CA060ABFD4C67BA67BEEC81D57755DEF041AA95D4B479E7E38A320600C4E68
4A0CC653373F102E39526E9017E88640BFE035F3DA61602259EDA1866C3C8F2E
4C2022CA23F80E917293AD34B72F90849B22FD0B8DB247A0DAD12CC2441B5363
38D5C3F51F296B7E1107D3888772F1DBE04887746F7303DF7BB53CE298CD27A9
2856AF0EBD4059D23C8BB11132F76E70AA107D4791BFF3B44918984993A38A77
B3E9A1251F0BBB805C5004DFF9135DFEFCB2535DD34D28819CE161E6C5A4095D
D1062424B14B1C96B405B917A14DA1DB190835096B21313910D9FBB4225C1B50
B199853C7A3880202CED1F3048FD5B6C3988EACFF13822E1DF3527F063EF5D01
7A1A4801081876970B0631D1D981E9E2AAD2D092200E89715C3AD71184450CF4
F4AEE3D315FF8CCE63BC291F333AD2096FAFAB3E6F1B0871FAFBE2C80951B2B6
02C39CA5F5B14265917412E49D97A246A719BF709AE022B85C9CC2B2E2BC1A27
A88429EE8D09F87249CC2315FFF19A4BD215ECC326132F2EA4B90D0852539C60
1376A2986A9C29F170E31EFA0BA4A45722A4947684E621573E9FAA855BB7DA76
C57F02A2A7E94741B2DBFFF6ECD2A0ABFD8AEA286C20E8251BFD1DD05C639558
F2109FFDBA298F0890CDEB4D14ED75B181B519D65B4B3FE060DE89F066B10352
2713A7D8A6CC9FBE6173AD4915A4ACF9F9466A67DC7AFC3FAF91526E429EB4EA
C04469D32C787E10DF34956523A0487308D32DD6475C6296F74327D5C996966C
ACFE9A4B00DB46076C8A1462245C3155B04D86CBF29C7229A8D6989F936C3691
010E3D758656026EDB994D82568D19409400734C6ABD86F9D8B00FBBC7B93A93
BC6E9A3203E9F2C380E1FD40E504202473F92C8789806B55369146F2195F47C9
4811CCF63542774286A4E936BC1739BE9A96529CE779AF4F1015BB8AD8F08DDB
37E04040E6E7E797E18A2DD75E680E59B65E10453376627C8A092214372566C8
1B0E0F17DBE902CAA7041F3B87C6EBFB8958B3E96204EA0B43A0A3217EE0DAD8
9D3D03C88391BA2804907A5F2719411EE26AE7EB9200BB9DB9DF0869F54D5C8E
B65932025A74711E82909C83BAB6343EB194D3EE7B67D5EFD319DD38E45F5B8C
F13F768D733AFFC610210E8C25B468780455D6B3B8D831B57432B7536411FB0C
0291CBA6CAB108D8C02DF7FFB590422058553A4F7C1DD1593AA25FF7DF76E071
C212892CB04AE2E837E9A5EB0AFB1AAA47584DB1914DF13DF4AE0FC7819A4AE0
D6B3A6DFCF44C96C054C549688BBFAFE9950327CE363AB644AA07992F19CD39E
F436CBA30F8E4DE8230C617B8DE8F701E23CEE38F6DDD2C4AEC21EF57A1AE8FD
BBB4A6D578C2C287675D73153E10D210B39678E73CDB35DCC90BE1542D43668C
D386B86AFBD22BD0819E4E55CAF7748CCBE20DEC1DA560FC1E801F7BB91474BD
6B159F5EC7139E7FFE36130BABE2F7390FAC8F0F3DCA077C9FF8EA1EF1C064A4
27BC895F1F95D5ED317FB0FBF69A5A3DE3B2740406A71B75F9E21C0AE7916F71
FD879E3E291DD5E21A4B970FBAC79D9F74FD6308625B233677DFB2277DB430F2
D6F80153
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Bold
%!PS-AdobeFont-1.0: URWPalladioL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Bold) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-152 -301 1000 935} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB42B05EEB99F8B643CE3
F4B6449ED5A733594F70CCCD7BDB073E630C93A502476CEBA5741BEEE5938FCE
3E77996A2C56EBAE52B2701DEBC95E363E995ACEEDFD1CF8EDC72768951885B9
84F82225B3BB8E9522E784197B8AF13D70B2CD113F7501CD9333EB9A28CD9D56
824E9A3A689741D4577777676015723D17033D2815122B32062451E15DD271BA
6831FBB953F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D4C56B8F52
BCADC9DC83D5C7C45F5C6E60DF9F9471D42B1D6F45EF98EBE41997BEF7D56981
8F9AE898AFA16089A91654ADB0AE2631539262C43BC5206D6CB73867B19EDFF9
024F9C3C7D790946F34742A688BFD183A1307649A36F782DAEAA2D8E581C911C
B42485441FCE5FFBF911F1D9988FC5C601D09514633B415378648CA65F2D6F40
F7CC23901787522154CC33941615849C4E5F2600BE11CE10B78AE007EC0E5137
4C66EF207977C2C2CE5FD8E70A74DA9968C71790516F1489FB5A2585DF9F5E06
9552F391999992E23975398FA0F539A299EF090B9CA16E940104614A4FA8C6D3
495975F6ADCA90522557B3F02FACDAB68EBFFBB8579876F09895D723E482DDF4
FDAE645CD275F3A8DE44AAD1D4C2987B6CD35FBB18312851D858E2F382FC606E
41B7B9393EA57A7FB9903CE835BF1F8E67C15EC8AF980D14FAB1A56EF1A62E14
5433A36160111440DE43D4C8F28013504ABFA5BE40DFA52D34AF251629A70368
73B22EC87849070CC52FE3B74D259E603996AAF50D77304A8B6631C652E482D4
C36A5EA242B3F6A979331BB593EDF29F2D9DC6B35BB39A5876E5378E71CF09BD
151E4B759D53762BB109DE5D452919DE87197C14A816E6970C6476C8A4F1BE28
E6FBCDD677D4379E9D96A978EDA97A0F256534A641017C46F0637A6886CF10E1
EBD75689D3CAD47F1ED6096F825036BFE59A50A550F0FCC978EFE560113A6231
60AE7DFF1BEB6846A97F44BA6196DFF0E9AAAB0F3F34EA25A98ABC50DE2C1812
47CD8A7E2F2BFB159544B845133FCD3B9F46D1C48462A806E9E614D5EB37B65F
BDE52075686731382196CAC3AE3161EBF89944F88A19A5CDCCA280C5A47CEDDE
B826B08AC1581B76BE95036D3797DF9D68406C79A4B51ADF64776AE9BCAA6D51
1362E7A00FDF2C9A6D40F64DDA4B706FAB728B6F6FA9302B4455661480719E97
CFB7A10536081E4E417984862DAD762591F1E352EB919871CFB5AAF2D20A0476
7773AEBDCFF96A82CC2E40210AD2AA6E54311CD8C9738785F5335C50E6C5D89D
00AB1F14DCC973FD4A36F7C6CD3036C824FE523C6D29098B15814D6B842A9D04
1E76B7BC14C0E34060B580B9142C0D2BA97AAB26D48D50A8899DD24D4DF5D81D
9EB12338ADB31F4E0A295D1DFECBE39D9FF712C85C748311C9CB8438273210E6
07B04566B99B40DA40C25FA70652F0AD1ACC1A2DACB18A8108B8CBCB5FDBD2B0
B1971351D1978A1D3ECDBFA157EFA291F7837CF697A189711122AB2FDA7F0F7B
BCAEE514802AB4764D8767A96366B5B2F5C9C7999C479BAF2E1950694B571CA7
36E6FDB83CCE8849508AB9653D3002D39B438092181D6D06E838F7245B134792
1D8D93659EC8BF5392FAB64649D0F9F9C71B704E84B1CA62896E1FA498A8302B
E25A0D74993713AB2FFA10EDEF127303002CF1144AED3709422940A8C36962BC
1D166C17512383CB20C9D806CF810056FFB04FFF49FA1E0A7F252FCB0FDB297D
63B8DC952C181A02D22FB85F961C7CCB8ED31F229F107D0A7754C4C27620D6CE
5925909FD73ADB56D9316A8E0CE4F32521B65F83F15287234F09C3FF1EAE5BAE
847C7D3D93177DBCAB9C0F48855D71309D3C34FF96E72458EC8813C0142F72DD
544A341241826A4CF91C45816B9AC1146B1BB7AAA74FF92F4273B0D437316FE1
9495581736B0FEE0F522702E81A8668CE132E15265271E6E9F502C0B057C5A3F
63F8659F536C2C5F4EFEC4C0CBE41CAE0129E9F3CB9D1D32F1043654FB4E9E9E
4CE34660A7B6C084967A50FB5E53F5D4DE91ECD2A4B570E70B8E61B2E9792E65
10FD62D9B53DE2F45597EE0694AF8445C41A12A0DD5382793A0969E1129AF438
705D08BC04174D1CD50A27D94FB0D2B7767292AAD81E5B4186180C7D70697B73
BFADEFDAC4527982F9CF0D4F945873774ECC50AB47A610706C03FC79A00837C7
DFC6CBAD470825AA8979C23949279587E2295BD4748871D5A349370AA3F656B4
5B5CADE13261A8FF61F2E56C5C273D04F5DE5D8C5C9D00BC66C3DB5DEBD27127
0A478AED9640392137548DA530888E7CBAE692581563B7D42BA2E6E677B95C8A
97EB74105F1F85E3E21FCEEF31A4D5750105FEB6F0C353BDC8C2DB390FA2BF1C
1B653BE9ACA74DD371CBFF0218EE2A58701D1389AE6E5484C48147AC9926A4E2
B057C32C1A64E1CFAD9C246B690DC0D5BC7A2D67CA660C9BFBAD84B1FF01C814
878F0C177F552BDC9BB30FEC9B98B413F0629F86E2A6B742B1E842D5A02976B0
AB740391B20163EEB3225514A76AC74C34163D2ACC0A869DE9837D710A56F1A2
149B53BEA91A5C184A5E49E1153A25EBEAC76FEC601CF4D10F65DAE3EDBA93A5
3472074E1C95F4A4B761F25B493F070730D8E2E582825E379F4A7EDE97DB40AD
CBCE6D67206C7D122147BEF946795C131C157285282CCA4F4E8429A6607AA72D
3E714BAFDE7ABDB99658198ADBC34A135ED91FE6504A1371463674793EB4F5D2
4B8734863351AE6AE7A5833A6A4EE0E75EF619C1262B4249BA9ACCEB8A0F5892
D5BFDC37A921D123FB2F06382136D30198450645C8AABF5A037944087CB2D5D2
60D28129A5DEC678DF42CD3B502C8190F3B63A3AB09D8ABD419797DA88848D48
A7E98A78F95DEC58D847DC65E9CB0E316CC682C841008292750A376D0398DA95
DF8AA168A0A641F6F4AE1AC91793F0254037EAC872D5998FCA842E6F8B916151
0B36B230EF3E93590FA686661BC23D486E538A3026182FA01997F71710C6D3AA
8517517BD961A143A594F2323043C65EE7E84BE6501F47A667304FCCA8483943
FEFD671409BBB2769C8ABD0E1D2A2DA4268B56124C0C42CCFD882CF1827DD0B9
79E7FF63108F44975B7A94588215878E6866C71C6FE5F3B6C93129CCBC9A3C3E
966D3F3B431634B78DBC70A308439D7E0ED44D117E1C942F56B51E615267D9FF
C196AFCD07D26BBFC6568B8E12707DBA8BC1F786DCCB62C844D769594E031390
BC67BD982A9F3BBF008B956BE5FCFD193FB5D5882F227F5E8F87819DB690A86D
89F1155E367016247518178B7CA02251728BEC101B9365941F774F8CB100B1AE
627E15C794F7177CD11ABECE337305BAED12DDCB3DEDC3C10835868AE42FE34B
E7B2574283C60679227412103C1F345C818E91830E7070AB916C85A94585F5E5
126EE16A3AC2457848214D967EDBB1901E7648EFE846E3165BA3B0D405E9DEBF
3A788B0B30F96DE8440B8B6C0A4A50043A59F3B636DFD7BE198EFDB35B331730
8967A00EADA8A54DD0385F35431292FF926171B0E25FC7EA594E01E0E7CEE1D3
F287736CDCCBE2C4599CFE10A6A87789BA984F105C5DAF347E85D1A6EAA623CA
9668E4B2DA0E2145BC70270201D5876BA691F65E7315F87A826B3A258926C04E
27A121D2D3EA73BAB53FFD35C67AC9C3B91DF9A4D753B055B6F1530D4C0E5E38
467F77261BED14BB65715C2D192FA4ABF53BD1A28704B84939C7E339BA3F42A6
EB83353DC405A46690131465B5D17B5035E3216BA57A981556981C6250ACBDC1
812004520E40365C88084EA9CE1E6099DAD342BD2F4918464470E352CD3E338A
74072C9B27775BD49C83E708C80D31BAEBDBA37CE4A7099844282972DDAB121A
040D3D7CC97870F448EAD0D71412F8FABE5A24DE1560CB949D746B5C3954B336
C6A17C42787F97BF93CD6E0DDE7BF69289579DE6BF5E56B2FAEE303A56DCBE13
825F41740DC013BD6E59CA2D7BA2800FCE8AE791EDC71A47F2AB39A8E296269C
90FFA27C5A51513DF558A8B499C7B61587852B5B970CC74AE8A08E28A3804934
FFA3EF4A169C53D0F58074C2F7CFD6306262CE03FB181CF1ED3A07BC07A23245
F40EB62410686BAD6E6AD0598415CC6F25EA20AAF76EC190BF2C39ED925CAC77
38D360D0757B7E968A4CE41B89961BBB7F30C807B959F9270F77DDBC2C87AACB
2B1E4EF9E1A8E8B0D52105FAB1898043C7BE92DE482C8FB5537B85222094CC28
A53CBD9FEEF60EFFA06545EFC162942911B3230B8D462CB201F2F2438217BA51
21CC668458620DB3D381D5677011B275F913649F77D74740BDDC09B2FAEBE1A7
FFB35B3D345C43C74E88A8A1E527B0E77BAE62868382DA7D2E148DFDB12EA7DA
E363C007C9D9AD64F8D4B95A329404758DB39457BA581E7207A071E11D3F168D
1CD68372B55B80B51EEB416941DF533537B33C794385AC2427B835CE2ED27DA4
A0F8B83154BBFE9F13E4F119193F62F08AB010CE72D2EAFC631BC4AFD0268786
19663C9B54C94499A1AF04E3C3F00E776079A79D9BFE1996455987B8D1E03261
159C7F50054928B9493CFB72DA0F5B5B70BE6A24C5E3561BDFF89136385827B7
980C2FE0ACB1C477F058F8460726FADC19D1339CAE67C84563320D69DA7CC991
77AD0A23CFB7F631E00CC979AD410F813119C3FE38855B546A526839B597386E
06C7529E95D407629EC92AE69081AAD188D821D2C11E77A5A17C118BA9C5900E
E7B16818AE5806B1E20BD3E1704E3DF82B1B5D1D8C538669557884852DAAEBBB
8006F05671D17E822A90B30AFD2849F0CA69E8433A8F3F5D67D9ACBAB99D31C6
C2E3774B790CB6222E10FD79EAC136C045EB3E2072714AF554CD4624A9A77900
40530160863E513A5503A807A73D809A4727F34720001768E148C48B263849F4
07F3AA6F845C5B2B6705541D9C1AB4126FEBDCEA477A40D70CAD533AE10E772A
FFC092B310E93D9FB81F7127DAB7906F49D2392BEBCAF12A4768C041A355C986
171849F81E3F4B888A7FB8B81915CFEB8AC95B751A179463707C5451D5820E43
1E25AF037AFAA42C8299DC0907CDFD9B6F6B85885D41A46CDBFCB3D5613381C9
E8339B606AB63B4E0B5A7AFB85939DD3ABD462B0F491A7CAC1AF4F2E921D2557
FBA4F2526D0272FD1B8220A2F5882788FEBDF78B312D14CF0756E993727ACB39
C8D5C70F0BD7C1AAE14543E542ABF55DD49F8FB8E645FF409CA683F517F51B56
1DCC115191F7A5AAFEA270506129175C72933D83BCACBB673EF10491DD190BF7
CA7152D7D8DF40E32CE2AF84092F8C574D39DAA5C0E94FEB2089A598B784A150
1D4A201B1A0B582060391D13C26A4D9B4A9A35927640256B31120CF711DE24CA
B53C624E62CC25DD384DCDD067444272BD8E263B7E189B065837D0B16EF46463
0E2E55C20F500DCDE8D0D4050278151B44011CDD0580E8C3CCCABEC81D8D642F
424FC890C3AE6BCB42C987A026992772DC2A0B06D5E4AB1186D81001AD96E91B
0A972678A8E98315860D63EFE6178FD39A8E0A523F609EE0773F559A2CC00945
A1C0134494FB14D788905B82397BC85BA02C0C027FBC07CCCB2E7A571D97CA6A
4E37946F0C146B9D507EE79DC7A715CF4D65DB2564DF0FB44C63EAACAD82CB34
C3725DA52A528B5F2D416BDFC0CF2B8E9FC3FF3B65E9B480E59D1FDE2AC1E483
016E93727388735E9C7A100ABDFA89BA01957FEE7973ED2D35BBAFF561681D2E
556718C129C9D2D48615CBDC2295B4B29DF4589570B10C9878819B80F7BC667B
94ADA3C209DB6C5BF98E83DA93D05D9AF0A0DBD5145F0FAD88EEB4A340040C1C
50BA4952CFE767074B3615FDB279BC325E1C75BC8E4A791EB854608E0031934B
343C7C5781727051234282198C2DE5AF14BD16A11DFD7D48F48F4A1F549A659F
7E2511C13DB4D9E304CF614566ABC83B428A8A8AEB1272D191657A0FD66E9CB8
99EDDCAC0235CAAEC98B3E1A34206BBAB450CA848612BEBFECBA8A18EDA019BB
27CD0627A8BD695990E9EBD58343D374C6515F27AF94B2A9F6C0113E8778A23C
0900F7898FD9E8476A85F326D0E289B2A414FBE7F8ADEEF74D77049949C2C978
2D0C779718E12179D360234E5B8B2CDF5B0D0FB1E12462EA1A884F4989C120FA
BD61EE17CCC5F11D52AE8F6C00A2D2352DE559933C8B4E514DB0410B1E140095
E8407AAE14D431D216D9C57B7B8A99DC6A5D903B6D5C7CF4C52FD531D0F06699
DA05CFABCDDF91CEF6A119B936E0816F58C1933E7DE3E10A21D59B3FFEA7EAB0
5FF2496F1FDB41674FCE08A60064488E1D1247E0259827EE2C169F7A1CA8B004
C73183C8DA3CB86743DF2435BBD4C1D76F8BDA5B420B5495BFE3800CDCF687AA
6A1FA145DBB201C4FC5A0D8132CCA0AF6111DBFFCE80BB14A8F966F3C34989B1
37912FB38808FCEC5F31DB42D517324A5E6FF1132CD95D3439853A788D60337B
DB7FDECAB2921AFCC55094503F99DBA88C9B126AC107F3AA081661432B6BA1F4
40AD01224F714D57B2D7A784F78EC93D75E8E1376749E11851A0C1E06FCA0AF2
D6F73DC69980ADF31B5DB86968EB33767114067D734E42986DC3C906C9E9CDB8
D02C09EF030A22DD7111C736A372ECE2A918EF99EB708F49746DC25CA93C3EA7
12270F44645B5459801FF7480CB919B16A692D46956F6443235304887DD29A70
A7DF811CA2DC2CDF53A730CE0793C91C2264A367AAEE51606E21029CFF673875
98A32928BA7DE7404079DAC63E885EDDC5A75360352A533B50EC14A43279E027
60F37E159C9766B5A9450A52BD9A638E913EE027C4A7E1065F900D65ADB1B4F4
39187DC759D68E9C85D077496EEB78FD3EBD6A5E52B07A1D5F69FF1C42E8492E
F5DC1605031D2A27257B12A7DBBF495250F59D242293A87EA2F0A50DBFFD6684
63303B5886793A9E4FD5F96C77790014ED92A1FC73E86231CC8F0AE9361B053F
7833256F1B62562F25836D4E77CC9622AA7379F674F5021C01018CFEDB86C3E0
AFA5619256E24E01E49934538220DD788C8C23E5A620F4FD4BDD641715A50B54
3CA6D8207896DBC5AC368A2D56BD802AA6ECE817EE83CF1AB95166A7210FFE66
17ED0227426D5B1352397BC54B1576E2CB82B7D0594BE5C1C51F60FC8DF07EEE
E87EAC1F9D385967828D60CC8C0C1792CEF900D2AB0171C4832D6CD97BBBD8CC
D04DE347E31D551BB63E42B412C38921E0C4EA24B0C9920CC4A8F933F7D7E715
05B73C16EAEA36383A6A9E43A0310316F78211ADAA1AA9954C8C41A1A217C020
C2C04DFC9F36C8253C4346DBC11A9D851DA7E0520D452EB3BB3A4EA8DE8EB345
2F9B9BBB1D63FB280B3CF49BD5C20DE216B3319FD5DD0F4ECD2F7BF079E4557A
A21C8E968E6B1FA0462A4BC304CDBE1C1DB1CF9AB3B12FB14A4C6BB5E233F6EC
3B72235E6C7CC84DA55B0BE4F57624AE4F459A634F6DA28963A23462C71049B8
51524D958A0024F325C40501EA695F3FD5E3C045AE9913F8DB0E20616F63B606
596B22C8D6110A670636BDAFD89171B3A6B2809016559AED7DA6ABB0D7B1BCAD
280AD3A9D3976BA027B723C9213A8DF6D5EB3D2751503D159D3782053293E9ED
0C1960948073F4086B4FB7C98DE9FE8F04DAD394CB6AF32418063C790D6986F7
2167A7B5FCB735BE5857F22DD9BA2A6554DC152B2CD12041A9722DAC7684B9DE
94653069DE2E117AE7668528DB216195659D56B82AFAEE60AE9FB9493C4FC35A
12543D9F4C412CB12DC943EEC2F9E3CCC1C812E9FAC3C129ECD17E95B27CE9E5
36D8944B6BC28D7DD963491FC09A01F9E58E2B597BCF40E5C84651C108F2B62A
8DB475ADE0898C3A92307C352F34C5C6262EE2FDEAD12F122FAB0C2D7D25073B
F52A79FE5CFEBD81172C3E68D48785140A50ABDAA8951194774A8B20702D160C
3450D2EE146531A261A88F5A6753BB9B85F89E84B0C5DBE383B778309C7C7832
DBED600804B7786C21983042961D62458523B7EAE8203DE3C291706883ADF99C
F5BD0A9CCF307F6FD64B552227D3C14AE308A9DE8E06AE4D1A78C582CB6DCCA3
E7F60AE014C5984D7DF649006DF912A691000FA5D2A0BAB6D1988F1CEFA5FF37
CB5F9D33C5F574019CABCD9B63E7EADE6BDDFF63E8D4B215DF32E9EDC6DDFBD5
02C31AABC2F634BBFE692F6E677385F2357BDD37E21C55D1A780DA835D451A97
A6CCA3452149878E0068725315DAF1F2C51C49541E2F429E8CEC0122BB77B29F
462E2BF6CBF30B4EE27C9D13ACCCA8F8162C84F23292C31EACDA7F1EE6A630FE
AA7EBA981EE922863114DCBABFEF915226E9E46815B1F92BA3C3AA21348BE61B
1E62AE931D9B88EB7EC242AD5FCFCBEFFC2E40D1A02DED34D45268430D460AF8
4F8EDAA244825E360D0041D70907E7B9175024C3DC0A2F3D26190EC6A151E5D6
18372ACAEA1EA8DEB77577A4F2CA9A2481E6D3BB07C7092D37CE9C08BDFB7EA2
8F38734EE1A7CD6C98432B560FAC2BC019A171689A9235AF3ECE13FFC8DF9C2D
5213CA2EB0AF73C42F6B458208BEFDD7136DF66DCA59CF25495C7A2E0B15BEBC
A1D6AA1F168CF9A4947F84427A57FDE239717C2E708509B074B1457C8642A2C4
DFC157F03FBB8A380F06F6DB2045A50C8048125ACD450F8E5B19BD6FF7470759
9F6E8A2B7DFBC64B9B88CE63D43E3099EA17974826C1F8F1D76F35C8A34351D2
C1B11BDD1347412F127F58A400D61AE64198B841D7824E839BF23498FD734227
2E82397FBBBE22AFAF5278CF818E71E21974BD8E120C808767DD1F451ECAD4DE
B00415AC2C923AAA9F5CEFFA7E20CC37786A223D607629474214565DD690BE86
152A3F80E938AAA5FA8266B6E6CF9CD6AA7A654A7CC740411FA3AEB4AFA2DE78
E494BBD7ED0CE2AD2EAEC84A33203AD2669398F62B5276DF8E8C53E1D954F88F
5F426D8F9F6EB1479B7F1BA7E98FDC5E9F1A5A686D800C00335286B01C4E7C05
7A1D9DB1C2CB87ABC69AD7C76723E07541CAD1135260F1128716ECF9819BAEF5
EF987898F646D984D0B241863F5E3312C3E34E6718A1409B1DA16AA6B069A65C
6BE2D18209D8361BEA04BF7E30645949F9C8D748D62A468451C07E991606A5CE
8F968F6D998F9DDE9AA52FE0E775D191CA3722D2E3950782EB4F63CD5071D346
C29623D0C888082F3DDEF6558D68EEE57DD7DE2478A2B217EC77FECD10785361
2CB37BCB221B328D41B17F7A181B58EEACB478D3B2E478DE9281B6E20003A1C9
315A1EF423793EBFED8F1CDA2D49D7672E195B09727629C1A24D6C14E6C27754
3D4AA0D04B945257A16BA754214E95E850C10AF3EE307E159C82A4E76C543EBA
4ACF3EEAB4B9AEBD585F3561FC58B2580B83DC0102166269AB6A49B50BFCA99A
425CAA465C3DD484429CAC1A913AEBF557808ADF3E0B2890D204E55C3D6EF69F
C60D33727DAE54DCB398E5951AED115AE9D4C6DABB42C2035536E8F7DDBE1A75
6223855834352478CB917D70F1B0AF793AF5AEC5112D41FB10A63104AD5F9CF9
90CCBB01C6ECBE840E685F75207D2AA2476912EE771037F8D51B8031B5BA4C19
6833F03C778A1A810DCD869D660DC33865B7E7C25BB420CD99C982B6A384D354
4080599C565CAEA48390EA24138E34950BA2906B425FE484270855BC7372D1C0
A39840BFA51FFFCEAE9E1A97661A47326B6308D41B37E97CA25795DCE6245908
215940818C0E1B3883394BA9DCBAECB95B1A738E62B64B42242C18F5BCEF3BBC
0BBCD9C69376AB3C909A298FB39CD6BB24A6903F8AD3E1BBEBE78839E2045D57
945A929B28A9AA2C21E05D767DB0D84C6EE7EAF4E6B898ED0013F468820228E5
DB7AD2D6405874615725E850B6C90240601B19CFC0476BB5CDECBABBE6ADBF9F
892926DFE4B20D41DCF37C16376241EC63D0CF1F4FBF6C97AEB8FC5D0821D407
0F65BEBD55BE6F33121908E46A3BBF2B8B22DAE7BC3650E52286E6F7088BE46F
956B857291BCDA9B6705F0B062A78EFC65E27DA341DEE23CD2ECF4E48D9C7B6C
C669411D14C90EB2DF39A185A80C440A6FDC9D19E8E4F78CD805598AD98983A0
E8FD799EC3B2F7E23DF36325404491F3ACE658761E2B9C6E134712E92D22B750
12E9FE800513071727F3BA34DD1817673F3166E4E5B2AEEBD9DDDA3EA1A434F7
470F4B8FD2C561BC11D959929AA7BE3AFFAB360E40689AA92F1CCC5D961E345D
619E87DC6C6EE29FA7019874C49B5283AC92D1185B54FD2AA6FF309DD058BDC4
F9F63C4253C698B70599153AD2814139E38C4BCA6A17E4CF27BEAA82FA9576C1
01107C02C8ED058B4DCA0E40EDDABE78DC83C438E69B589F20627D88A3461235
BEC1052361DE380EBBFABCB35226E1D6B414166280451372E18F455AEA33F068
47CF9F6F91508549B2B189DD3B5F7A0D4FA04FE263E9D7770B7E46FDAE73694F
BF8A27F12BB4B1304696B15D2D4283F53AA2D015BF620BA5B19943C75A6AC3CB
FF37293AEB972F9E84370EBB272509C78DD4A7B6D83F99EAD74396128B0C1465
8CE33A9C5439CCC15BDCCC9019329D309F56AEB8EF35139DF3A083230C138C54
012C6E004C69E46C9C220B8A664693C47981412461A5CB5799C8151E4BA86E75
B44ABB24CD72CC7B9DC973319C4730E532FC9A74A40B2812488CBB9FF58A9813
080D0D13DF2D681EDF7F07AF550F3C8FBD87C0DC11E591E92E88BF0E7927B92E
17E7B9DA23AF701847D12B80B6A14D2E4803A47DDC45AB8194BE9FCBB2F2963D
2E756662799AE13905C01C16BF373060EEE0AC551FAEB72E564662ED30792FF8
8AD564478CA5768283C7A24C23882B1FE802167DBD2C10D1EADC6DB9D4925FBE
745485880E6AE8A4F4C694BB6BAA955D9EFFBBEB16E9FE518742FBB364566780
1FD1489387E9A74C5A4DBD70BDC351D190BFA2C1B80178081AFCD61C03E32FF5
F226807E09FD39B4341967F54537ECCBC61816D57CA3B1673D402293B12761AD
D16130EE243D561F48BAE3ADE74EF1C45F6C5921F3B67F8C92ED932589114E28
A4E20FCCB55079839D204C21B59E76F4A341ACB628F3C6FE88B51F7BF097E459
9421048329FB29BAE351A07AFD9B77193D5539E15480FFA57A171D13C33D1BB8
1D4C8B5A6F6F422BCAE414F6A7AAF7B0B472230CDA008F37FBD30F6E637070DA
6B60528565F061978FF3C3ED33A6A88112BAEECE0F88943A5D20C4D4DF5E7FCC
61BEBFDA248B4834B13210067E9C64F38B40C795864961669C3B1CC3B42C4C85
52D197D6C1D6693EA252427E636BB34CEF6243FA3DC46AD166951F2A9A857B97
F92D9FE78D095885B2432883F1ACBCA8789AE0B8896B8B3A774DE18558D28717
686EA73CA41B1667D83AD9378CA55306C8D08B094089D7D1AC997867EB021731
B3080974204043938E74935FC95173C09068553725ABA9423F4B268C58072240
21A3A7EC2AD8731ABCF5D2C83F2A056868B2A6D9E6ABEFB5BB9474B6C6F0EED9
A95C98B873C56DD48140DDE065ED144DF30392FF239E3C17D843C22C9CE46A5C
17CCAC557A84F3055BB6020B097082E7357DEE1D7CD75B391499E3EACA63C9F8
49C2E25E629414ECB8A419AE01618BE848AD295B7FDFC53CB7CF345C2224D7CD
45E83F3218748C2AEE3157EE24D0B53BF882D33E5A43EF201EC0B415DC701E8F
E4FB51B4323EA586CA1B50B9C689AC813A3838FBF0BD10A439B907D3031D08A9
591029380209D4C769FD636A4A1AF8D9735387938B15A9B4D9AB149FE14A7427
E3446600F4EB1C411A4F04267EFF030EF48F8A72C42BA53B1448781652355A42
1A62C9467B96A3F5090D33C6D91CFE074BDB314017D4303EBE3272D35CCE59BC
F1D2DE1B7DE9B61695E4C4994DD8999B652E4C13F5EE0372D9AF7071EBEF0A2F
3EB3814AE30FD5ACBF8E2933DD9CCB8912D5BA2CBB7E148F384AD92D2DC5D028
CB356F171AD52CC5CA99FF089FB99A8BE5D537812E742B30B5378EDF51DD0185
A7C7FAEA71C7CBF04915F2FF9EC2707459E086ABE5B1AB1351521FF9C0FD44C9
FA8717CC24BE83AF25ACA50FD7F3A65D2CC6349B28D0423EE88E3DEDC9349400
32084469D20F8F074A636765C879766CC66C77908762268C0275C65C96654FE8
FB44AA6727002D9A461C4CD1474E62B3B5ACEAED8D937BB80128A206025A4950
8264D989B3ECA30EBD2818EF10D659127BE7F975736224A62048A1426F71C770
A9DC6558BD678FD7D6D8443D55A4C451BD676CCF0CDD2A8FD0DD8977F6B5C2FE
94213CF64CB4B9FEA55988B9E8F164F0D51484C0CEED662B5CEE3C5D779A9115
CEC825744C753F7A15CDF9AEF95DFAC9286BCA3812C528B965240EA0D422AD64
7B439BE23C8B442A459A20C6C435E49D56373566D625E806108E8BD69F8E5C97
50C4C9560E2AA86B5802682F224FDD6C8EE886AA2CE199DEBF7F28A63D57E2C8
31A917B4A557DE976103D433EB8880CB521A9588F9C1CF08D749F96AF896F9B0
9EF6A69B12E7C09F135883D1EEC888201FB8CEE50CEB150510F7734AEB08FD7C
C331713F631CC8748B2A16021A7341F45E073AE11DFA8EDFE982317A1A58B360
7DA66BCC65FF9F12165FBA281843D43732A4ACEEBE28D5366D435D6F8E59E3CD
4EA90A961C511A75F6F0B3754F3805CEBC93384B1783D20A075C4ABF1A15F072
83BF22A6110CC0282AE1058C1BC7C9E09D4D5476C4BD8BA6A313DAF0DF5350C9
93603B40D9B86057C1C8C737DE960B7B45EC500309ECF1AB95682AB3BD762EB1
6902C22FE37EDB9DA014C908381AD5BFB3D1F0A1BAE754C1D89269E888FBA1E2
EA46D91DAB0CC0F24393EFC2D624E0C94A436B35A3212D82F85D0CF49592568A
A840A52A50E77974FD5D1B60F01C17829F0AEFE19D6315D3824E2174E4CA8686
98017BFBF852151FBE83D764DAC5F85A6E3825A77620137FDE891CBC7E04ED9A
B88E52F8593A261FB048749762636EE96D7100928653F4AE12A88B27F2374F56
CE241F6E1DDC1EA1511598F5C4D130FE6D35130156E41011BFBFD99F923FC06C
F874FF104D6CAB23E368320D09AB3F4C709A9C3B18D46F8198EF259B38D0007F
6F99B3BDB1ED24C2ADA0BB59C63E96BBFDD0C2DDD8202F9057998B028DEE3813
5AFF220A04383917C5D4130F4B961B31549DB4DF0C90A4B1E46820D9A3A3579C
0DB087E6404944973AA4E097A64BE9215FA7CF327CD80AA926A200109A1A349F
07D5EA8A7B1FD46B57AA6771A8DDBF4215156A99395CC93BD85CEBC5C2394636
9BFBE93229D3F538C7B374F3B3E6709C905DD3ACA4169021C71988F99DB98959
208D668C326771EB8DF705D961B78A49BC421B7C7503744611847B424866C21B
8E3A9A15461C89D25F4667541BD17682B3267FD63506A215029DCD3175E5DA1D
BC72B296B7581D44280DE177D673F10DC639B5F9E5C6FD0976EF277DE6B245EE
74A3E1345228CB95C00962DA7AD5437D34E0DB9B923A97186C0612451224F64A
70FC5ECE479B1FCDA066808B7FD9EA60234AA0D59046C242CDC03F8BA8936306
7996A58A7348463B36E38FC1EE19744D1D624E0B98B8679414068DB565D731F0
6515CD7471054DB65ED3EB20021EEE92D9599B7FF18B3ADCCD66F9F5E3AAF3E1
CEE1DA164CE55CC2A2BB87E8E927897CAF72BB3CF748C34C16E6CC4C47EBC278
1DE4F39DF4C587F5F6C09AD642C67E902686F3C0ABFB18E7728D8819A4C47DE8
57A617129B0FBEA433C3DB6FAB35BFE1D122F275093ECFD398FCA6D714187CC1
2A2B16318F9E1D2B0E9EC134A2C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 60 /less put
dup 62 /greater put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9173633D9B50449E0
F9026E7A4CC1A3694D6C030E5AE53C0DAAF90B0046E22E14FF2787AC8194C42A
4B8846856AFE4CA20940A4E53896A851344E2E5538B9550721332077A972C793
89CE532A20FA4A52F80B5D7EE0FF0915523A98E98B71B8ABB4D7F35DA6C05364
A8B3D5DA9B1716C5C4D4402847C5A9BDA2F668709D51041BD566B7E1E675DCEC
1AF4BD172F05A73329FBB30BC7D1D7EC85FEAF5CF1ED6BE70F7526E115381BF2
47D955C5032404DA2FD82824C73F530E15E157EF023A2D9B50F4516A611B3F99
3803C6EFE49E08AE983B4D15CE6699B5111C0A45913DE61EAC437709143AF4ED
0D5136428AEEEF3776F9BA48212963150132D63DB4098AC124EE86C3AC7138AF
B90A504A1E15524BA2662D7E0FFD6377FF7CAA3B6113DAB8AF64837C4A99D99E
A499EC597828133A4C6421E0707E7E978C9B2A459620D0CB189775816D1421C1
87110675A765C25DC2FB607ECCD8C53F705B406932F41A9DFE08
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: URWPalladioL-Ital
%!PS-AdobeFont-1.0: URWPalladioL-Ital 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Italic) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -9.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Ital def
/PaintType 0 def
/WMode 0 def
/FontBBox {-170 -305 1010 941} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB5F973DECC54C8130ABE
C8E23C8067FC409DBA23A469DC7C6C4F7EEDC3DA588EE3C5B2829D3E1492978B
F91C30C1912183DB62BA489418A68C3BD44566603673FAFE6C3DD78FDFC1F6A0
840DFA44EAD8A5653DDF2FE86B8BDF672707D2AAC76CE376C2C9E56EB95F30CD
75B1E312BE777EAD75EFA21114335130DDC559ACC1A14454397984D624EEB43A
C7BD688E270025A34A912884DF387744462E4F666099415F25F86999B31B0588
576296579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FC
F88AA072958C75F616D971AFB3D9116E041EE7B66C39DA4481A97509DE7AC156
CB43C5A85501E66164E5FC61F9C64EE138CA0D9A0808BE0443CF3FBAD13C63EE
E7E39F1D385A453E8095DB2FF5914A611E11BBDDB04D6FC55D51B08358EF7253
9B8E1FE26561CD5CA9661C91D264B3810A37BE373BF66FCB021E4407375ECAF6
BEDC1561D701A5885F4216EC592958C80DB9B8365D66A8E075A88782C4BC6161
F6B5246F49B14E4E086FD10E01EDEA5D95A0F67D9F6D16C093CC98116B652B60
04B7FBD451E536399DE7A8D8B8E0740228524FA5CF81735BBC72B976F955FB3F
85B91278057DC1FA6B42FF84B9F267188631A0EB7B4456653620151073F4275C
9B80D71B4DA3EF23BA2811F90A844D2D4A18C2D3E7C75DC2351F250E946C49EE
1D67BA5377ABAE009B18599825EAA89BAB6B56BC1177B32B4863A004CC7448B0
27D9F6030ABABDDED61E95CF4D02EA9170BBCF04E982FB170EFF61B5F0A3E39A
E4596CB6B478F6EA85D464460C3E3C301813928D1A4140ED2931D06F55DA1B92
575627B7363A7B2F52C2EBCB003F3168ACEADBC274B460104B32A37A35E08E61
6B4C58ED4BC82DA01AE19F2AFD0CA670D4CD12464788C7AF3C22AAE6B2B67FBD
72227163E56D6B000CA09205E5DC3098C8AB945E47D05FAAC5784D1EB47CCBB4
23527AECE3904675A8257AB220BCE2F63DCE652FA38CDFCDBB8995B3486DD3E5
BBD096F39E2EACF05F39269A9DBE9A131A615BF357C65E46F471962CD4BCF8D0
FF4DA9D4AA971F02A87587DC7D4030E320C57A0DD5731F0E395F452D49935065
70FC63D8AD2EBFB6B8C0EFF6D4001081DE16433B664AD0FBCD335C4F7DAF9A7A
C45CBEF2F835DDD975EF68B4705E1C75F856D7C269CE9F6FA33793A8753A7F55
8D0C28196A0E97DA2C45937EA2BC85BFB6A704A0C274D99B8FCE9BF97A6AD1E7
D85A98CD8D71BA01CA74D342A75088082B63D9634CB7956956787431C5F75462
EEDBC507DD0FF2E971E3442C0A00DD938476920CF67869A9DDF5A29AAE443BE7
9704632DF95672602E1556207B8E2CF3F3ABEE6C0639283F42E7EFB30F910EAB
7E9A77A1671D330CAD1BCD5F7FBC20299D5C6FC1EDDFCE777B796C1876468FB1
13F2B977937E70B7214069A06007D9800D7D1EB275BC1AB6F8847D80E4BD4742
69F936D2A335EBE3AEF4F851D5C428C762599A0067E435D943305C1AF7D1036F
A5C7935303AD6D0DDE22CC3126DA2662EA1A884F4989C120FABD61EE17CCC5F1
1D52AE8CDC91703D3A1C188354695617AF56DDA1FBC56DBE822661975310567A
38E881907F483CFC9E1D0D4D02C5033728391BA228211C06AA1096232D7603A0
6ADE5123765837DE68CA029715A8A1D46C067DEFC27FDCB21066E217CC46FE08
016C3DC5161B74DE04DA7417CD8688C1B8088785EDD9C1DA4F9E9A3C57F31A1B
749B59B2A5C1CDE2B37C804F50577B6D1308DD9C414C5B609E8518074632F6BB
0639E2AA1DBBF34708FDB809230BE0D9707B7DCB885D6B04DF891FC807DDC7F0
A7852E3AF05887FD5142811C2572A1D4B9F9539CC6D9F1251FBE08FB8C4BD040
36C06AA4752B076F4D900C20F1477A18C5FA931ACAE31CE6B70C0C19FF70E8B7
DEAF2DEBB2EE0FD69336E7070E3EF345D6D1EDF0BEA2E6B46DF617EF49532845
7E8C003F22957AC237C68EF83E5901B9DF69318790CC766E7D53451C02C6F33F
D2E01A6D58C4D46476815F98C8B106FD26F95949B0ECFD4473683CE752445A56
F3C953E0080C2F6E3F38A2044B1C0EE6096E008AD67226A9ABBB491C413C0B0E
4BAD9A9260DD5D895AE3276AFDECB790793CA3F35FECCDBED653F730852B641E
72BC01C639A25CD305ADC928DA5182335875E90BB3CA6110F6D46D6259BD746B
DC1BA4A84F7B70846E33CE5F285F32FC4E551CFBEC40920F7EB24EC8037A8BCC
6C38EF3B8F2CC1354EB9EDC15EC6ECBB7011BCBE5D5C08C85264A5B585EA9362
A11AA9B3D13D06C96DDE3F4C9C56E6C9F1B23B7ABB3F13781C6F65C00591A0DC
2601FC4F93A4FFB282036F8CE4AC5F50D320F56C02B17A2A6F7BD94665B11F1D
1501F7C4FF2686F1BF27180E6F9B0098135C9F7A05F120B9638E9DC9E65F758F
0FC4FD790127BDA1A81A0D8E75880EF3D7798AFB3431A9C936BD3F229799F665
6F7BB8E67379FC4652ADF65179AACF768813DDF7E2AFA021A6B5EB84E7D08509
54AAFE86C0ADA4431436009135FFC380700782F7B3423A172FBE8AF397729222
F3B7FE28FA141151082AB1027A7FBBCA06E09D438052E27B75787AE81EA98B34
D8DAE8557F2029FE2439769D67DEBDC8AD8C861E90E5322D95E0AFD080DA0CD8
0D8DF7EBC89DBD03C02B591D9032CE29175A0E7D978742CEE7D5CE5A41AD7F4A
22368A6417B4E3AB988FFBBA9B64E0A2CD60D97715676BA67CD7BBF2244E1018
5F6D79C4D91D269C6E4A2F648519587E04D2F8464643A2D70200CD8668AFFE05
680316C380B52EA55549ADDE54055B8F3752C3BD610AF3497FCBB7C1220C5FE3
6799601CE72DF8F2762BBE01DCDD4B660B0241841E2F7BF40CAA5DE3A7304860
46421233E796CBA94DB00652C28C635379A0716AE840673236CD23775C4D3321
4EE977154927F97628D12A7706ADAF1B24FEA02222D4B0EE989B48B94474AA82
C773B6CE6C90F7420DB2B423364F9C248A2A6CE15DD351DFCA7FAFF1EA78D0D6
FD12743F6BC297629A45D638AF9C9E4B9A8A99F13E8E0E1A1C7666BA3374A10D
B34E373B20F89136385827B7980C2FE0ACB1C29BB969C1C36C72AA60D2759B3D
6FDBD9B88CC93C4CFECE680552827DA0314702BD0D2112BB8C77B745BC0E8E8F
AC3BB6924D1D2819A0D46C59B43C09A07637253FA4C55FEC2B062491590FF01E
F0F36E918D98CB3D0A55E4B99D27A83093738B60E3F89F806F12DC716765298D
BBC12087570F4CB1612BEFA1CB71BC1CFE7B4E92BBB0A7298CD32219A490BBEC
86A7F7814279A3E7C9E61D62CE0FCACB72E14C2FDB87A97F47425E2F3BE72E4B
676F7A211F72225DB3DB146BDB01C7E44F6CBF7316889A602D35C37EF36DEC95
AF26E9BB00C1B869C2FEB82AD03AF067FC6D600734F599392343B0B7464966DA
6D4D3C67A1F5D60F9D4C78148EDC1E60F2CC880FBCDAE2DFCF164BB944C5F227
B5BB965FF6A3B63AD62139733DB76F393B40E6A832BE2232C38E02E471759DE4
06C018F9EE020A5F6C02176DF5B3F190F10F9FCD090D1108CDBCE3878E032C86
3869E53D7A4F7893FDDEE3C61F3EBFDD15A822138A17ED158E4399444976F34F
301F29BA4C8D85C255A2E1DAEB153809B0AF19ED917C49C7460B2C1E8DA8866E
5269C7C144DDEC907CE0F426523EABE4F77143EBD6C7A46F7076CA4E4B0FF551
ABBA11FC9785DB9CD2CC8898F4F9B1032905B4783C306AEABADBB9D5FE2EC20F
F97B1FA63FE456F6ECE4D25E13A1FE5E1284DF66C1118DEDC2FE3966CDDB526E
A5A1CDDC284C91926C6F4103C1DBDCD8EAC07B47A63087CDACE346515478A82D
B816E0021504A0A081921EBBF6A5C4C13F10961922A191239DE0D2663566B0A3
39784135EC320D9B0535716D2678A15E04DE5D3913EFAB4A7F11D85D5C4951FE
CB175FF0D1EEE5CF48053D8CAF84AF17BC6FB594D08627FBF45C0162F88BF9FD
176CE42B6E71B380136AEE6FC7D74178BA38E483C43EED55449F887ECE44361D
A1B64045CFE9CCE340004E4E80A6A33040A817F56BA1F5DB8EF883DF4146AE16
0530B245B09731A997BADC8BB42D35A6E68E855E77E0F4DF71B95FB4318D2713
70D2BFB84C6590E5B9F82E2028312450B8E5E7F182D41C342FEBB156708772F5
3043F9982BC011D6B1D281079C1EF28AB9DD2CE9FA739A2E6443BDDD8AB8BF48
06C61442F3266D037E1875EADCF481F27673BA7F253E0B2337E314769D0F7855
EEC149F95C853E0ABA4975049E84F39594F272D2963F1A9473DDF6254C62013F
D10333512A426E2D0442C8F43A227EFC9EED8515BDC5ABDA5E20918520814069
039B2B119DA89FCC5D526829AFA5269D435D1F0B4B9F6D550FE6080A7F473550
4B58E07898EB92D650360445C933A94C5CF53A7A6710CA40677787776253FAF2
2438CCC1953B78E7D9D431A1B5A04A73AF4A83C3AE5081FBA297938A3C986ED1
5B14730C7BE579410024B91BA43BEB612E6FC3DCF522EE4380B6F4759A563EFC
1CF8E9D0D833D2160643FE8BD1B2662AB55A70BE52B979D3847F7B5095BACD95
228E1F6EDD85621B9643624796B3364E9B25F1235800DC8E790D62F3EF215E55
9F8DD53B3FD68C933A2A880F5163D1BBF55D50FEF0A022057680CB321450985F
E13F6F382B6604798B983C114636E7F9131E80E20D97F5FABCC34320D616D9CA
01B23D71CDA3024FA1E7464AD50FB5B2358B7FA0BDFD7179EC8DEBCE8978B2C8
F8FC540CF426154511411D3F6FAC9E411E299E77A4036DABEA6258622E2221B7
3458428E34EAD1EA97692BF4FB0EE16D8FEDC91F948C95D13425BC1A0A79148D
C1118469BA9A067DABC0B7529C9FF7C578B5B9A4E1A8F60C1BE0B4D7E9A830E9
148B0D99877ABE607DD37F1519ADDCA02DB9DA8CCC5D4C881F3F045C75CCF036
B34D53F810C10798B24D74C42F022742244B74273C951F43DFA77FB3C466C095
02E182EAB0E7A4B12784356941A50B627DCB9FEE023424108EEA96FB28B8B56C
321D130F65584C08DAC60E060590D7C1EC6838CA1ED9BCD580C2048A84591DF5
8AA36A33F5E88C00EB13118BFC53CC7099A77B52FF9664864B69B4D755B4AC72
2B1B0C6BC1A52C3E2F76052C5884B800BB8DD52CC27DB2D7A8B7F8E27EA9E801
03A4F414EBB86790CEB46536412EFF32B55E10FA59E85371F39E211311137BC9
793464B8FE922405C86CD80EAFC814EC52872AF0C0472F0CEC6661FEF85C14B0
50EA0ABE8F11F7F211B86E827E1D5139ED8A122CB865794B48F01D2B6FFBD4E3
72B3B85E00C10EB6B5399326CA319F92C2FF5E935A614069343E912B23EB3CEA
72D93B0DB392E9D5787845762DFE0037BAB90A78675EBF01F4798FC6992CDF23
B09789A0BFDEC39ED08D724DEA93FDDC7294382A67E90A846F15AE1B73C0842F
D95BA302D50D5EE4853D1448DAEDC00FCD050DCE507C5ECA8EBFE16F814291F6
EE5A1A4E56EEDCA2E9F0541E7DAFE4F0014ABD9F2A952C41ADB8732F5EEB9BEE
CCBE0374F2225EBB1F9D1676D1CEF5245B72E9CAD2D3D32E1196F527D4E82FAD
AC6C38292458961C7716671EA29397FE48E940EC0639BEB7F11F2E56EA59E9C2
459EEA5363273D6CCE7DA625F13D9C504668753AA079E9B24F0C39E903949600
14969BD78FD57BCFE092F16FC59B70F6CEF8F7CC85EE25AF847626399CAA221D
C09190CF963B3E1DB3A1FC467F98A7E2F4511DEB9FBAB2FEDC321C756FB42435
8EAC006A594AFCB839778FD0925E2DAABE74CDF368DEA6D43A6C9B262C5BAF4A
D6E854F5D7A6DB6833B9EB9ECEA7123064ADA03DB2711DB0E843C914E254940C
38A317608B21DCB3F0EFF444C5D0D23F518D05ECCF944E2AA068889CB155EBDD
13C8A1F333F2B33D69ABE23FF62E75FCA07382E21A4F9D8814CA2627286B95F9
C577D742756D99EE05B662DD7F2E826A9A3C61B15B19854C1E218647D9869FF9
CDB0C70B906F866A0E7187E2D47864CCC010B3B2C87DC5FDDFE574487AC5CF60
0CC1CF6209ED53745660C9BE39CF2142C67C105349D8AACE4044DB542D2E126A
F3670D849E6B52B888C64218FD58D04A4E34EB62B427CB6F6BE44FA07396AFED
4C1B17C2453DBAE40144A71E5BB2521A1E37E51BD332422D879E68E037DDC2D5
FD7B09DD8C01A0C607F80A4C94CADDE0AADB0025F67D484BEC477287AF0C8003
3C39E68152044A37AFDD817C7C68A5AFCE8763BCB8B38EAC4B0F000C5AA995C6
20F6E5EAE904E7E674B1F32AF6A71CFE0E4809A569EA5A5E748CC69917EA139B
2E36C8961A8CF9B3BA50FDC2EAE4A1B84FD4C4AA8F058FB25BDF285FCAD3786D
90FAA8778FBABE48C5CF76CE7CC67A186D3029AE3F1BC3816E6267EAF4DC71D4
FDE8251B5C7BA4C53E71A504255AB985B3705296B704C4498FC3215637FEA7A3
8D2C0CAA42BB865064E5F0147D68C3AF6B041AD06911214942404C46943A769E
0439BFE72AD5FB1E0B3CE02FC2B1480D330FA67B3C4EC6BB89161D5E1E289063
02873E1B99FEFA8049BF3B152514432DBE046B403E88C880638D4794E5F4415D
B718240EDFB5373E87162626F050DBBB4532A284A99086698C8AB239C28E1636
C8D862DF2C658022DCF35F881AFE14328B25FE0FEC9B8619FBF6A92C0B79A2F6
8094B87A07E5FC1473E7DF963CD472A8461661549339B595022723C15799E53C
C35CE026D5E788AACACF1B28C8C2396D5C8CE61D98B0DF3B47540C3C28B45B30
772EE9FFBB8D00718C343010FAFF4E36E69AA853466C71E506B0E121ABB29313
09A43186B094AB730392CB6C88A4648A1A40235689929306EA078BC3067FA0E5
D929236579DAD5A6BC105B8E6211C3F4C31432A5AF51BF06EA53C4CAF762AE30
34382498160E4B54D7D471B3632269484B1011EA7C2BDF7DF3CF8A0C497C8C3C
8E44E5FED61487B82581AD47FE549535FD86451E494BE2FF824966C0EA0E6150
DEB4AD87484AACC1D06E213DA6011525AE1529F6870959AF781CE632A2D02DE1
38E69769D89EDEE612AA58007A0F48A3BB9616F2F232C2716F1A29938DA35324
1495E523D4B16F4739DBD89563A27842D60CB4A26A706440E79F43310E4B9C2E
DEB16196A4735506E6A03C7A805C5AA651DFD7BFC5FC1ED0C4EA3ACC3053926B
F4350D36D28E2E8B90CF14F063989F8A0183FA16E59C55091C22CCF313C333CB
F22FD740F88A804C28E32FB3BFF145BDDA844AFE41C6709E48728C3613C0CA57
A43E7425065D6CBBC712B23944236E51C480E219D733D37296CEE1118362904F
622FC22656FA5F346B7215B7DAA42865754B22A9306A4143F93D6E80CAF65DC3
9BF22096860C1BEEF6BC819027F403EBA7BCB867332D8273DED975BD53607ED9
4253CB78FFAD6ED43CA74676D49949C3EF19932A2029BE9D741D184007401909
428E61B06606BC5EB52813C4291A716631BA515EB8D563FC2F876B779DC3E8C5
53F076877079FE2C27A1156D811726E41351E349B6167CA5058EE84D1258EFC6
0FFAE675408DFCC7E67C946531DFF69669CFD455CCAAA18D480444A0BC0B30A5
9B8FC8BF6ADF871A58857A1353C8F738AB415B034B567F367CA2E2A8AB4936EA
7B264BDC30938BB82D3A6C8A7A5067A7C564BF22F7B887012E1F7DE4E19B4429
446C0981B34070CFBF71A5FD3005929E83453029710375D9F063B335EECF830F
146463EA4A2846F46CA78C897700C09C2150FF9F4296940872FE44C9E971875E
956600DB7D9BC9E806B2B0538F96B28C78EAAC2AEB8E64D3EA95FA22EB08C999
AFEDE6F666C95BF266812873FEAAF44747FEFC5918EE391ACC2EBE5B50A07F10
FDE34C570D7BE76A496A58242F51E7321380CEA33610E47DC498C33F37E0080D
B96070BBA2BA847009EE4BE2CA1FCBEF057DEFE3269A3251B16E5C9371B36587
CF8A9FCFE2C2D547F1B703A410FDAE034C078C70A94366ABE1553D2FAF26EF40
5C4D00E4DD9F83370A2A1FF65CB9568AA9C68C085E87B32EDCAFFCED2FA9A164
2E1132AD120B4BBD285DE4696CB03F7E3687C5F7460B6CB61D42D04C4D41FEFB
65AF81C51D429FD0A49893FDE6CCA82DF0EAFE9AD88A24905F7DB7DC8097C0D9
B0FB9D341DC46D7041C10BB06215A25BD1913C7954B5C609C5971EA9FD8FD240
463F1A7D0DB3CC6395217A08454737062E0F3F132ED94495BC1892BB688C4FF2
8BEFE901F5D50E82227E9165B5363270BB0B7419F52B949B4107C80B90C45CB9
FB0D893F79F3230443D11313D6EBB9319DF39BBAC7C1663075E687A185645A2A
6D34FB459431677C0029683207E4F685D084DFB3DC84917CA80C31C4569C56D4
CAA8B36A21B11AE0AFA9BB07757F02EF627534EBCCE0AB011371A1F347764850
0238C40EDAC04F0160ABC6E0FDC9A90A49DF2C1C539755080AA332B334814FAB
BEED0525C116ACE245596D4CC442AB836DAC4807A71F47D767D4558876E85ABB
0B8396FEE0C3327CFFEE2EF481C400FAEA98F62F02633E0F85A780A61DF25521
2BDF6706126BF167630971BC01DC641766DC254D9E98EAA26C73968C2409AAC3
DD643E0EFE1857807BFA0B9013B50587AE6DA5D759909821BB1FAA64201B5D90
923289ECC54611D9D515EEBB7192C63D22D02BB2A5A272729611630615DF446C
732E191427FC63A7A675AE7AAC0166B74E55C113EB226EDBFA60AF43C7D37311
FA695AF97C0BCE1F67BC159176BB6F1EB52D699348651F043D4950B25AAFA8A4
23ED3D482352EE710D6E40DFFD4601D20C09D69482F575CF89AEF42714C86EFE
0E9DA6FA4E50F02622651F1241C6E2B89D5A96BB6DADF878EF8FF5E68E918D5A
31CAD2D60599E9024B649B0EDDE106038EFAC48F8896E369A28BB4800C8A74DB
71B80A9F2FD4668265CC3BFE10B6C23F1C7ACA39A6117CE4DB91E197AE33D3BE
3A0773D0F7BDD47F29D25A92DBA2AF88984C142C964A912E16BF834DA5B13327
538D51A4BAD1812A8116E239F6DA2470A8B638AC7741273AE48C115274A883E2
C3CE381D534A63B80CAEACF1E3EA8C7A9EC5C3EBD316A8E3DCF166E1670F2EE9
B93192C92AB0367DA074BDBE05FF81D89FFDEA459395AEB1FD2A2313C4619C39
24D6C3390CA3B0223A63BA100BB2B4714AB955DA07C374F15E6174AE1AE0260F
B4045602F74D2E30BF198CA66F4C53747C6CAF1B8E60B178AEC588C01E706541
533255CB46F8BFDF5269D2C3350903A9F4C49718FCC58AEA63B1DE7CEFC00134
596638F0312EA4E4889A6B53CE50F4F1AECF0144E6579E6599F206794E81AC3B
80449F32B5B48CB832EA37986750ABB9E8A68442C785AFF6845290FC7CFA1034
E81AA0D10BD1724250681DC8FDE80743D121EC8E828645A6332A5F00866F5DAB
4DEEF719CB866EC0ED76BA29A7419E5046E7B2BC22B785B7BDA3A81EBEFC4BFF
25CD46CAC87F3BDB4D3E4EA75A9B5CE294F90B667854BE23A7CD8FE90D1C356B
121B5668AE1F190F3761D2A8AA3C9084CE283441AE055611FF06857516AB6D71
E4B08B6F37C170210C3171AF9815FC9CA7371C5A284EC77BA2BC85BFB6A704A0
6DC5D684AC3F76F713013E4ACDB79276703CB9DC0B594681132F1FC2EA71CC5D
B9B698961EBB5831E77F629D328622A872559AF2C4218BFB8377112784FC50B3
73B03F994229C9CA38D063EA06ACE098B180D301E04DC621CFC39617FE918475
536F1B392DAC2021AE0B067F135B7086C6143A2769EF2A30E55B902ACC35DE10
7B325E5952FCC982CEA8020B8EC5ED38C42A942D3D11971EC9198BC03CE04AA1
D80B8931A97514B51B3D1B07A240C6A654A44BCB84D271C3EFAFEE0F00BBE790
7530DE26A132B4547CE737CC279B7773E57C2E91263C07B139A939FAD1168762
52148FF1467280A3B9D0FF6134EF0B59940BB7CB0D1E26D288D3964BFA9443D0
7A72D6B2852D83347980F25666CF6FCB65F0F77197A12EDC7CE4BFF932AFE02F
FA3D1B46963E4F3B565664A95A5A210272899DA909414206EEB7B4A64196DBE0
80A59E5FD0E7BC75820BF3FAA617902520783229C00E7DE9C23A8AC0BFC32DED
ACC563C97763F6B9A1090BFCEC9C243B90910176478E1DF25E215AF34582837C
8925D858F7EE4A1C769CE1FC1845DD5229B02A4E0EE1900CF5ECB07100B36A44
D4C920AB16CFC05EE3BBB904B0E9C50642C0582AB53E7B56D103AD816F2D7DA3
5DE25784EC493145125CFBF1A043F9D5E32B126A7914119C1AEFEAABC8540D56
6AA5793FB658C9AEEB43F819D977BFBB0B051340B7654A68507FB66A937966EA
D0D5FD443EE8B7AAD8C346DF469A863559A5E541F20DC7F833E72E02D586DCA9
A6AF6E4DDB95FC21
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Roma
%!PS-AdobeFont-1.0: URWPalladioL-Roma 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Roman) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Roman) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Roma def
/PaintType 0 def
/WMode 0 def
/FontBBox {-166 -283 1021 943} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB756B8E2BF5B37627E46
DAFD4A4F741A859BB5F7D7C77FC7AA96EE6AC93C06CA829B81FE31E32D59C6DE
B1BF3B6CCC5C3C9296DC86D01487F08AB668F656CDD88EB816AEDD1EFA47F014
FF598E78C978DF18F8F66057351BC96B48015AF2E09E3E318053E952E9AD4037
BFC7EEF9CBFD7BC35746565B7EFBF241639793AE357220843147FADB929FBD24
01C88A382F00BF79554D125C543455330002B0FE6D229830470C78541E78DAD5
3E7C1A619B91215AE025F81561441BFC9ADA446035B8EB9C3D69BA746AD0CCAA
049D1FE4D905DF3F48D22900E02A23FB23F6B571DDC8B2CF7008431C1EAD7F6B
D92A2C42CAED94F9714F44E3CE31FBAF23A064AA2A7F13D6E5378E28539F0009
323A0755E58BA7564A408B142C230672A423DA6A6E54ED162AFBF8FADFA75B0B
FC648D5DA6EC31251B62B9F619AD9460876EEFCB8F9D2369CA3055820306533F
3C1D47D5A2EF97619FC2C780BCD9540A820748369FFDAB9D52492F130C0AC3C8
E0C87377DA6C21F1DE429C15AA939877876F84605F6785B5ADEA97321BF29DEF
3692AF535EEFE801975F94645272142128A3FEC8B1BCEB6E57B83520B5C4DD69
36DB8CDEF6E49B8944CA31C59F8790CD3FED58F1182D9AC6DCB2D75B4881B430
C67DB769B4745EA54233CDFD5600BB2A96209A83FD04C13D4AA4AE27DED97D25
93F6FDA5F64711EC7A2899AC98BD8D8879A6A348265832994C3BAD80E1D12291
CB05924302B780443A76A09E1C27E8DCDCD87FFE3BE17DE0421A47733C2BD723
9C876942155834190F65598810AF8CAD9842F8A1E3BBD2AE3348BD8FC9189FE2
ED5643EC4D87148775121702EEB7639ACD80EF4F07542BBBC09F98F81FB91A1C
89C691BF38CE4239B11C1C0D9A6B864753E204C0BCCB093E139F9D6104FE0584
DF022C621F86E5BFE2E047FD560E8A89B3872C87F7811E9EBCA9CF182472841A
88E7C421E5CE69DAD123B88D4E6C0FD85C86C74435BFCAE28C2B5CAD57D91A9B
4473906D044085B5336B066C6D9CE994D2B333F470AD32D3BC28BA2D699B7AE6
2B689CD50CE2D458501EBCD2381F3430C3059EDCA22D9F15CA03CD18CB160E59
C0E960F79010DC1E9EC40BA6914F9FB7951CB4D5AAFAA135C17D5D64CD848A32
C71A5C856CC9C94F24B6C9AF854B83771678C0B0B4C6A4D9C05ADE69E5C04697
8751F11D2AD3F78D45115A0F0D564DABAC8AEC177C91C2946D5B9FD8DECF1E26
FAE568E3CEE9DF3897D4256F3134B7F3A134993536AB81B2E45EF42240778A79
4A4F10E1AAF04B24CEFDB78D3C62F09DB1789801729BCF2F196EBD7415B504C1
EB30A98240A5DBBAD1FAD5AFA9BD1B7B08ED66886B8E0315F5236BE48B537F6D
DE0C535B2292EDACB514713586695C0797C7900E8E6AC46A6B3720F5DC38E426
811BE86A560B49BA721CD63D785754C664DCCEF78097CE5680EC25D9BFDA43B3
99611D5CE7BEA436FDAF8EDFC92BA4E94A336717062CD846ABB75134D45257B1
6AB5D967B9E25C7CFA39B88A23FAE7826559F9F468E6C87F3B6D90DCC6933893
5AABF0DF9B431F70B6C431AF283A075F482E56485E749D9FC1FA6F5AB1D724A9
FA3C784203B38F173388DA03C5C83BE1137FB6294E5747AF7A96E75454B2E67D
3841B9FD401A469962DF6BE268D3CEC78F0CDBFD3CE2F571E3F3C9C616260C0C
C2F30246CB9BDA79566A7A8DAACFE2D941872FF3D569EA127EFFAE4961E1E8E1
7902A5728F9AEFC3DB3E81B5EB263B9677424DD41D9F3FFACA55A9F6FBD5A279
8FF873B61D70DD8B29BE4870FBCDF58BAD19C9CFA9D528D104702E4B8A56D9FE
5CCAD91738167051920AC09B4478300651F33AC53A51C4843802081696785BF1
5D76F54578655EBFD46D9557B93C7270D113DDA77D46B69C49C3533F495615CC
47672C970844D8AC77865702779FF2EAFD2FB21503D2FBE78C1B07A8E09A3BFE
3EB5A5B70834CD6445432B6CF2B9B44D86E9340F8A6154CC00ABBB389E266EB0
35CC39C828E042FC059A2C0FC15DA8D6CDAF240C096EA124FDA5B87D97FEE3A1
70D269ACB51ED58C422A119E8C6BB471DF05580FB2BC843D93014DB57AA6F81A
27199E7B6A8E30F001B39401D74D2C05A17DCD8BED5A8ADC08494E5BA8B57CE5
22758E015013D121FE71C19584777E6CA510A921B50D54CB5BAEEC690CF237B5
C9AA6C81744861352351811FFCFA64EB110B540C82CE4A83C0A4567FE859EBDF
E76767AA267A757DADBB5CFE8349C55F794B95622CF9876B3F9D917B293DDCAE
E45B171F5125E4C1B5EF7BF5BA3000C9F67679D26D08019521E472CCDAE5AE38
41DBEB4B4B37C5C1538E75C144D7ADBA18820FFFF17F9B781190659588E9170E
71E38419BE40C23AF5E0D05AB9C11C290EF9B8E5AEA2B840DFB40191270EE3BC
4A9098D9EC60165DE651EC614F6696E844A143C6310FD5024713C156CD7CDB87
8A40A09502B396867C92948AFB0F2BABD93922C7DB78C54E81C2E4C11086C358
2B925A1CE2ED8AC7DF3E7562A5B1264DB872989F8668A46889B0D2DAC7CE9E40
D84F17B6ACCD87432CA90AA769A4E94594F9B3831E4DF7FF4491C8A2662429F4
5A55EA03A132AAA54B5AC1B745CA3E8A11FAF96133F2749C5ABEBF4605EAF9BC
3D8611E3607832D68CE6DD8B073B786001E3C02EC29969AF637E04D9340A24B8
5C99A5E98B5C458F88AA854D2F15F7AD81CFAE347F0642DDA30F1997653E0DDA
51C90CB9815BE5C89D161E9729DDD097218C48E4FD8F1183360FA32CADB8A078
28702857EDDDC1030D19928F2E260434DD476BF6EAAD2163B2871DDB76497570
C90861F3ECFFAFCAA4F671E3A60CBB746D364C09DED261E3097608FF39B66B4D
DCE39F3E590823590CD7C75BBE8B58E98DBC623D906EC7632CB075B9D013C926
6B223C04E2F8512BB3B7862EAE8E10393D1987095FCA5160EB06843ECBE178EE
B5B0C659BA219BA4F370699C8678DF2C1CD691B783529D3C858D5F431F6D34ED
B76D653A987069E8F87271EBD508D02DF0D47145BF586978A89E7D9797EC7E50
4189315DE06AFEF817304E0989898A19ACA10DACD07AEA271F903D7E58A574C0
63768ED394770CF0F6247010387665E0694EFE15E7DEF726AACE31E08B7B2550
4830F03AEA815E526E56762AC0D9E9B3A6DEF47EBAD7542ED8737891E67FF65E
218AF47B2944603F47BEFF88C9BE9BF62450818B18191F94601B3567A2CCD109
74C1CF6629D8D6379876027D4926F4CCE534233EA3BD8452EEABA8067A6BF680
C63E33DC403371A53F40982F7E6924716174DC9519A1D9ED9DF8635FA6D86CE0
B773B7773C5A70E184513CAE841F6605D639EEC33CDA7687A2D5D0DC8D49C3D9
6652E4EB6B8FEF6A6A663B71C39129165B27ACB541ABEFA6A723FAED7792BCDB
244AD4D87F00952D0388BE2586D794D5E8EB01E9169E93845117CBE2F0B5980B
603041F9EFC88D77D02D39EC1157D538C0B41C16824CDC345FC8249F699D5364
BBA3E4FC59D1F7378FB4AA09FF2E3952261C0205AF3BC52223C47281BA7C7291
97290AEBD3348B4369F148C706C928A414FA1FC9EAE504F5B6553AA9BB15553D
A69B99B6C48B3BB423D899397506DB4D41EC266C58862DC40E95DCC8CB8501D9
724F462BDDAF81F41A566026BC1529147F19D5791FA773A0D9E6CE4B03172402
C99D6B38EA429C4E6B909299F3C570E743FBB19F4F841939609B3A3D2FAB8FCD
560B3DF5EE5FFD826E4297FB433EF36C4D4D230EF22D0376B41C806A9ED583DB
C692208CFB1D4EB23C8C802A1517D9C6FDA3474591F19D573EB051F4AB91E4A6
2D5AF6B69ABD9CFCCAE361770F7112D351A3A231F0FEE5F90D5AA9E862E30E05
197AA0700E565359FDBE6A5E05F302E15CA31E9F36660AA3F1F95F472DBFC69A
0ED01AC4044F17B810E8E46BE9689B9B16F14B3AD58805DC0020DA959EF524B8
BE47F16C03486A3CE03FF9EE1C4293A042586C7D5DF306BD03AC09264512FA4C
EA7913344913FF363B88C91C8612460096B19CDEFC01A7C48DB7041AEA1D83C0
F18DB473A94FBC23BAA5A113EC30784398DFF65DA62C90E3911C2D4737DBC8CB
8E5487232F1EB4E76EC19851686515184BCC426C591BA22DF38389D183D64EA6
EB8BB35DFBD32AE761D29E7A2E61CECCBB294DA4B30354751022C9A40E3253F2
D48149DCD7FDF13F5351E6C8934A92045C0A486BB5871AD692296D2D69F6CF1E
9FEFA2C0B1F1BC92D2D6D0711332EB581CE1C6E0EFD92D2B2594DF545E359F29
32DB2764780688C794121E4619FA8B150CEF52C48C478EADF2E58D3CB1CA23A3
3CCE1D710393EFB379209FE16ED2175265D14F360C6AA77FED98C426668294F6
E5A32EEEF36AB9ED7C852FBDD7B08797CEB731BBC4B3B42213F643CE0B6A1BFC
D8BF682FE837974BA4A855C6A8CDF351FD697E94A22E8AACC1AD2BD1C98E1984
76F07F32DEAB29245E75F9937B4356D3C2DD059D73A1F8086340A0CD4248B159
E309D1F932776555B160EA2BF88EB3CC515C103CEEBE1C616FFC9A23B8BB4A46
413D6F2AEF5FD2BA95D15B8AF2F181745A7D2C3B8999507C609A2ED663E1D24F
98564FE640275953E222C1AB7FD8AFB2C629CD2B0512E17B16C3656F78580E7C
0E668F00DF9D78D125449EF704763BEDFB26012B01FD773E86725783232143F8
49713BF60ACBC030E18A42C47DD0FA1EE3521C98714EC451AB5DA2944DC972F4
4474CB35738074BCB9FEE4077CC0C49937B7D98F84664993901FB2969C4996A0
D326D478B7783A3B3EF292A9E582B78DD2BBE4BABAC7DD277FC23AA4863C2FC7
8678B5FB7A9D371CAAB9A8A382A36EAB6BA5CDC3E5B938E2BC3E02750BA9A549
39DC11782F406A2C726654A40AC29D2907B649C944004FD5A1D0124CDE7CC998
5CE7B2B1E2526C4A11D35DA3E386BBD02544023F29311A1008B70521E4C3F36C
05EAB4BBC3CC290E5ABEED275CF0779636760C9A55D0800715EAE781CE97DF06
830FC4ECCC582E8A675091A1D3EBC00DAB9B0BAFFAC4514AC70BB4F3F6B335C5
4700A78CF1105A2142DAA3A36B100A80DC194E88290FC514CD83A8BE5A2EAE3C
D80AFF9DD2D0FDA23E4A552A728B153E8BA90733FA6D10F17D79737A37A92AD3
F65DB08D59FF46F44C0180D122BE5EAB9CDF90564DF9D9E8E2A81D2C45673A00
85039103B2AAC6B4096276CE39405CD633B9DA32907139B976BEE2A5327A588F
72FF04E47B5A00313955000D1BAA6830AC3043240FF7F9A77159CF6F514D8BC8
E0875032E159EA0D6D2ED8AC2ABC213F81757FCDCA8EC6F0E9EA338B27229D3F
F6491BBF618C94177E99B34D229F4027E09BFE7332C972C697B61F93876FEB43
D42881E1FC8E35E1F656D0B35BD66180FFD25A8FDD6820A002C3CE1E6C29DC43
65DC1EC0876EB20AD9114698BBFA84B0012607967E381C0E37E466C600CED107
2CF36484D5EB699B2767111A84716B4647EC18CDF9411A2A7208E3B37B9CE3F1
D0C616D951BA702DBBFB63D0B8CA978D6AC89C5D7D115D20015326BBB45A5A17
E5DF0453B564B8FD5D5C6FC917E2A4CFA8FEEAD0D310BF136300D914119D59CE
53AC7B8F718013E922561CBA0F4991F2111DB1AAB1889FB06BEAA1E0A05C5B34
B737ABB3CE77697C7F524665CD2AB7CCB157D88E49686B612C9BB7E2DEAA1659
7E0264A7F978D83065BDD9097F2C888B666C72993BF21DA93935F90595BDBD4D
274FD42BDA3C3B42A81058C34BC3F8E4098C22E5A050397513C41043A2676F98
21158D56882769E3AF7B6C0F8F856AB15FE0C3763C1CC5F8EE61FF07245DE131
EA6611B00C4C3C0B6ADE17A52A09061F578841058F3FAE9DDA4237FE86037F87
FBFA1E5C6668641E4C697C648604208E0461CA00172ADA0D306BB9EB4795B997
8F06DFE022C2C2F06CA4C96CC6B5B5019C8017BC1171ECA5D63C770AABD3AA32
B51384FFA3FC187E2E01C4ED9EC3EDCCD91B00249813B38A7DDC9548E91FC0BB
69F0515E2A187BE89A76A1DA30F0F8CCEE1A29E4592EBAB2D574E59DBDAC801C
C979C26427B6660464D5830030D103F984035A523CA99679806DF098BE95AF02
0AAE36C19CBE373AEE0F5C7E58D8972DB8B60E08B95805267B9C5D18B8260DB5
76D4DB2D94332DE7884E10B7224F733873B0D750AE4934135DB50B40D10812DD
F6CFDCB995609708E5A71C4D69A63E0450D28E6CE48266186158B90C2E0BD30F
D0099419E94B1E29C479E3BC42C37BF941BAEF5B16FA667198CB1418399629B6
894E316872689D9C92265D1FB1AEA4414A16092ED5E471D1230281E2EE9B00FB
13092C3686D6AED4460D71BFEA4C94896704E7297CFC074A45AC51A5220870D7
AC824B109EA80C73A9DAC5B5A16B2003AD6AAC88A103B2A5C89E0E21A4AC919F
FDBAEE19F2B2DE64FF02760057F7323D02AE0CDA0661FFD3D6EB9D246CE2B8C9
113DC89CC7B9EF4EEAC8E0F41D166A0E1BCCDC8F50D43E86FDFE421615BE3DE4
8700A00A4F89B53DFA2473F8A9BA14D454B9762E5EB8AC6520751E121F2C5D54
FAE9C4227BC46ACD9550C2B3E21B88545BFE7BA8F95F16269BEC24134C6D03C8
C9A215FB61A6DAEF315A422D7570CAC22CA6E2B89311C8D330F0AD6E39865395
536828DA89CD92C716C69801EE65922C82D1831E973855A39A43E1D2CCD4FD92
690BF4E925AB2CBF5D6F79145C4396130968AFB5284AD2140B55BCB83A639F84
908DE4265FFD1BD3C99DFC3E41CFF041F192D9704D5B590806597C1673B3B8CF
89093E2E9BECA0ECB4078DB663EB69CE4328D2BD0BF7E95E0F3CE5B65A0085E5
99E871C006F179D74896E0107E343D412C58ACFB97E1EFA1C3EEFA4D9CE705A3
A6B6FDE0EA27CEFCF5B29E982CF83CC04971DE932CF0A7BC7A76DF9F10191BBA
AB1340033C94E7B9326F0F1691AB117144FFE2B54415954F79EC983D8DF844E6
827BE372CE8B716878066CEED8CF0755F664B39EE3560551E66696DA03C80D37
2CB4B05FAB870D784853E8C105D212687C98FD2A353943A1C207F138BBF77163
F564BC9D828E546FE018FEB4F553EA8C94817F54639ABBD24D50BD0D7BF552E2
5EFA727463B5B8A7B00F408DDFB89F8258D30A5F6EF7D88E1559A670D9AB04D5
31540D084C46D29649C09AD75A27D5D3A6CF9F43B55DD3DBB33ACE9DD6B2F469
4F9490CECEB2E6E552D1F3A801262052341A010747FC044EB990D9347BBACC9F
CEC943F3DDE23731F7FAC1890C9BB33EB140C265D5DC836B3F51BB9D76B88CA7
66D631000815676DA47E0DD876F9C1C630CE98EA63EE04B4AC3E93B4C6053765
29F01E612B1225D2176749EE71D7F081093239253C476372E5680F020EAA452C
A0AD2E306B021E164E9FCA724DAD85812A3F2A9DCB799F82FDEB9666ED4632FA
28C5A17FF90D93581056781FCADE53660725D56914214D9AA7255D58BAC13136
6B98D17068E3C193CA8746A7F439ADC4EE639876DF09645E0C16C15B28E56026
5C7A64BAADABFF32F2F45E7A9C7216468043E412657AA81661CDDFC39A277180
85EA693AAD1B25349EC43DA3811A83F1E546C0CB164DDAEC1AD94FCD6D373246
804BA5F2171C5C56B6562A13A8669D7C8AFBD8B07C313A040026484B57B4CAD3
6A5D128BBAE59023144D99A71EDBB90FB84380ACDDA68AD1C162C1A1D3241D90
E8850AB5144766498457EB73E1170B469FE18C377E448EDBB0823526BD66B40F
0519F04EE6CC62827B9DA3660AACD877B1132EE19BB147F4CC3D64254C6B2558
C0BA02DE051B617F9A19D5DAECF77E213C7628340AE04616F5F1B3D1F087D2EB
F1380AA0744A0A4F500925049188B9D91BF76B2C66F566BF46C25E84FB71F571
B3658DF687C9A775D9694F9DB8D6DDEFCF91758E02FE252AF4FD013FD5F0FAA2
58942085749E505F3885342E5FCE336908F3BC7BF6D0433C78A6F9A2565C497B
97B92EAEE3AEC72008062134A7F1095E422CD6D52DCF8C5B352FD4124E488A0A
2AE068CA9FE1CAE885F8E8AE7FD2E3B717F710098DAA58DA621A9516E1527448
E42EAF4C16A15FB43C2FCE7E0E8B4F6025661D49E45ECDB34B774BBDE2A5F2F2
6F64750671BD84A1AD9F19E81A27906DCB43730DB058641C8FFB9C9864F52104
08AAF9E9692BD5ABCCCD70B7358AD6FC4C02D98DD85B1E3E7A4ADE68CE1AE634
0946D2BE3540527720C2616AECE875E0C853808E0E413914953F2CCFB21934CE
02113E9377CDFD70BC629297B4BCB6F28DA4E17D845A3706D05D8406CD8E7E8B
9458990C791342EE8696955A303BC8C54D3E5C74E2B062E653903867AB433394
170DB56A574738360B1A6C839D3CCA6192511F473230824CB1754278E8D583B2
D23123F30455B7E6447D19616BB15CBAC858F3E5E49FB03B6CE7149704EB4594
3BF07F49AE047C8CA2383121482B7727113479AE5C874A90512036E499282AB9
908FF20829417836F006695C25C6C487D29ED242892F85FE1131AF0D56739616
62E2DDC25A16F84C775AF07639F4D483A31332AA779C809BEDF31031C04F29C0
F94B6BF57FE6183A3D86E03ADB79A48067CF3AA32B9F7EC11B06B3E8C6AFA65D
3AB5725A51AE177DDEC3637894543FFAEA810F62AB55BA31B5149534E59D5AEF
638F5F2B57F96CCC70D472C45F4C4882EDC978AD81BF1AE595E05BD1F6B603A8
E42A5D5D0F2F07DB4C25C0D1E122C374004B028D6A859F4B5CFFE319796BF596
B27229625E89B9813164B8D3051BE747C1C4F0C57A8D998D17725FBD4FB2F81E
816BB3ECCC75B9068AB159EB8B2C22B94A82067BC0CA6A89B30F8859A44149B1
F12BEE00C2946810F787EAA6883436956E4FC7FD9724C068E8FB10548593C75D
D18232A89A46E40D4187FA44842A63659C31F4F6F7DECBDD88E9FFD5568FCD59
EAE9ED878D047830FA6B334FA53EEFAD18327560CAEE0C1C41F2DFEA3E474F62
87CD7DB763989F9B84DC8945749689F7BD9B079264A0A887178A26A24F89930C
9E26A92B4ED8497136EF4E084C43A6E0F1EDEA7CFC5785D5D74B07A5265E72F4
B92B837E5970BCF5C75807183814A598372B77BF3DE207410CADF15160E7B00B
025C2A4B41D752DCE101E9A377754AF0A9804BBDE6C8233A57F056FDE5460052
6110201A405440B8FE1BD5A727DCFAF86F3D45EF2C29729BD683734D8AE488D4
212DFFA474A0D3D926F5440088882CFB1B4CBC7DE43A3107E97BEB6A4610BFDD
3F7892A13D4FF37B3C548F8F6176328864C9C22485EE54452C533BC5A90CCE79
572D38BEA570099809E69ECDAB6CFDA8751DB734A10BA4315B095BC71C54AE78
AC688EE28C31A951748D3D0A5E8492293A9F128484ADB7FA412285E33544B7E5
3504F2B08A80873051FFD75D5D72F060AF784939543737F05659BCB61EAE21F5
0077B8A20AFF928DAE47390CDF26ACEC7F64336A0C66D57421339F6D451A52A4
0EF419FB95D34C4348889EABA994803296A6D6F407ACC9C304294FD8DA5295A6
64FF33AA529521C600EB80F14B1FCC37681990CBC4EA4EDE21974EBD27041380
A6EFF6707107DCE43C53529B6B8196B92C577C5F5EB67555C6CA3BA3C500EAD0
971344A58B12162F07880E6149A5A704420D49BBC40FAC9836D202326295F959
295B8CE1AF9E1491B808617176B85D75B87B7B9435E2F60429A55B68CFA0A1CF
830DEC524749A6C5C0F20571C577ED03D63028C20417B9E786E6B4F79EC50CD4
ABB08C6B834675DBDF56E079235A8B3F51E271E0A6201322EACBBC6BC226182E
C651935A4BDCB9D7C601735850EC6E49C13EA84F02FB75491D4D1D556D6F6E6C
5F73F27A07049514C68C1118A27FE70FAB503795949C7EA8DC1B3F2BBC5C26A8
E3FF98B2297901D2D616A3799447E00CE4F99647DD31400AC2A617C047117E5E
9AFBA7F7DF0E47CD06C391E0D784867A67A136A18E25B5BDCD706F4AC8C7F625
78515EC78E18B0C68EFF4DB5E0DEA55B1AFC51BFACB4AC69B3D95821274914CB
D0A6EA1306BA164F0125D8CE74B3A3C883F421FA55672F22685F95E478058B8A
76AC6C4A8FFECC23B9620A7FF45FEA86FD7B3D551CCD7325032D0BBE389DB3CF
B7BFAEE46118DD59B0DD4C2E6C2F105AF3892B6ADCCD448553903EB9DA82C1B4
2E4F9980FD62A4ABBF4537C9E4C246F0D9CEDB09313C84738B57A583A5EC6146
C773A1715F8766583195D37D463E6B61E0810B19228495F64FD096D5CB60D891
D21B78804EA40D186EC0C96246B8FDAF556DF8CEE85AE67471AEBD0A0D3936D4
F9A1F77B1F7ED4BB5E349255A3417A26796C773B06F948E2C0EA2AAD6F578DC8
80BFD82072425A2EC94C7A0BE6DF82C2ECA90055C22E2EC8AFB8FDDCA4D542DE
0BDFD26521FE539E4BD3324CAAF70CA9D77C30FB52A523A640C4F8E416646300
B5378FF7D670B30C3EA9BD19C82DB261FAB074F1757A1B9F23EC7E740A98846D
AD27950F49A64A22D08712CD2953BD01D61453138F0D612244D14444AA303683
1040C217F1019062936B417B072A751695C020E95DE95945846BAE52163B4ECC
A52DA829A1A1B293E68D7F9331ED1917E5A954E7210AAB097C75482684907B5D
8ED7B9DDE6F57D3A4B68BF9FB17417D94B0DBDBF73724D981E86115349A48CCA
733FBD4D219AD9426E315B11ADC9122712FB6D547ED3D55902303F9F8EB6356A
4F1B01317B224F55BFC36A50CAA1C636BB340C223B9A7D65F430E83301D76DAD
7152289A98F10329E0FB62253445F586BFB542B2297E271FDA46FDEA7E089057
5DB1E14E4972E9110AB03B0C896B05704298B05433B9787ECED2E823FB3C8E36
9E0F6EBCA0527F9413E7769A148CB5038924E7BE6380D51FC4008D2A1B20646C
EFB46E4510BE94EC6538834DAB751AB1C2AC0EDF9158EB38BF078979DAE2DB55
ED6AFC39564B1C18C619D94F388D5C8560B03B4B25D0B940C368AFDB7652F5C8
BBF4175D427EF39564D364C838B422461EBDD8C480444449DB76A321ED1517E7
50F551AAC93463CBD8DE31676E57E765AC6CB4C052198E87F09476ECDDF3DEDD
D21E07F526FBC2F8E32C84758C4515916CB24FA95183636D113EC79899621E17
89548F30389BB0DEDDE33989E4F8417201F0D2CDFCAFAC06766BB5ADEA1F6887
599ACA4D26C28195A1F4C4CC623B30B076D4861E83F255AD3B58BA187935BBC3
7DCC97D12D866DDBB2E9D6B2817FB951E69F5F24D03D05ED34391BF881DDFE35
3822959088EDA3A1565DAD1C08E402BD6CF4EC99EC3CF0A49F0ECFF4E95A64E1
AF8D8885891E6C7ACA5E857BB91701ADCBADBC2933C1D0DAC1035A5A6B41BE61
2088E167A943C15CCE64A657C543DA764A19610D5364892FD4D915731194F7C9
2D83695EDEB559F0D4A8F736C9155084F45FEE52B749BD29F44F0EDDC2A33E97
D36AB8A7DF9807F5A3EC7103BDE77ADE41E32326604C59CA016124E95057766F
7391B9AEBDE7F7E0E05AF385B06DF35C2DEDB7E3B370A6190039BD94F21DCD05
FF887330D1BBD45CB36033CA32952BD67B6EF0BDA8CE6C8BDDB68BEA3E5B0C2B
AF29D0DE3BB879970E71C52EB8BC75FDDD1940E5F6F6EB447EB37A3093F8BC87
EC54C4E0C42B085B65132932087F332C0BFCF3D479E5F6E9C23CD986609ABF3A
71B378B00586F8A890443897F479F5C27BAC920128ED8ADAB08513B73D45450E
6550A9201C6B53F3189E8CCC5E0AB1836A975C519697625036D9EF73742AA110
82AD8386C302A3817121EEA58501384188851F77B198EB8685FE90146FF9D823
E44B129933E3F9578A1AD9DC404BAE05C176B4BEE3F7959B8DE24404DC95DDBD
1FA5C60BA61B0BE8A05CA56FE842051FE87EC913E4094304B0E6CFE503F6FDF3
D90D232B567830C7EEFF5F93E3AD128C18D3CF44630A285F751DAFEDC3E3D3D5
1F61AF2B117EA266657BAC3A58A4EEDF997EB49F8D967E148F381A3BDF3D91F1
056A41B007AF081136D50948561FF5E7C337428FD60D1E9B8A9DFD05C44C457C
2669807F31630ECA1B3FAF353AEF3EB31FDB3426D23D1D73D277C764E0FF0145
6F2EBF2705ECCE7B2ED90343D23E006ECB282E74F4680FFDE98F1E5F353A07B5
9A0704AF6A12515358D49C50AB0402644E83479EA265192B41D8F3E81B476295
82666DF396C64D8953B4F3B0FA8AD33C0598C71A08EF13041306FB82B973E484
683DFB445134A9805F40B72F069C11F12C5F8A59DAB86CE7477658A608CB758F
254767592CD31FABB9681E6521877550339CCF16751CBA62F561EE965DD76312
76D51652A77823CAA8C4DFF3B5D77BFBEAFF9E13E90690A80DF614F24E9D390E
F78669C5E14FA259850D101D84F4CAD106141137C1FD5C1FE8A045A4B2905884
1D9821D7F955D3824CB1754278E8D6B6098B5DE64CE29BC8EAD802462F66F3ED
F479FDEDA005A1285F9EEE2D27FD0B5D3310F30B31C9BD5155E41D23C88839DA
1968122EEA8D652BE7479621A99C4CA4FBCE05DFB2F944CC07F6E33B9528DDAF
CCA9D3BB807F7B83EF5DCA91CD03E726B1EA1DA0D2D3A0C45ADBA046345F3525
71377BC9C45114130923586825E363007FB2128EB8B3813E02672FEBF3700BEF
DAE47688F52328AB1EC79DF25BD8BAC6F452D3AE5CB04409B03CB023B3506AFE
ADA1A2F363888E2C465AD7B95E7641782E3298C0CBB1E95F00953B121F2D290C
00B763D73FF9D164A307CD6D8CE21FC60A9895B6CF391CAB3B0F645A4734C6C3
BB9AF987D55CC27E5859EA562E211A70BDD212BBF5C830B2BC850B6AC8DBA8B6
B0143F4C6645BCA7AAA9947639D2AC17D45DF9C35CDF69EF9B49CAA77040D379
82241366C1D0C05E728F7ED87EA484A596A6A62D6E825230571C82F55CD5CA98
4E3974776725AE1BB7E5593DC6B1BDD92B1975FDE54BE1956BF9A81D91D6703F
3AB779487B52A034AA5D1237AD7982B3366A4CC57E49880BF61BA0C8E3EF0699
77E88971C070FBAE2C25A7104589EF38855222F4F041822FB77ABAEB31C82A80
73EE674510EF31AC97156D594FEA136F2ED0C853EF819F0A9796DFC3E90ADA03
7CE9EB308D4EB08F41F3C2AB7B1D4EE45BF11E6D372E1AA462BADF76E107548B
2091F25AF93A21BC1D3A1EBB4FB519579E4D55AEF1E07E58C2FB1F6353EBDDC0
A4E813AEDD2C985AE8944048452A464DCB37AF47A894E839CA315E5E7BE57336
A0CC4F92D4C4771F68F86A916C9078D499F43D24E8A1A9CC0F64C800411FF88F
EDAD541E32BEF301B149937A0ABC0F9F1404E07B16A52472748DD2F7A5E49C0F
5F072E7235E9B1BA9960F2D89703393C6F7294C927613D7DEB7EE64C35AD3A57
88C3B548D221F7C1A42F058FA0531E1AB970AC4A2E4272544105D819B5F94B26
3E2C7A3D9D8187763A27C8EBE65E2036E7ADC2B451361DC744F5B1827B15464E
7DC2E8F4F4B83CFF8B1EA27CF25FC10292CC68C8D0AC2807EB52000FA90219AA
54AC72FF90765D682A8B9E88176A93892B3360A9762F1A6E4A2223533E349348
23128F6EC02B29BB028B084419E330E2DAEAA88BD8FF902DFA75BC429ED74574
069ACDB172BAB4BC14C935977FE7EA2CAE4F8610B8A28677F2D10EFCFF762807
D7AAA642ACAD2F8B3922A6097D2B24B722A1B0698B211C7039839A767207B3C3
AA2E1B52D713BF072745443B7FD8D6B92F86979F67832DB039C3259AB23C585A
2175B20FF225C7826494441AE525D734ADD1B9A9D2DFEF198831D0002EA9A1FE
3FCC0D5D4BA01A5F94A4D5DE3EDE83A6C320A3341AA15791C7D4E00573CE94A0
26C9D7E21B7CB715B8E557B5ABBDF151439CCC4D1063186032C72C6AD5BA355E
1549DDFA2C16604B66C1BC1C7A6E636A714A5C4BB175F1BBD944EDBF2ECD510E
6D3576CC4E86F08A25BBB0100767AC2B6F98CA0C2C8295A08356F07039711A33
E8B1362BA3A2DDF29C622FA55D54800823824AF62384FC2FECA91F2A21EBD10C
F7969FB0B6CDAA444006B07E0029683207E4F685D084DFB3DC84917CA80C31C7
E1BF1C99DFE0E400838F718712D374D9AED7F0A85A6D74CD1C1C86B8FD8EF3FC
186A8EA4C9BE51D592FCDED2BF696E9A2FD208B9288D26172F6A32D3C5E85739
E3F591E5B319C569DF3CD3C053F6CCC206CCC848A8A56F9370C713AC47E2372B
4552D66D524DB3B2A8D3BB4E949F76A458882E5CA9866BEE012493E404604BC4
A0A97D3B73FFD86D2945F28F1190BE3F7D9017B446DC924912DA3757FD2B3476
FC2357E9D9D6F967C5983037BB6E9EC0008714A29CCA5AFD1215D847550DC0F0
6DD1F83FA50C8979E98D2E43BD6B5BC695401E0AE4D56F9A2CECCAA2D59A9800
5391F9658C979B2B09CE5C3BBA4B56D34A9C5CF617A651FDD348DC958934E5B3
A8A74EE58C36E01B59C76005A1999A95B5B8A42DE5BB1384878378F1C629D60C
C024B929FF470796626F0795122379B1581BBC719C29B791DB1A56767B0A22F3
35A7A5AD395D681A0598BD3E107B54B4A9624B1FE103D95A880E7607F8F83B7D
89774F57377C6E95AC3B74863596FA34250C389045756B580C8D5D1AAEA50E83
DD2A0A8540D94827AF3EA1B0A3E4A19DF3DE86B975605D286CDD3FAB8FD8D571
1B8FC7C9F81C18D38FA1BCEB3B9A5006CF67560A58EA246DB48542A6A6436069
66EA4A9E1BA41B6AE24AB2022B6538D425D581ABB8022E13C0E2E4FB3051B368
4E4A333DAD6AE1DAD97B91661E126FDBABA78FC1DF2E6FF27F4F0D0FDD35DF25
5B64B2889C780DC45D78DD1342578152E30DDA692386F263A75C1F6ED625B99C
C9C3E03F133D904076E97358DECFA6BE9B8612606BD71EE76ACABD4070D2D247
307FDF5269B44DAAA80E7B4DAD286C0B446B0A4E2854AE79405374E0CD5FA29B
8ED4A8217BDC85C04F3DBD094687B76E2D4E16BFBAC62ECA4C3EF29948A09D9B
21563643E27DE92FBC4A239D237BE625AB95503EA0677E64C338DCAE28398846
CB3752FA92F87103C23014933B60E1F257C77A72CD8C5D0C8A1AE705A62A18A2
61022F67009817A28C281C3EBE5C2C46A6AC2854462A7BA520DBC872DEDA90B7
9F113F5A4BE581DB49C5EB8D44557DB81EC1A200EC7DE4135733C7EBA836A58B
084D49B322282F1FB1F986A5E62DC37AC584AA74172816689750A0F5F54B21DD
7097DCBDB747D975077B37CF09EDFA352D393A58CB456F1E32792C3F6C3B01AE
CC58B5FA0B1BD6C244D36FB6F2A10673088AA9391CAD3D4BAC713659F281ACE8
DFD6D48A545300D111C681DF8126C4B1060A44A82E58757D6E68D2270B55C173
23912234DA39EB9323DBC6BA6CE88B5BC2A63B18E115B756E12586787D20B6BC
949688B30F0B4F3FD3AFC9CAA04A796E5AFB86D1847358A6856E3D6F3B11C1F3
43EA1AB3E596E20FDCF0B953E23197600C24AD4BA8714F590226C6DE969C4F34
FA6FA9F76FDD45FCC5C10CBF2640628BA4D6D643DF34D3C64B8D2004835FCCA4
CE0FD94834479279EE1732751BECA4FA8B0D525E849E59E7B75E384FC1EC7D7F
1491EA7DA862DC3D3E6426D42279B1853D20A31C612925C3BC21D9C251BDF71B
AD45A7796DC14E05E21ABCA39007ABF25F89455E6E32D6DDA5BB840CFE9AAEC1
BF78600F8189D388506DC7D27EEBDB3572D9A8269430E406C6497E3200E0E79F
F355914F445B8F63509B634A40D07271752218859F47797350702792E8FE12D7
31BFED39DD8616D7F1F668654D6156D17D89DCCBAB7F0E8FC0A4711214504901
58098CE7A6B71E2487407D34ED655A5DED94418AFDC5D28C3108D2BC249D4D42
8273C391AAC6526F36E28737987757B40A7FB52DF8ABE4C79E5FA5D0F978E7F7
8F8C08A3B68686F81B24DDE232F2C0B823742B954710D6FFE1F0658612E3EB9F
5DD68792A9E49A7EE133121929FB050F99044384342BB782CD1214D7CC4E8FA4
68DFDFFCBA328CC37F65ED0380043AEAEE5AA56E2E2A00950C9624749B44E3D0
7E3CC46BFAF01252F038B2FB438FFCA4885C52FABCBB99D30A2A886F01FC48A1
77DA1E542409161C2DA444D712EEE764DF1A7B015BC15DCDCC7EC7ECA8ADD71E
5DF1723C06F2C5335205B555570070C5FC4DDA2FC294A2D22A87EEB573EE7A32
271F44C4B38B0A990DB7B7989B0F7A4B8F85CA4FCADE1D48EAD00E2CABEC386A
51CF151BEFD6F050424608CAA65EF78657C256BF6681ACDF90953AC8B1D7D4B8
85AB7F5DD191C644E656704FC925749184BB31100F372BBF6A18F10985C57E72
3DE55A8A9D28B8C84B8D433DC20A6AF7D1A1F60E9E8AC7100317E2C84509C5E1
53797497EA9205EB9880CD52DB6E8D5335648F32C4C37172CC3B3804CEBC9902
352BB9447BDAE7D1818658A4AB83ADD3726D0DB6A2E5463DD4A34F9D0963906C
9696DB00917E19846F2E02D68F5B98BDEB6601C615642D75ECAE3DB27E6CB9CC
7DB6A24B805453515B8A6678279F2127986095D2E9C8B25DB46E291F3B03BCA7
249979BB83018FC4A5CBA7739EB91083D1A71187A40F5776015749D0C730C79C
E665C1A2D4D55D58F28944D5051024011269F715A374FA5FA1C766F6BE1E1376
44900CBD74BF84C2A83713344EFB1944BE728AAB48D8D37D8D1D45D94D63B91B
3C049CED1A2721D2B8A5087EB9E914D3AAE275912842925BAD760EF5804371B8
46F9505B4215E1BED4E64ED9EFFB67B9A9E50EB56E29C78C95F6FE29F9D0CD68
8D9F1ED833ED1B8E34CE56C0C0BABB5086AC282C872765058D9D3C1A9BD7B146
8107E4EADC8E4CD3C0B9D2A23D101046294E7BD2677591D5626A3D9778B1C007
902C7D63F17C1DEA8EDA1C13D894EA677FA60A4FA11FFBBCEB6FADDDA2E4CD49
2D1F4383C56D43DF914D32CFB843B3CC7BDA5D6D21FB47E5DD6AAD070C92ADD0
F9398381479E35B25767468208F29C93713BEE079D464AB17302503729A40F3E
090381DE48009D7AC6020BB21D8F0223DFA14663800BCB0EB3F633644D93895D
BEE3A45792034C7916708B6CDCF4F68D3B626EDDCE82E58C175ACB27EC384FAE
7BF6AD4D9730E9283571C81D98E9FC79AF4E193148FFADF1F79F392C97E8A741
AB9353D09CFEE02DD4F05629AE1DACBEA861C919C7847B4E9494BEEAEB8B4759
D0400D3139214D3F08673806B4503E9F6735C319B89661104869F8FAB465ADAB
D58328481121D115F210B6C23F1C7ACA390D98F5FC165A4380D81D4350DD1FAA
8F504F8CFF490AC80CC47F7D1C871BE42ECCAEBCDF74C862E54ECEF9AABE2346
80A095C0ED648BCEEDDFD463B1357870158F45F3FA4028C8290D2A467EF643CD
3A7B050A81921B0CA01C86833BDE5ADD5DC4FD118175EDE41F4BB2FE53200946
20244F930D6AC73F9404F570E7A4EDBF1863C0A709E1131F2D6A8EFA950AA329
9771A4C5FABD3104FE99AAF3A3A99D07B20622BFE2973162CDCF035B4FCBDB44
E992D741AF7E99A4BAFFBD6D2B6BE955072ED4DCFFA24FDEEF53F9E628594CDF
0F4456EC4C49293A3142F5FA44C6BB830533FDE1565DC9F5554BF9B000F5F6A1
AB813FBAEECDB295B9F34C7AA8D40F60983676AF9D2FDDBAACFCE3A62F327415
2A20AFEAB696E434769812D510ECE8A5F397D1C3E05D00D30A01ABFFE6F2F025
A4FE16934858286AB7F4D86743A28CF599C651E27AF497D86CC07C5BAD32E7F9
31B8D2D794726575223628C9D531967AEF5E1D41A87BF376B6272336B602C5B9
4FF4307337E4772E4F82EA233675C5A7EEA60AC017A3531D8BB906A0C488C3EC
B5B7AF928AF2CE950EBB3712CC19350B1C606B78A50E7DDE6424FB92CF9FD9C6
808BBDEA64976CDDCDBAE475C497720FBE8D5BD4FE72197DE3F3804693E7F073
747965F1EB12BC7AE3526C83011BEF789921E83C7C2200A5EEB562FAA26C7D0E
C5E008100B3EAB553C0BA2E77AA750D7C41AC35A963689FB51714A21A6478E00
088974B7805A1C13942D47F009719633D909DB4171BACD74B307DFAD4B00A1A4
AAD24A19A55AC4E227A04825F18865B75FFFEB7A3725EC70012E01CD5FB811DC
8CB1CB945169EF6732A411001DB4EA9564F0F37C72305E309B8F8F24DB5E6811
3138A032FBC2338C105494D008D342446CE681F7514394526842658CB50382EA
A7DBAF525F1478B1DAB4CAF66C49F5A5BFABDC0B2A89F79AF16A30267138CE36
BD765B86E7FEFFD1BF0C418B5C3CD014C83DA45E5FF2D20A74B450B343D6D579
9998F0B019BE988DFF800C6BF22AF15D2A4CC1060A36ACCAB3A48468ECADF3E5
ABE50F8459BE3FE632C00E2777EA5585DD5741BF8FA5CA6343E26C38155E993A
C57DE13DB36A0F755F27621D613E8F0B8C9F7961398D5982DAEF7B4D10F7C478
1EB16CDCE8B1F5F92E029E0C5391F9658C979B2BA3603D8CA588AD8EBEF4D860
A77D11310C58E8C5A0E4744F30B69609C9FB9B388E8BBED4841A10A7B7A9DC20
E54841248C2F834FDE2BA1C8F0FD4C582927E6F41BB904758AEEE96BE2E2158B
D7FF889163716DBF93FEB06F7C40952ED7DB0422C17312F07415AF4BA6F673E9
3E04D90737962264DD92158A438EF107F1F6AB9804ECB7F355CB42DB99CBBAAB
BE1B2847F5B1207440ECE02091D282E2B670D7AE8F0AB10F72027605A0B282D0
5554950286E32E4BC7BA5ACDCB536025DF35D38629D4A1766B4DC0737C482AC1
0DB55CAF98ECAD9B09D15B870EBA459DCD0435FFE382DA69CF4193055C0A17A5
E1B178027E1E24AC14A58E41E6BFE2260BDA3C4A3AED66500BDDC3DC18447838
7ED720029A6029CA7F095BDA3E217FFD7A58EA0C7A391BBAB6ED13E60D1D7E67
4259D890436E691371B2BAA3F6626375962FF5F898080E9F5A96FB8D80168E47
B13A880890CDEB4D14ED758B303F71C42CB12D0D0FF640C238162DC800F1947D
7E91D02FF75B9066EF672720FAEEBFD5687750FA0F5B11F58210E10E908BF0B7
7DCB050A796B4DC0DC2FE6C19E3B30D969DF33BA6457F6552CEBA1575447CCF3
BB6AF08AC8370E6CAFB578FCA2F6B44100DD9C3B34A5F663DFBD0DEAF12AEA20
BC09D2F3481F646B192963A83861621583753A58ADC4DD5519B55D9D1CFE1606
9F2E19BE954CE3C41DA17C2B0BC4042311BA6E9C666A8502E89C8A99B0B72E99
0A1D48EE9DCDF7B5438F28D77F97A18B4EBCD81E1DE26044CC8AECAAE8679FD2
BF35998BF8D577AC78EBBC96CF1CD460D1A2859C7CB4A468E04FF7625DDBABCA
73EE8EF4B76C1185BC5FD48DC558ABB567DF98B880CEE1D86D493A91D7D8F3B3
D6F433B5764F015EFE921987D87BD7D868066140F903CC42FA2CF68CD888E657
1546069100447310543D74A5FFE2485E4FB41E31882CD3307E3BAA89DC26CD99
74C7D8BBCBF0EFE34BF2C5915974ABEDF758BBD5B4A302B848277D7C296FE8CF
8F38923B7507D06CA4FE02F6F51F52804D35C8606738E07D42C3BDB324B9AA9F
D3A46385B7E4AF12490ED084B1992C9C2C78859175AB956A9571ADC22D0CC7F0
95255C962734BA1E8BAE0D91F41C5F8937D6782E78B2C08B326C3FF6AF371250
E94D979C9C98A53CBF4086E92604F8E5906D846107B4EE8494AF1363ED99D773
D498E14C5AB3AE3D128DDEB30AAE530A33BFAD9D98DB61EE0756D07F6E6EB976
154592EF6FB910A7DC0DCBB40610AD8F575C17161D05CC6A71E6B296952C4DAB
6E0C532EFA380F31CBE1FE94627392DA48F8BECE8BDD3D105843BDFE3D4A5800
8333A3763C7F8C1CB3FC229DC5E742B2DA85DCA214D8EA45BAC5CA76EC911A83
8059502A2F274511D57E132D8E7D24C0530503B363CB3AC9A783DEC6FB7BBB92
1F959527D5AA52F61199BB7B01795A01A91CD3D18BEE589E0327A31C39F4CB63
42B3A763A25F981448C0158F78372DFA8F1AB3A0E52AC3EA296116996E0246C8
C5F8A424BA1BBF9DD9128C86D8708EF0B260EB69C7AF313A7A2BA310AFFA5735
5ACEC268CBB9FC2AC13FCDAADC123621262C5A0432DF1F21329DD3E47CF1FA44
EF1B32778E5C41B29E8A0EC7E0E13460137C927020734A1BBEA9FCCA892AF4BF
EE6C45D44880F2E8AEFA8F0965E5AFD4E0C3C2BA74A6C87574FFF213075FB2C2
BB8114B98BE27961C6FE052ECF2BC7BF20C853B67740700A8638E45C3294B449
7DB936DDB916B033CC56605D7BD22873A1186119A79A68B3D67A01C1DB092CD3
024BA2365228250A026AF152F894A2C0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (main.dvi)
@start /Fa 75[55 61[55 55 55 55 55 1[55 55 55 55 55 1[55
55 55 55 55 55 55 55 55 55 1[55 14[55 55 4[55 9[55 5[55
2[55 55 1[55 55 55 55 55 55 55 55 45[{ TeXBase1Encoding ReEncodeFont }
37 90.9091 /NimbusMonL-Regu rf /Fb 75[33 61[55 1[33 44
39 2[55 5[33 3[50 61 44 61 50 17[83 1[100 77[{
 TeXBase1Encoding ReEncodeFont }14 99.6264 /URWPalladioL-Bold
rf /Fc 193[71 1[71 60[{}2 90.9091 /CMMI10 rf /Fd 137[45
1[30 1[35 2[40 51 8[35 45 37 1[40 10[66 86[{
 TeXBase1Encoding ReEncodeFont }10 90.9091 /URWPalladioL-Ital
rf /Fe 137[51 56 5[51 2[30 2[30 3[45 56 1[56 98[{
 TeXBase1Encoding ReEncodeFont }8 90.9091 /URWPalladioL-Bold
rf /Ff 75[30 57[45 51 2[51 55 30 39 36 51 55 50 53 80
26 2[26 53 51 1[44 56 40 50 45 18[76 7[51 10[23 23 11[23
4[30 30 25 71 7[30 30[{ TeXBase1Encoding ReEncodeFont }32
90.9091 /URWPalladioL-Roma rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
50 109 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 50 109 a 50 109 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 50 109 a 50 109 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 50 109 a
50 109 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 50 109 a 91 x Ff(Feu)21 b(un)i(pr)n(ocediment)272
363 y Fe(void)f Fd(ordenar)46 b Ff(\()17 b Fd(vector)12
b Fc(<)p Fe(double)o Fc(>)p Ff(&)22 b Fd(V)p Ff(\);)p
0 TeXcolorgray 0 TeXcolorgray 50 525 a(que)g(or)n(deni)g
Fd(V)p 0 TeXcolorgray 0 TeXcolorgray 22 w Ff(de)g(petit)g(a)h(gran)f
(utilitzant)i(l'algorisme)f(d'or)n(denaci)10 b(\264)-40
b(o)22 b(per)g(selecci)10 b(\264)-40 b(o.)50 780 y Fb(Observaci)11
b(\264)-44 b(o)50 957 y Ff(Nom)7 b(\264)-37 b(es)21 b(cal)j(enviar)f
(el)g(pr)n(ocediment)e(r)n(equerit;)h(el)h(pr)n(ograma)g(principal)h
(ser)8 b(\036)-38 b(a)22 b(ignorat.)50 1212 y Fb(Metadata)p
0 TeXcolorgray 0 TeXcolorgray 50 1389 a Fa(language:)50
b(ca)50 1502 y(source:)h(raluvi@jutge:/h)o(om)o(e/)o(ra)o(luv)o(i/)o
(pr)o(ob)o(le)o(mes)o(/o)o(rd)o(en)o(ac)o(io-)o(se)o(le)o(cc)o(io)o
(.pb)o(m)50 1615 y(generation-tim)o(e:)d(2017-04-04)i(16:06:23)50
1827 y Ff(pr)n(oblem.ca.yml:)p 0 TeXcolorgray 0 TeXcolorgray
50 2015 a Fa(email:)h(jpetit@lsi.upc.e)o(du)50 2128 y(title:)g
(Ordenaci)871 2127 y(\264)871 2128 y(o)g(per)i(selecci)1580
2127 y(\264)1580 2128 y(o)50 2241 y(author:)e(Jordi)h(Petit)50
2428 y Ff(handler)-7 b(.yml:)p 0 TeXcolorgray 0 TeXcolorgray
50 2616 a Fa(handler:)51 b(std)50 2729 y(source_modifie)o(r:)d(no_main)
p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
